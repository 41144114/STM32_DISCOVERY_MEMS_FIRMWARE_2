
testProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d44  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08002ed0  08002ed0  00012ed0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f70  08002f70  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f70  08002f70  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f70  08002f70  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f70  08002f70  00012f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f74  08002f74  00012f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08002f84  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08002f84  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000603d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012d3  00000000  00000000  00026079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000480  00000000  00000000  00027350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000430  00000000  00000000  000277d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001402  00000000  00000000  00027c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005cbc  00000000  00000000  00029002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9760  00000000  00000000  0002ecbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d841e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000012ac  00000000  00000000  000d8474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002eb4 	.word	0x08002eb4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002eb4 	.word	0x08002eb4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2f>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a7c:	bf24      	itt	cs
 8000a7e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a82:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a86:	d90d      	bls.n	8000aa4 <__aeabi_d2f+0x30>
 8000a88:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a8c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a90:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a94:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a98:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a9c:	bf08      	it	eq
 8000a9e:	f020 0001 	biceq.w	r0, r0, #1
 8000aa2:	4770      	bx	lr
 8000aa4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa8:	d121      	bne.n	8000aee <__aeabi_d2f+0x7a>
 8000aaa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aae:	bfbc      	itt	lt
 8000ab0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	4770      	bxlt	lr
 8000ab6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000abe:	f1c2 0218 	rsb	r2, r2, #24
 8000ac2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ac6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aca:	fa20 f002 	lsr.w	r0, r0, r2
 8000ace:	bf18      	it	ne
 8000ad0:	f040 0001 	orrne.w	r0, r0, #1
 8000ad4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000adc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae0:	ea40 000c 	orr.w	r0, r0, ip
 8000ae4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aec:	e7cc      	b.n	8000a88 <__aeabi_d2f+0x14>
 8000aee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af2:	d107      	bne.n	8000b04 <__aeabi_d2f+0x90>
 8000af4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af8:	bf1e      	ittt	ne
 8000afa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000afe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b02:	4770      	bxne	lr
 8000b04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <turnOnLed>:
#include "stm32f3xx.h"
#include "leds.h"
#include <math.h>

void turnOnLed(int i)//включение диодов
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	GPIOE->MODER &= ~(1 <<(i*2+1) );  	//Настраиваем режим ножки 01
 8000b1c:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <turnOnLed+0x58>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	687a      	ldr	r2, [r7, #4]
 8000b22:	0052      	lsls	r2, r2, #1
 8000b24:	3201      	adds	r2, #1
 8000b26:	2101      	movs	r1, #1
 8000b28:	fa01 f202 	lsl.w	r2, r1, r2
 8000b2c:	43d2      	mvns	r2, r2
 8000b2e:	4611      	mov	r1, r2
 8000b30:	4a0e      	ldr	r2, [pc, #56]	; (8000b6c <turnOnLed+0x58>)
 8000b32:	400b      	ands	r3, r1
 8000b34:	6013      	str	r3, [r2, #0]
	GPIOE->MODER |= (1 << i*2);
 8000b36:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <turnOnLed+0x58>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	0052      	lsls	r2, r2, #1
 8000b3e:	2101      	movs	r1, #1
 8000b40:	fa01 f202 	lsl.w	r2, r1, r2
 8000b44:	4611      	mov	r1, r2
 8000b46:	4a09      	ldr	r2, [pc, #36]	; (8000b6c <turnOnLed+0x58>)
 8000b48:	430b      	orrs	r3, r1
 8000b4a:	6013      	str	r3, [r2, #0]
	GPIOE->ODR |= (1 << i);//включили
 8000b4c:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <turnOnLed+0x58>)
 8000b4e:	695b      	ldr	r3, [r3, #20]
 8000b50:	2101      	movs	r1, #1
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	fa01 f202 	lsl.w	r2, r1, r2
 8000b58:	4611      	mov	r1, r2
 8000b5a:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <turnOnLed+0x58>)
 8000b5c:	430b      	orrs	r3, r1
 8000b5e:	6153      	str	r3, [r2, #20]
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	48001000 	.word	0x48001000

08000b70 <turnOffLed>:

void turnOffLed(int i)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
	GPIOE->MODER &= ~(1 << (i*2+1) );  	//Настраиваем режим ножки 01
 8000b78:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <turnOffLed+0x5c>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	0052      	lsls	r2, r2, #1
 8000b80:	3201      	adds	r2, #1
 8000b82:	2101      	movs	r1, #1
 8000b84:	fa01 f202 	lsl.w	r2, r1, r2
 8000b88:	43d2      	mvns	r2, r2
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	4a0f      	ldr	r2, [pc, #60]	; (8000bcc <turnOffLed+0x5c>)
 8000b8e:	400b      	ands	r3, r1
 8000b90:	6013      	str	r3, [r2, #0]
	GPIOE->MODER |= (1 << i*2);
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <turnOffLed+0x5c>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	0052      	lsls	r2, r2, #1
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba0:	4611      	mov	r1, r2
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <turnOffLed+0x5c>)
 8000ba4:	430b      	orrs	r3, r1
 8000ba6:	6013      	str	r3, [r2, #0]
	GPIOE->ODR &= ~(1 << i);//выключили
 8000ba8:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <turnOffLed+0x5c>)
 8000baa:	695b      	ldr	r3, [r3, #20]
 8000bac:	2101      	movs	r1, #1
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb4:	43d2      	mvns	r2, r2
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <turnOffLed+0x5c>)
 8000bba:	400b      	ands	r3, r1
 8000bbc:	6153      	str	r3, [r2, #20]
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	48001000 	.word	0x48001000

08000bd0 <turnOffAllLeds>:

void turnOffAllLeds()
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	//выключаем отдельно каждый диод
	turnOffLed(9); //LD3
 8000bd4:	2009      	movs	r0, #9
 8000bd6:	f7ff ffcb 	bl	8000b70 <turnOffLed>
	turnOffLed(8); //LD4
 8000bda:	2008      	movs	r0, #8
 8000bdc:	f7ff ffc8 	bl	8000b70 <turnOffLed>
	turnOffLed(10); //LD5
 8000be0:	200a      	movs	r0, #10
 8000be2:	f7ff ffc5 	bl	8000b70 <turnOffLed>
	turnOffLed(15); //LD6
 8000be6:	200f      	movs	r0, #15
 8000be8:	f7ff ffc2 	bl	8000b70 <turnOffLed>
	turnOffLed(11); //LD7
 8000bec:	200b      	movs	r0, #11
 8000bee:	f7ff ffbf 	bl	8000b70 <turnOffLed>
	turnOffLed(14); //LD8
 8000bf2:	200e      	movs	r0, #14
 8000bf4:	f7ff ffbc 	bl	8000b70 <turnOffLed>
	turnOffLed(12); //LD9
 8000bf8:	200c      	movs	r0, #12
 8000bfa:	f7ff ffb9 	bl	8000b70 <turnOffLed>
	turnOffLed(13); //LD10
 8000bfe:	200d      	movs	r0, #13
 8000c00:	f7ff ffb6 	bl	8000b70 <turnOffLed>
}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <displayLevel>:
	else if(ugol > -157.5 && ugol <= -112.5)
		turnOnLed(LD9);
}

void displayLevel(short ax, short ay)
{
 8000c08:	b5b0      	push	{r4, r5, r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	460a      	mov	r2, r1
 8000c12:	80fb      	strh	r3, [r7, #6]
 8000c14:	4613      	mov	r3, r2
 8000c16:	80bb      	strh	r3, [r7, #4]
	turnOffAllLeds();//выключаем все диоды
 8000c18:	f7ff ffda 	bl	8000bd0 <turnOffAllLeds>
	if(abs(ax) < 900 && abs(ay) < 900)//если очень маленькие значения, не обращать на них внимания
 8000c1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	bfb8      	it	lt
 8000c24:	425b      	neglt	r3, r3
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000c2c:	d209      	bcs.n	8000c42 <displayLevel+0x3a>
 8000c2e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	bfb8      	it	lt
 8000c36:	425b      	neglt	r3, r3
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000c3e:	f0c0 80eb 	bcc.w	8000e18 <displayLevel+0x210>
		return;

	float ugol = atan2(ay, ax)*57;//перевели в градусы
 8000c42:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fc10 	bl	800046c <__aeabi_i2d>
 8000c4c:	4604      	mov	r4, r0
 8000c4e:	460d      	mov	r5, r1
 8000c50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fc09 	bl	800046c <__aeabi_i2d>
 8000c5a:	4602      	mov	r2, r0
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	ec43 2b11 	vmov	d1, r2, r3
 8000c62:	ec45 4b10 	vmov	d0, r4, r5
 8000c66:	f001 feab 	bl	80029c0 <atan2>
 8000c6a:	ec51 0b10 	vmov	r0, r1, d0
 8000c6e:	f04f 0200 	mov.w	r2, #0
 8000c72:	4b6b      	ldr	r3, [pc, #428]	; (8000e20 <displayLevel+0x218>)
 8000c74:	f7ff fc64 	bl	8000540 <__aeabi_dmul>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	4610      	mov	r0, r2
 8000c7e:	4619      	mov	r1, r3
 8000c80:	f7ff fef8 	bl	8000a74 <__aeabi_d2f>
 8000c84:	4603      	mov	r3, r0
 8000c86:	60fb      	str	r3, [r7, #12]

	if(ugol > -22.5 && ugol <= 22.5)
 8000c88:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c8c:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8000e24 <displayLevel+0x21c>
 8000c90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c98:	dd0f      	ble.n	8000cba <displayLevel+0xb2>
 8000c9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c9e:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8000e28 <displayLevel+0x220>
 8000ca2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000caa:	d806      	bhi.n	8000cba <displayLevel+0xb2>
	{
		turnOnLed(LD6);
 8000cac:	200f      	movs	r0, #15
 8000cae:	f7ff ff31 	bl	8000b14 <turnOnLed>
		turnOnLed(LD7);
 8000cb2:	200b      	movs	r0, #11
 8000cb4:	f7ff ff2e 	bl	8000b14 <turnOnLed>
 8000cb8:	e0af      	b.n	8000e1a <displayLevel+0x212>
	}
	else if(ugol > 22.5 && ugol <= 67.5)
 8000cba:	edd7 7a03 	vldr	s15, [r7, #12]
 8000cbe:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8000e28 <displayLevel+0x220>
 8000cc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cca:	dd0f      	ble.n	8000cec <displayLevel+0xe4>
 8000ccc:	edd7 7a03 	vldr	s15, [r7, #12]
 8000cd0:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8000e2c <displayLevel+0x224>
 8000cd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cdc:	d806      	bhi.n	8000cec <displayLevel+0xe4>
	{
		turnOnLed(LD5);
 8000cde:	200a      	movs	r0, #10
 8000ce0:	f7ff ff18 	bl	8000b14 <turnOnLed>
		turnOnLed(LD8);
 8000ce4:	200e      	movs	r0, #14
 8000ce6:	f7ff ff15 	bl	8000b14 <turnOnLed>
 8000cea:	e096      	b.n	8000e1a <displayLevel+0x212>
	}
	else if(ugol > 67.5 && ugol <= 112.5)
 8000cec:	edd7 7a03 	vldr	s15, [r7, #12]
 8000cf0:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8000e2c <displayLevel+0x224>
 8000cf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cfc:	dd0f      	ble.n	8000d1e <displayLevel+0x116>
 8000cfe:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d02:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8000e30 <displayLevel+0x228>
 8000d06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d0e:	d806      	bhi.n	8000d1e <displayLevel+0x116>
	{
		turnOnLed(LD3);
 8000d10:	2009      	movs	r0, #9
 8000d12:	f7ff feff 	bl	8000b14 <turnOnLed>
		turnOnLed(LD10);
 8000d16:	200d      	movs	r0, #13
 8000d18:	f7ff fefc 	bl	8000b14 <turnOnLed>
 8000d1c:	e07d      	b.n	8000e1a <displayLevel+0x212>
	}
	else if(ugol > 112.5 && ugol <= 157.5)
 8000d1e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d22:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8000e30 <displayLevel+0x228>
 8000d26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d2e:	dd0f      	ble.n	8000d50 <displayLevel+0x148>
 8000d30:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d34:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8000e34 <displayLevel+0x22c>
 8000d38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d40:	d806      	bhi.n	8000d50 <displayLevel+0x148>
	{
		turnOnLed(LD9);
 8000d42:	200c      	movs	r0, #12
 8000d44:	f7ff fee6 	bl	8000b14 <turnOnLed>
		turnOnLed(LD4);
 8000d48:	2008      	movs	r0, #8
 8000d4a:	f7ff fee3 	bl	8000b14 <turnOnLed>
 8000d4e:	e064      	b.n	8000e1a <displayLevel+0x212>
	}
	else if(ugol > 157.5 || ugol <= -157.5)
 8000d50:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d54:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8000e34 <displayLevel+0x22c>
 8000d58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d60:	dc08      	bgt.n	8000d74 <displayLevel+0x16c>
 8000d62:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d66:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8000e38 <displayLevel+0x230>
 8000d6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d72:	d806      	bhi.n	8000d82 <displayLevel+0x17a>
	{
		turnOnLed(LD6);
 8000d74:	200f      	movs	r0, #15
 8000d76:	f7ff fecd 	bl	8000b14 <turnOnLed>
		turnOnLed(LD7);
 8000d7a:	200b      	movs	r0, #11
 8000d7c:	f7ff feca 	bl	8000b14 <turnOnLed>
 8000d80:	e04b      	b.n	8000e1a <displayLevel+0x212>
	}
	else if(ugol > -67.5 && ugol <= -22.5)
 8000d82:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d86:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8000e3c <displayLevel+0x234>
 8000d8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d92:	dd0f      	ble.n	8000db4 <displayLevel+0x1ac>
 8000d94:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d98:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8000e24 <displayLevel+0x21c>
 8000d9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000da4:	d806      	bhi.n	8000db4 <displayLevel+0x1ac>
	{
		turnOnLed(LD9);
 8000da6:	200c      	movs	r0, #12
 8000da8:	f7ff feb4 	bl	8000b14 <turnOnLed>
		turnOnLed(LD4);
 8000dac:	2008      	movs	r0, #8
 8000dae:	f7ff feb1 	bl	8000b14 <turnOnLed>
 8000db2:	e032      	b.n	8000e1a <displayLevel+0x212>
	}
	else if(ugol > -112.5 && ugol <= -67.5)
 8000db4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000db8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8000e40 <displayLevel+0x238>
 8000dbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc4:	dd0f      	ble.n	8000de6 <displayLevel+0x1de>
 8000dc6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dca:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000e3c <displayLevel+0x234>
 8000dce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dd6:	d806      	bhi.n	8000de6 <displayLevel+0x1de>
	{
		turnOnLed(LD3);
 8000dd8:	2009      	movs	r0, #9
 8000dda:	f7ff fe9b 	bl	8000b14 <turnOnLed>
		turnOnLed(LD10);
 8000dde:	200d      	movs	r0, #13
 8000de0:	f7ff fe98 	bl	8000b14 <turnOnLed>
 8000de4:	e019      	b.n	8000e1a <displayLevel+0x212>
	}
	else if(ugol > -157.5 && ugol <= -112.5)
 8000de6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dea:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000e38 <displayLevel+0x230>
 8000dee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000df6:	dd10      	ble.n	8000e1a <displayLevel+0x212>
 8000df8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dfc:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000e40 <displayLevel+0x238>
 8000e00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e08:	d807      	bhi.n	8000e1a <displayLevel+0x212>
	{
		turnOnLed(LD5);
 8000e0a:	200a      	movs	r0, #10
 8000e0c:	f7ff fe82 	bl	8000b14 <turnOnLed>
		turnOnLed(LD8);
 8000e10:	200e      	movs	r0, #14
 8000e12:	f7ff fe7f 	bl	8000b14 <turnOnLed>
 8000e16:	e000      	b.n	8000e1a <displayLevel+0x212>
		return;
 8000e18:	bf00      	nop
	}
}
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bdb0      	pop	{r4, r5, r7, pc}
 8000e20:	404c8000 	.word	0x404c8000
 8000e24:	c1b40000 	.word	0xc1b40000
 8000e28:	41b40000 	.word	0x41b40000
 8000e2c:	42870000 	.word	0x42870000
 8000e30:	42e10000 	.word	0x42e10000
 8000e34:	431d8000 	.word	0x431d8000
 8000e38:	c31d8000 	.word	0xc31d8000
 8000e3c:	c2870000 	.word	0xc2870000
 8000e40:	c2e10000 	.word	0xc2e10000

08000e44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b0ac      	sub	sp, #176	; 0xb0
 8000e48:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e4a:	f000 fb53 	bl	80014f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e4e:	f000 f85a 	bl	8000f06 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

  setupFlash();
 8000e52:	f000 f947 	bl	80010e4 <setupFlash>
  setupPll();
 8000e56:	f000 f95b 	bl	8001110 <setupPll>
  powerOn();
 8000e5a:	f000 f921 	bl	80010a0 <powerOn>
//  setupLight();
  setupI2C1();
 8000e5e:	f000 f9f3 	bl	8001248 <setupI2C1>
  setupSpi1();
 8000e62:	f000 f9a9 	bl	80011b8 <setupSpi1>

  setupGyroscope();
 8000e66:	f000 fa35 	bl	80012d4 <setupGyroscope>
  packet_t buf;


  char data[10]; //массив с переданными или полученными данными
  //настраиваем блок акселерометров
  data[0] = 0x20; //обращаемся к регистру CTRL_REG1_A по адресу 20h//запоминаем адрес регистра
 8000e6a:	2320      	movs	r3, #32
 8000e6c:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
  data[1] = 0x57; //заполняем регистр//записываем данные
 8000e70:	2357      	movs	r3, #87	; 0x57
 8000e72:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
  writeAcc(0x19, data, 2, 1);//подключаемся к акселерометру, настраиваем параметры обмена информацией
 8000e76:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	2019      	movs	r0, #25
 8000e80:	f000 f882 	bl	8000f88 <writeAcc>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
//	  clock();
	  if(GPIOE->IDR & 2)
 8000e84:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <main+0xb0>)
 8000e86:	691b      	ldr	r3, [r3, #16]
 8000e88:	f003 0302 	and.w	r3, r3, #2
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d0f9      	beq.n	8000e84 <main+0x40>
	  {

	  		 // CDC_Transmit_FS("sss", 3);
	  //		  buf.t = 44 - readGyroscopeRegister(0x26);
//		  readGyroscopeData(&buf.Gx, &buf.Gy, &buf.Gz);
	      getAcc(accData);
 8000e90:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000e94:	4618      	mov	r0, r3
 8000e96:	f000 f8ed 	bl	8001074 <getAcc>
	      ax = (accData[1] << 8) + accData[0];
 8000e9a:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	021b      	lsls	r3, r3, #8
 8000ea2:	b29a      	uxth	r2, r3
 8000ea4:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	4413      	add	r3, r2
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
	      ay = (accData[3] << 8) + accData[2];
 8000eb2:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	021b      	lsls	r3, r3, #8
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	4413      	add	r3, r2
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
	      az = (accData[5] << 8) + accData[4];
 8000eca:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	021b      	lsls	r3, r3, #8
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	4413      	add	r3, r2
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa

//	      displayDown(ax, ay);
	      displayLevel(ax, ay);
 8000ee2:	f9b7 20ac 	ldrsh.w	r2, [r7, #172]	; 0xac
 8000ee6:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 8000eea:	4611      	mov	r1, r2
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fe8b 	bl	8000c08 <displayLevel>
	  if(GPIOE->IDR & 2)
 8000ef2:	e7c7      	b.n	8000e84 <main+0x40>
 8000ef4:	48001000 	.word	0x48001000

08000ef8 <myTimerInterruptHandler>:
  }
  /* USER CODE END 3 */
}

void myTimerInterruptHandler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
//	SwitchLed(13);
//	TIM1->SR &= ~1;
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b090      	sub	sp, #64	; 0x40
 8000f0a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f0c:	f107 0318 	add.w	r3, r7, #24
 8000f10:	2228      	movs	r2, #40	; 0x28
 8000f12:	2100      	movs	r1, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f001 fd4b 	bl	80029b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f30:	2310      	movs	r3, #16
 8000f32:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f34:	2300      	movs	r3, #0
 8000f36:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f38:	f107 0318 	add.w	r3, r7, #24
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f000 fc25 	bl	800178c <HAL_RCC_OscConfig>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000f48:	f000 f818 	bl	8000f7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f4c:	230f      	movs	r3, #15
 8000f4e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f50:	2300      	movs	r3, #0
 8000f52:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f54:	2300      	movs	r3, #0
 8000f56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f001 fb19 	bl	800259c <HAL_RCC_ClockConfig>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000f70:	f000 f804 	bl	8000f7c <Error_Handler>
  }
}
 8000f74:	bf00      	nop
 8000f76:	3740      	adds	r7, #64	; 0x40
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f80:	b672      	cpsid	i
}
 8000f82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <Error_Handler+0x8>
	...

08000f88 <writeAcc>:
		flag++;
	}
}

void writeAcc(char address, char* data, char nbytes, char stop)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6039      	str	r1, [r7, #0]
 8000f90:	4611      	mov	r1, r2
 8000f92:	461a      	mov	r2, r3
 8000f94:	4603      	mov	r3, r0
 8000f96:	71fb      	strb	r3, [r7, #7]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	71bb      	strb	r3, [r7, #6]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	717b      	strb	r3, [r7, #5]
        I2C1->CR2 = ((address << 1) | (nbytes << 16) | (stop << 25));
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	005a      	lsls	r2, r3, #1
 8000fa4:	79bb      	ldrb	r3, [r7, #6]
 8000fa6:	041b      	lsls	r3, r3, #16
 8000fa8:	431a      	orrs	r2, r3
 8000faa:	797b      	ldrb	r3, [r7, #5]
 8000fac:	065b      	lsls	r3, r3, #25
 8000fae:	431a      	orrs	r2, r3
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <writeAcc+0x74>)
 8000fb2:	605a      	str	r2, [r3, #4]
        I2C1->CR2 |= (1 << 13);	//������ ��������
 8000fb4:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <writeAcc+0x74>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	4a10      	ldr	r2, [pc, #64]	; (8000ffc <writeAcc+0x74>)
 8000fba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fbe:	6053      	str	r3, [r2, #4]
        int i=0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
        //���� � ���������
  while (i < nbytes)
 8000fc4:	e00f      	b.n	8000fe6 <writeAcc+0x5e>
  {
    while((I2C1->ISR & (1 << 1))==0)//���� 1(����������) � ������� �� �����
 8000fc6:	bf00      	nop
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <writeAcc+0x74>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d0f9      	beq.n	8000fc8 <writeAcc+0x40>
    {
    }
    I2C1->TXDR = data[i];//��������� ������� I2C1_TXDR
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	683a      	ldr	r2, [r7, #0]
 8000fd8:	4413      	add	r3, r2
 8000fda:	781a      	ldrb	r2, [r3, #0]
 8000fdc:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <writeAcc+0x74>)
 8000fde:	629a      	str	r2, [r3, #40]	; 0x28
    i++;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	60fb      	str	r3, [r7, #12]
  while (i < nbytes)
 8000fe6:	79bb      	ldrb	r3, [r7, #6]
 8000fe8:	68fa      	ldr	r2, [r7, #12]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	dbeb      	blt.n	8000fc6 <writeAcc+0x3e>
  }
}
 8000fee:	bf00      	nop
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	40005400 	.word	0x40005400

08001000 <readAcc>:

void readAcc(char address, char* data, char nbytes)//��� 18
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	71fb      	strb	r3, [r7, #7]
 800100c:	4613      	mov	r3, r2
 800100e:	71bb      	strb	r3, [r7, #6]
        I2C1->CR2 = ((address << 1) | (nbytes << 16) | (1 << 25) | (1 << 10));
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	005a      	lsls	r2, r3, #1
 8001014:	79bb      	ldrb	r3, [r7, #6]
 8001016:	041b      	lsls	r3, r3, #16
 8001018:	4313      	orrs	r3, r2
 800101a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800101e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001022:	4a13      	ldr	r2, [pc, #76]	; (8001070 <readAcc+0x70>)
 8001024:	6053      	str	r3, [r2, #4]
        I2C1->CR2 |= (1 << 13);//������ ��������
 8001026:	4b12      	ldr	r3, [pc, #72]	; (8001070 <readAcc+0x70>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	4a11      	ldr	r2, [pc, #68]	; (8001070 <readAcc+0x70>)
 800102c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001030:	6053      	str	r3, [r2, #4]
        int i = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
  while (i < nbytes)
 8001036:	e010      	b.n	800105a <readAcc+0x5a>
  {
    while((I2C1->ISR & (1 << 2))==0)//���� 1
 8001038:	bf00      	nop
 800103a:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <readAcc+0x70>)
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	f003 0304 	and.w	r3, r3, #4
 8001042:	2b00      	cmp	r3, #0
 8001044:	d0f9      	beq.n	800103a <readAcc+0x3a>
    {
    }
    data[i] = I2C1->RXDR;//���������� ������ � ������ �� �������� I2C1_RXDR
 8001046:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <readAcc+0x70>)
 8001048:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	683a      	ldr	r2, [r7, #0]
 800104e:	4413      	add	r3, r2
 8001050:	b2ca      	uxtb	r2, r1
 8001052:	701a      	strb	r2, [r3, #0]
    i++;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	3301      	adds	r3, #1
 8001058:	60fb      	str	r3, [r7, #12]
  while (i < nbytes)
 800105a:	79bb      	ldrb	r3, [r7, #6]
 800105c:	68fa      	ldr	r2, [r7, #12]
 800105e:	429a      	cmp	r2, r3
 8001060:	dbea      	blt.n	8001038 <readAcc+0x38>
  }
}
 8001062:	bf00      	nop
 8001064:	bf00      	nop
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	40005400 	.word	0x40005400

08001074 <getAcc>:

void getAcc(char* data)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
        char axyz = 0xA8;//����� �������� OUT_X_L_A
 800107c:	23a8      	movs	r3, #168	; 0xa8
 800107e:	73fb      	strb	r3, [r7, #15]
        writeAcc(0x19, &axyz, 1, 0);//���������� ����� �����, ������ ���� �������� ������
 8001080:	f107 010f 	add.w	r1, r7, #15
 8001084:	2300      	movs	r3, #0
 8001086:	2201      	movs	r2, #1
 8001088:	2019      	movs	r0, #25
 800108a:	f7ff ff7d 	bl	8000f88 <writeAcc>

        readAcc(0x19, data, 6); //�������� ���� ������ � �������������
 800108e:	2206      	movs	r2, #6
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	2019      	movs	r0, #25
 8001094:	f7ff ffb4 	bl	8001000 <readAcc>
}
 8001098:	bf00      	nop
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <powerOn>:


void powerOn()
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= (1 << 12);	//Enable SPI1
 80010a4:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <powerOn+0x40>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	4a0d      	ldr	r2, [pc, #52]	; (80010e0 <powerOn+0x40>)
 80010aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010ae:	6193      	str	r3, [r2, #24]
	RCC->APB1ENR |= (1 << 21);	//Enable I2C
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <powerOn+0x40>)
 80010b2:	69db      	ldr	r3, [r3, #28]
 80010b4:	4a0a      	ldr	r2, [pc, #40]	; (80010e0 <powerOn+0x40>)
 80010b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010ba:	61d3      	str	r3, [r2, #28]
	RCC->AHBENR |= ((1 << 17) | (1 << 21) | (1 << 18)); //Enable GPIOA & GPIOE & GPIOB
 80010bc:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <powerOn+0x40>)
 80010be:	695b      	ldr	r3, [r3, #20]
 80010c0:	4a07      	ldr	r2, [pc, #28]	; (80010e0 <powerOn+0x40>)
 80010c2:	f443 1318 	orr.w	r3, r3, #2490368	; 0x260000
 80010c6:	6153      	str	r3, [r2, #20]
	RCC->APB2ENR |= (1 << 11); // Подали питание на таймер
 80010c8:	4b05      	ldr	r3, [pc, #20]	; (80010e0 <powerOn+0x40>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	4a04      	ldr	r2, [pc, #16]	; (80010e0 <powerOn+0x40>)
 80010ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010d2:	6193      	str	r3, [r2, #24]
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	40021000 	.word	0x40021000

080010e4 <setupFlash>:

void setupFlash()
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
	FLASH->ACR &= ~7;	//��������� flash-������ �� ������ �� ������� 72 ���!!!!!!!!!	<--------
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <setupFlash+0x28>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a07      	ldr	r2, [pc, #28]	; (800110c <setupFlash+0x28>)
 80010ee:	f023 0307 	bic.w	r3, r3, #7
 80010f2:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= 2;	//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!	<---------------
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <setupFlash+0x28>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a04      	ldr	r2, [pc, #16]	; (800110c <setupFlash+0x28>)
 80010fa:	f043 0302 	orr.w	r3, r3, #2
 80010fe:	6013      	str	r3, [r2, #0]
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	40022000 	.word	0x40022000

08001110 <setupPll>:

void setupPll()
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
	RCC->CR |= (5 << 16);	//HSE ON + HSE Bypass
 8001114:	4b27      	ldr	r3, [pc, #156]	; (80011b4 <setupPll+0xa4>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a26      	ldr	r2, [pc, #152]	; (80011b4 <setupPll+0xa4>)
 800111a:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 800111e:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & (1 << 17)))
 8001120:	bf00      	nop
 8001122:	4b24      	ldr	r3, [pc, #144]	; (80011b4 <setupPll+0xa4>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d0f9      	beq.n	8001122 <setupPll+0x12>
	{
	}


	RCC->CR &= ~(1 << 24);	//Disable PLL
 800112e:	4b21      	ldr	r3, [pc, #132]	; (80011b4 <setupPll+0xa4>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a20      	ldr	r2, [pc, #128]	; (80011b4 <setupPll+0xa4>)
 8001134:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001138:	6013      	str	r3, [r2, #0]
	while(RCC->CR & (1 << 25))
 800113a:	bf00      	nop
 800113c:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <setupPll+0xa4>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d1f9      	bne.n	800113c <setupPll+0x2c>
	{
	}

	//change a desire parameter
	RCC->CFGR |= (1 << 16);	//������� HSI/2 � �������� ��������� ��� PLL
 8001148:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <setupPll+0xa4>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	4a19      	ldr	r2, [pc, #100]	; (80011b4 <setupPll+0xa4>)
 800114e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001152:	6053      	str	r3, [r2, #4]
	RCC->CFGR &= ~(0xF << 18);
 8001154:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <setupPll+0xa4>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	4a16      	ldr	r2, [pc, #88]	; (80011b4 <setupPll+0xa4>)
 800115a:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 800115e:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (0x7 << 18); //���������� ������������� �� x16
 8001160:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <setupPll+0xa4>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	4a13      	ldr	r2, [pc, #76]	; (80011b4 <setupPll+0xa4>)
 8001166:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 800116a:	6053      	str	r3, [r2, #4]
	RCC->CFGR2 &= ~(0xF);
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <setupPll+0xa4>)
 800116e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001170:	4a10      	ldr	r2, [pc, #64]	; (80011b4 <setupPll+0xa4>)
 8001172:	f023 030f 	bic.w	r3, r3, #15
 8001176:	62d3      	str	r3, [r2, #44]	; 0x2c


	RCC->CR |= (1 << 24);//Enable PLL again
 8001178:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <setupPll+0xa4>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a0d      	ldr	r2, [pc, #52]	; (80011b4 <setupPll+0xa4>)
 800117e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001182:	6013      	str	r3, [r2, #0]
	while( !(RCC->CR & (1 << 25)))
 8001184:	bf00      	nop
 8001186:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <setupPll+0xa4>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0f9      	beq.n	8001186 <setupPll+0x76>
	{
	}


	RCC->CFGR &= ~3;	// ����������� ���� �� PLL
 8001192:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <setupPll+0xa4>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	4a07      	ldr	r2, [pc, #28]	; (80011b4 <setupPll+0xa4>)
 8001198:	f023 0303 	bic.w	r3, r3, #3
 800119c:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= 2;
 800119e:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <setupPll+0xa4>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	4a04      	ldr	r2, [pc, #16]	; (80011b4 <setupPll+0xa4>)
 80011a4:	f043 0302 	orr.w	r3, r3, #2
 80011a8:	6053      	str	r3, [r2, #4]
}
 80011aa:	bf00      	nop
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	40021000 	.word	0x40021000

080011b8 <setupSpi1>:
	TIM1->PSC = 999;
	TIM1->CR1 |= 1; 	//������ �������
}

void setupSpi1()
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
	GPIOA->MODER &= ~(63 << 10); //�������� �� ��� ���� � ���� ��������
 80011bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80011c6:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 80011ca:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= ((1 << 11) | (1 << 13) | (1 << 15)); // ���������� ����� alternate function
 80011cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80011d6:	f443 4328 	orr.w	r3, r3, #43008	; 0xa800
 80011da:	6013      	str	r3, [r2, #0]

	GPIOE->MODER &= ~(3 << 6);//�������� �� ��� ���� � ���� ��������
 80011dc:	4b18      	ldr	r3, [pc, #96]	; (8001240 <setupSpi1+0x88>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a17      	ldr	r2, [pc, #92]	; (8001240 <setupSpi1+0x88>)
 80011e2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80011e6:	6013      	str	r3, [r2, #0]
	GPIOE->MODER |= (1 << 6); // ���������� ����� out
 80011e8:	4b15      	ldr	r3, [pc, #84]	; (8001240 <setupSpi1+0x88>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a14      	ldr	r2, [pc, #80]	; (8001240 <setupSpi1+0x88>)
 80011ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011f2:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] &= ~((0xF << 20) | (0xF << 24) | (0xF << 28));	//��������� ������� ����������� alternate function ��� ��� PA5, PA6, PA7
 80011f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011f8:	6a1b      	ldr	r3, [r3, #32]
 80011fa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80011fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001202:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0x5 << 20) | (0x5 << 24) | (0x5 << 28);	//���������� AF5 ��� alternate function
 8001204:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001208:	6a1b      	ldr	r3, [r3, #32]
 800120a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800120e:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8001212:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8001216:	6213      	str	r3, [r2, #32]
	SPI1->CR1 |= (3 << 3);
	SPI1->CR1 |= (1 << 2); //Set master

	SPI1->CR1 |= (1 << 6);	//SPI1 enable*/

	SPI1->CR2 = 0x1700;//��������� Control Register 2
 8001218:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <setupSpi1+0x8c>)
 800121a:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 800121e:	605a      	str	r2, [r3, #4]
	SPI1->CR1 = 0x357;//��������� Control Register 1
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <setupSpi1+0x8c>)
 8001222:	f240 3257 	movw	r2, #855	; 0x357
 8001226:	601a      	str	r2, [r3, #0]
	GPIOE->ODR |= (1 << 3);//������� ��� ��������
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <setupSpi1+0x88>)
 800122a:	695b      	ldr	r3, [r3, #20]
 800122c:	4a04      	ldr	r2, [pc, #16]	; (8001240 <setupSpi1+0x88>)
 800122e:	f043 0308 	orr.w	r3, r3, #8
 8001232:	6153      	str	r3, [r2, #20]
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	48001000 	.word	0x48001000
 8001244:	40013000 	.word	0x40013000

08001248 <setupI2C1>:

void setupI2C1()
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

	GPIOB->MODER &= ~(0xF << 12); //�������� �� ��� ���� � ���� ��������
 800124c:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <setupI2C1+0x7c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a1c      	ldr	r2, [pc, #112]	; (80012c4 <setupI2C1+0x7c>)
 8001252:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001256:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= ((1 << 13) | (1 << 15)); // ���������� ����� alternate function
 8001258:	4b1a      	ldr	r3, [pc, #104]	; (80012c4 <setupI2C1+0x7c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a19      	ldr	r2, [pc, #100]	; (80012c4 <setupI2C1+0x7c>)
 800125e:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 8001262:	6013      	str	r3, [r2, #0]

	GPIOE->MODER &= ~(3 << 4);// ���������� ����� in
 8001264:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <setupI2C1+0x80>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a17      	ldr	r2, [pc, #92]	; (80012c8 <setupI2C1+0x80>)
 800126a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800126e:	6013      	str	r3, [r2, #0]

	GPIOB->AFR[0] &= ~((0xF << 24) | (0xF << 28));	//��������� ������� ����������� alternate function ��� ��� PB6, PB7
 8001270:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <setupI2C1+0x7c>)
 8001272:	6a1b      	ldr	r3, [r3, #32]
 8001274:	4a13      	ldr	r2, [pc, #76]	; (80012c4 <setupI2C1+0x7c>)
 8001276:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800127a:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |=  (0x4 << 24) | (0x4 << 28);	//���������� AF4 ��� alternate function
 800127c:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <setupI2C1+0x7c>)
 800127e:	6a1b      	ldr	r3, [r3, #32]
 8001280:	4a10      	ldr	r2, [pc, #64]	; (80012c4 <setupI2C1+0x7c>)
 8001282:	f043 4388 	orr.w	r3, r3, #1140850688	; 0x44000000
 8001286:	6213      	str	r3, [r2, #32]

	I2C1->CR1 &= ~1;	// Clear PE bit
 8001288:	4b10      	ldr	r3, [pc, #64]	; (80012cc <setupI2C1+0x84>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a0f      	ldr	r2, [pc, #60]	; (80012cc <setupI2C1+0x84>)
 800128e:	f023 0301 	bic.w	r3, r3, #1
 8001292:	6013      	str	r3, [r2, #0]
//	I2C1->CR1 |= (1 << 12);	// off anfoff (analog noise filter)
//	I2C1->CR1 &= ~(0xF << 8);	//off DNF
	I2C1->TIMINGR &= (0xF << 24);	//clear timings
 8001294:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <setupI2C1+0x84>)
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	4a0c      	ldr	r2, [pc, #48]	; (80012cc <setupI2C1+0x84>)
 800129a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800129e:	6113      	str	r3, [r2, #16]
	I2C1->TIMINGR |= (9 | (3 << 8) | (1 << 16) | (3 << 20));	//setup timings
 80012a0:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <setupI2C1+0x84>)
 80012a2:	691a      	ldr	r2, [r3, #16]
 80012a4:	4909      	ldr	r1, [pc, #36]	; (80012cc <setupI2C1+0x84>)
 80012a6:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <setupI2C1+0x88>)
 80012a8:	4313      	orrs	r3, r2
 80012aa:	610b      	str	r3, [r1, #16]
//	I2C1->CR1 |=  (1 << 17); // disable strectching
	I2C1->CR1 |= 1;	// Clear PE bit
 80012ac:	4b07      	ldr	r3, [pc, #28]	; (80012cc <setupI2C1+0x84>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a06      	ldr	r2, [pc, #24]	; (80012cc <setupI2C1+0x84>)
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	6013      	str	r3, [r2, #0]
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	48000400 	.word	0x48000400
 80012c8:	48001000 	.word	0x48001000
 80012cc:	40005400 	.word	0x40005400
 80012d0:	00310309 	.word	0x00310309

080012d4 <setupGyroscope>:
		}
	}
}

void setupGyroscope()
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
	writeGyroscopeRegister(0x20, 0x0F);
 80012da:	210f      	movs	r1, #15
 80012dc:	2020      	movs	r0, #32
 80012de:	f000 f85d 	bl	800139c <writeGyroscopeRegister>
	unsigned char temp = readGyroscopeRegister(0x22);
 80012e2:	2022      	movs	r0, #34	; 0x22
 80012e4:	f000 f834 	bl	8001350 <readGyroscopeRegister>
 80012e8:	4603      	mov	r3, r0
 80012ea:	71fb      	strb	r3, [r7, #7]
	temp |= (1 << 3); // Выставили DRDY
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	f043 0308 	orr.w	r3, r3, #8
 80012f2:	71fb      	strb	r3, [r7, #7]
	writeGyroscopeRegister(0x22, temp);
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	4619      	mov	r1, r3
 80012f8:	2022      	movs	r0, #34	; 0x22
 80012fa:	f000 f84f 	bl	800139c <writeGyroscopeRegister>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <sendOneByteToGyroscope>:

unsigned char sendOneByteToGyroscope(unsigned char byte)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
	while(!(SPI1->SR & 2))	//��� ���� transmit buffer not empty
 8001312:	bf00      	nop
 8001314:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <sendOneByteToGyroscope+0x40>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0f9      	beq.n	8001314 <sendOneByteToGyroscope+0xc>
	{
	}

	*((unsigned char*)&SPI1->DR) = byte;
 8001320:	4a0a      	ldr	r2, [pc, #40]	; (800134c <sendOneByteToGyroscope+0x44>)
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	7013      	strb	r3, [r2, #0]

	while(!(SPI1->SR & 1))	//��� ���� Receive buffer empty
 8001326:	bf00      	nop
 8001328:	4b07      	ldr	r3, [pc, #28]	; (8001348 <sendOneByteToGyroscope+0x40>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0f9      	beq.n	8001328 <sendOneByteToGyroscope+0x20>
	{
	}
	return SPI1->DR;
 8001334:	4b04      	ldr	r3, [pc, #16]	; (8001348 <sendOneByteToGyroscope+0x40>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	b2db      	uxtb	r3, r3
}
 800133a:	4618      	mov	r0, r3
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40013000 	.word	0x40013000
 800134c:	4001300c 	.word	0x4001300c

08001350 <readGyroscopeRegister>:

unsigned char readGyroscopeRegister(int addres)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	GPIOE->ODR &= ~(1 << 3);//�������� ��� ��������
 8001358:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <readGyroscopeRegister+0x48>)
 800135a:	695b      	ldr	r3, [r3, #20]
 800135c:	4a0e      	ldr	r2, [pc, #56]	; (8001398 <readGyroscopeRegister+0x48>)
 800135e:	f023 0308 	bic.w	r3, r3, #8
 8001362:	6153      	str	r3, [r2, #20]
	unsigned char firstMsg = (addres | (1 << 7));
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	b25b      	sxtb	r3, r3
 8001368:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800136c:	b25b      	sxtb	r3, r3
 800136e:	73fb      	strb	r3, [r7, #15]
	unsigned char ret;
	sendOneByteToGyroscope(firstMsg);	//������ ����� ������ � ����� � �������� ����� ������
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff ffc8 	bl	8001308 <sendOneByteToGyroscope>
	ret = sendOneByteToGyroscope(0x00);	//��������� �����-�� �����, ����� �������� �������� ��������
 8001378:	2000      	movs	r0, #0
 800137a:	f7ff ffc5 	bl	8001308 <sendOneByteToGyroscope>
 800137e:	4603      	mov	r3, r0
 8001380:	73bb      	strb	r3, [r7, #14]
	GPIOE->ODR |= (1 << 3);//������� ��� ��������
 8001382:	4b05      	ldr	r3, [pc, #20]	; (8001398 <readGyroscopeRegister+0x48>)
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	4a04      	ldr	r2, [pc, #16]	; (8001398 <readGyroscopeRegister+0x48>)
 8001388:	f043 0308 	orr.w	r3, r3, #8
 800138c:	6153      	str	r3, [r2, #20]

	return ret;
 800138e:	7bbb      	ldrb	r3, [r7, #14]
}
 8001390:	4618      	mov	r0, r3
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	48001000 	.word	0x48001000

0800139c <writeGyroscopeRegister>:

void writeGyroscopeRegister(int addres, unsigned char value)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	70fb      	strb	r3, [r7, #3]
	GPIOE->ODR &= ~(1 << 3);//�������� ��� ��������
 80013a8:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <writeGyroscopeRegister+0x40>)
 80013aa:	695b      	ldr	r3, [r3, #20]
 80013ac:	4a0b      	ldr	r2, [pc, #44]	; (80013dc <writeGyroscopeRegister+0x40>)
 80013ae:	f023 0308 	bic.w	r3, r3, #8
 80013b2:	6153      	str	r3, [r2, #20]
	sendOneByteToGyroscope(addres);	//������ ����� ������ � ����� � �������� ����� ������
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff ffa5 	bl	8001308 <sendOneByteToGyroscope>
	sendOneByteToGyroscope(value);	//��������� �����-�� �����, ����� �������� �������� ��������
 80013be:	78fb      	ldrb	r3, [r7, #3]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ffa1 	bl	8001308 <sendOneByteToGyroscope>
	GPIOE->ODR |= (1 << 3);//������� ��� ��������
 80013c6:	4b05      	ldr	r3, [pc, #20]	; (80013dc <writeGyroscopeRegister+0x40>)
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	4a04      	ldr	r2, [pc, #16]	; (80013dc <writeGyroscopeRegister+0x40>)
 80013cc:	f043 0308 	orr.w	r3, r3, #8
 80013d0:	6153      	str	r3, [r2, #20]
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	48001000 	.word	0x48001000

080013e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e6:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <HAL_MspInit+0x44>)
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	4a0e      	ldr	r2, [pc, #56]	; (8001424 <HAL_MspInit+0x44>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6193      	str	r3, [r2, #24]
 80013f2:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <HAL_MspInit+0x44>)
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <HAL_MspInit+0x44>)
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	4a08      	ldr	r2, [pc, #32]	; (8001424 <HAL_MspInit+0x44>)
 8001404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001408:	61d3      	str	r3, [r2, #28]
 800140a:	4b06      	ldr	r3, [pc, #24]	; (8001424 <HAL_MspInit+0x44>)
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001412:	603b      	str	r3, [r7, #0]
 8001414:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000

08001428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800142c:	e7fe      	b.n	800142c <NMI_Handler+0x4>

0800142e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001432:	e7fe      	b.n	8001432 <HardFault_Handler+0x4>

08001434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <MemManage_Handler+0x4>

0800143a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800143e:	e7fe      	b.n	800143e <BusFault_Handler+0x4>

08001440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001444:	e7fe      	b.n	8001444 <UsageFault_Handler+0x4>

08001446 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001474:	f000 f884 	bl	8001580 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}

0800147c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <SystemInit+0x20>)
 8001482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001486:	4a05      	ldr	r2, [pc, #20]	; (800149c <SystemInit+0x20>)
 8001488:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800148c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014d8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014a4:	480d      	ldr	r0, [pc, #52]	; (80014dc <LoopForever+0x6>)
  ldr r1, =_edata
 80014a6:	490e      	ldr	r1, [pc, #56]	; (80014e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014a8:	4a0e      	ldr	r2, [pc, #56]	; (80014e4 <LoopForever+0xe>)
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014ac:	e002      	b.n	80014b4 <LoopCopyDataInit>

080014ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014b2:	3304      	adds	r3, #4

080014b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b8:	d3f9      	bcc.n	80014ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ba:	4a0b      	ldr	r2, [pc, #44]	; (80014e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014bc:	4c0b      	ldr	r4, [pc, #44]	; (80014ec <LoopForever+0x16>)
  movs r3, #0
 80014be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c0:	e001      	b.n	80014c6 <LoopFillZerobss>

080014c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c4:	3204      	adds	r2, #4

080014c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c8:	d3fb      	bcc.n	80014c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014ca:	f7ff ffd7 	bl	800147c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014ce:	f001 fa4b 	bl	8002968 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014d2:	f7ff fcb7 	bl	8000e44 <main>

080014d6 <LoopForever>:

LoopForever:
    b LoopForever
 80014d6:	e7fe      	b.n	80014d6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014d8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80014dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014e4:	08002f78 	.word	0x08002f78
  ldr r2, =_sbss
 80014e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80014ec:	2000002c 	.word	0x2000002c

080014f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014f0:	e7fe      	b.n	80014f0 <ADC1_2_IRQHandler>
	...

080014f4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014f8:	4b08      	ldr	r3, [pc, #32]	; (800151c <HAL_Init+0x28>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a07      	ldr	r2, [pc, #28]	; (800151c <HAL_Init+0x28>)
 80014fe:	f043 0310 	orr.w	r3, r3, #16
 8001502:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001504:	2003      	movs	r0, #3
 8001506:	f000 f90d 	bl	8001724 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800150a:	2000      	movs	r0, #0
 800150c:	f000 f808 	bl	8001520 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001510:	f7ff ff66 	bl	80013e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40022000 	.word	0x40022000

08001520 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001528:	4b12      	ldr	r3, [pc, #72]	; (8001574 <HAL_InitTick+0x54>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <HAL_InitTick+0x58>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	4619      	mov	r1, r3
 8001532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001536:	fbb3 f3f1 	udiv	r3, r3, r1
 800153a:	fbb2 f3f3 	udiv	r3, r2, r3
 800153e:	4618      	mov	r0, r3
 8001540:	f000 f917 	bl	8001772 <HAL_SYSTICK_Config>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e00e      	b.n	800156c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b0f      	cmp	r3, #15
 8001552:	d80a      	bhi.n	800156a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001554:	2200      	movs	r2, #0
 8001556:	6879      	ldr	r1, [r7, #4]
 8001558:	f04f 30ff 	mov.w	r0, #4294967295
 800155c:	f000 f8ed 	bl	800173a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001560:	4a06      	ldr	r2, [pc, #24]	; (800157c <HAL_InitTick+0x5c>)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001566:	2300      	movs	r3, #0
 8001568:	e000      	b.n	800156c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
}
 800156c:	4618      	mov	r0, r3
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20000000 	.word	0x20000000
 8001578:	20000008 	.word	0x20000008
 800157c:	20000004 	.word	0x20000004

08001580 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <HAL_IncTick+0x20>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	461a      	mov	r2, r3
 800158a:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_IncTick+0x24>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4413      	add	r3, r2
 8001590:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <HAL_IncTick+0x24>)
 8001592:	6013      	str	r3, [r2, #0]
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	20000008 	.word	0x20000008
 80015a4:	20000028 	.word	0x20000028

080015a8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return uwTick;  
 80015ac:	4b03      	ldr	r3, [pc, #12]	; (80015bc <HAL_GetTick+0x14>)
 80015ae:	681b      	ldr	r3, [r3, #0]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	20000028 	.word	0x20000028

080015c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <__NVIC_SetPriorityGrouping+0x44>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015dc:	4013      	ands	r3, r2
 80015de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015f2:	4a04      	ldr	r2, [pc, #16]	; (8001604 <__NVIC_SetPriorityGrouping+0x44>)
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	60d3      	str	r3, [r2, #12]
}
 80015f8:	bf00      	nop
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800160c:	4b04      	ldr	r3, [pc, #16]	; (8001620 <__NVIC_GetPriorityGrouping+0x18>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	0a1b      	lsrs	r3, r3, #8
 8001612:	f003 0307 	and.w	r3, r3, #7
}
 8001616:	4618      	mov	r0, r3
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	6039      	str	r1, [r7, #0]
 800162e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001634:	2b00      	cmp	r3, #0
 8001636:	db0a      	blt.n	800164e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	b2da      	uxtb	r2, r3
 800163c:	490c      	ldr	r1, [pc, #48]	; (8001670 <__NVIC_SetPriority+0x4c>)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	0112      	lsls	r2, r2, #4
 8001644:	b2d2      	uxtb	r2, r2
 8001646:	440b      	add	r3, r1
 8001648:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800164c:	e00a      	b.n	8001664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	b2da      	uxtb	r2, r3
 8001652:	4908      	ldr	r1, [pc, #32]	; (8001674 <__NVIC_SetPriority+0x50>)
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	3b04      	subs	r3, #4
 800165c:	0112      	lsls	r2, r2, #4
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	440b      	add	r3, r1
 8001662:	761a      	strb	r2, [r3, #24]
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000e100 	.word	0xe000e100
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001678:	b480      	push	{r7}
 800167a:	b089      	sub	sp, #36	; 0x24
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f1c3 0307 	rsb	r3, r3, #7
 8001692:	2b04      	cmp	r3, #4
 8001694:	bf28      	it	cs
 8001696:	2304      	movcs	r3, #4
 8001698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3304      	adds	r3, #4
 800169e:	2b06      	cmp	r3, #6
 80016a0:	d902      	bls.n	80016a8 <NVIC_EncodePriority+0x30>
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3b03      	subs	r3, #3
 80016a6:	e000      	b.n	80016aa <NVIC_EncodePriority+0x32>
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ac:	f04f 32ff 	mov.w	r2, #4294967295
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43da      	mvns	r2, r3
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	401a      	ands	r2, r3
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c0:	f04f 31ff 	mov.w	r1, #4294967295
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ca:	43d9      	mvns	r1, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d0:	4313      	orrs	r3, r2
         );
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3724      	adds	r7, #36	; 0x24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
	...

080016e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016f0:	d301      	bcc.n	80016f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f2:	2301      	movs	r3, #1
 80016f4:	e00f      	b.n	8001716 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016f6:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <SysTick_Config+0x40>)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016fe:	210f      	movs	r1, #15
 8001700:	f04f 30ff 	mov.w	r0, #4294967295
 8001704:	f7ff ff8e 	bl	8001624 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <SysTick_Config+0x40>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800170e:	4b04      	ldr	r3, [pc, #16]	; (8001720 <SysTick_Config+0x40>)
 8001710:	2207      	movs	r2, #7
 8001712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	e000e010 	.word	0xe000e010

08001724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff ff47 	bl	80015c0 <__NVIC_SetPriorityGrouping>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b086      	sub	sp, #24
 800173e:	af00      	add	r7, sp, #0
 8001740:	4603      	mov	r3, r0
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
 8001746:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800174c:	f7ff ff5c 	bl	8001608 <__NVIC_GetPriorityGrouping>
 8001750:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	68b9      	ldr	r1, [r7, #8]
 8001756:	6978      	ldr	r0, [r7, #20]
 8001758:	f7ff ff8e 	bl	8001678 <NVIC_EncodePriority>
 800175c:	4602      	mov	r2, r0
 800175e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff5d 	bl	8001624 <__NVIC_SetPriority>
}
 800176a:	bf00      	nop
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff ffb0 	bl	80016e0 <SysTick_Config>
 8001780:	4603      	mov	r3, r0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
	...

0800178c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001792:	af00      	add	r7, sp, #0
 8001794:	1d3b      	adds	r3, r7, #4
 8001796:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001798:	1d3b      	adds	r3, r7, #4
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d102      	bne.n	80017a6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	f000 bef4 	b.w	800258e <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f000 816a 	beq.w	8001a8a <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80017b6:	4bb3      	ldr	r3, [pc, #716]	; (8001a84 <HAL_RCC_OscConfig+0x2f8>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f003 030c 	and.w	r3, r3, #12
 80017be:	2b04      	cmp	r3, #4
 80017c0:	d00c      	beq.n	80017dc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017c2:	4bb0      	ldr	r3, [pc, #704]	; (8001a84 <HAL_RCC_OscConfig+0x2f8>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f003 030c 	and.w	r3, r3, #12
 80017ca:	2b08      	cmp	r3, #8
 80017cc:	d159      	bne.n	8001882 <HAL_RCC_OscConfig+0xf6>
 80017ce:	4bad      	ldr	r3, [pc, #692]	; (8001a84 <HAL_RCC_OscConfig+0x2f8>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017da:	d152      	bne.n	8001882 <HAL_RCC_OscConfig+0xf6>
 80017dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017e0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80017e8:	fa93 f3a3 	rbit	r3, r3
 80017ec:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80017f0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f4:	fab3 f383 	clz	r3, r3
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	095b      	lsrs	r3, r3, #5
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	b2db      	uxtb	r3, r3
 8001804:	2b01      	cmp	r3, #1
 8001806:	d102      	bne.n	800180e <HAL_RCC_OscConfig+0x82>
 8001808:	4b9e      	ldr	r3, [pc, #632]	; (8001a84 <HAL_RCC_OscConfig+0x2f8>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	e015      	b.n	800183a <HAL_RCC_OscConfig+0xae>
 800180e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001812:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001816:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800181a:	fa93 f3a3 	rbit	r3, r3
 800181e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001822:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001826:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800182a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800182e:	fa93 f3a3 	rbit	r3, r3
 8001832:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001836:	4b93      	ldr	r3, [pc, #588]	; (8001a84 <HAL_RCC_OscConfig+0x2f8>)
 8001838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800183e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001842:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001846:	fa92 f2a2 	rbit	r2, r2
 800184a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 800184e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001852:	fab2 f282 	clz	r2, r2
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	f042 0220 	orr.w	r2, r2, #32
 800185c:	b2d2      	uxtb	r2, r2
 800185e:	f002 021f 	and.w	r2, r2, #31
 8001862:	2101      	movs	r1, #1
 8001864:	fa01 f202 	lsl.w	r2, r1, r2
 8001868:	4013      	ands	r3, r2
 800186a:	2b00      	cmp	r3, #0
 800186c:	f000 810c 	beq.w	8001a88 <HAL_RCC_OscConfig+0x2fc>
 8001870:	1d3b      	adds	r3, r7, #4
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	f040 8106 	bne.w	8001a88 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	f000 be86 	b.w	800258e <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001882:	1d3b      	adds	r3, r7, #4
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800188c:	d106      	bne.n	800189c <HAL_RCC_OscConfig+0x110>
 800188e:	4b7d      	ldr	r3, [pc, #500]	; (8001a84 <HAL_RCC_OscConfig+0x2f8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a7c      	ldr	r2, [pc, #496]	; (8001a84 <HAL_RCC_OscConfig+0x2f8>)
 8001894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	e030      	b.n	80018fe <HAL_RCC_OscConfig+0x172>
 800189c:	1d3b      	adds	r3, r7, #4
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10c      	bne.n	80018c0 <HAL_RCC_OscConfig+0x134>
 80018a6:	4b77      	ldr	r3, [pc, #476]	; (8001a84 <HAL_RCC_OscConfig+0x2f8>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a76      	ldr	r2, [pc, #472]	; (8001a84 <HAL_RCC_OscConfig+0x2f8>)
 80018ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	4b74      	ldr	r3, [pc, #464]	; (8001a84 <HAL_RCC_OscConfig+0x2f8>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a73      	ldr	r2, [pc, #460]	; (8001a84 <HAL_RCC_OscConfig+0x2f8>)
 80018b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	e01e      	b.n	80018fe <HAL_RCC_OscConfig+0x172>
 80018c0:	1d3b      	adds	r3, r7, #4
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018ca:	d10c      	bne.n	80018e6 <HAL_RCC_OscConfig+0x15a>
 80018cc:	4b6d      	ldr	r3, [pc, #436]	; (8001a84 <HAL_RCC_OscConfig+0x2f8>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a6c      	ldr	r2, [pc, #432]	; (8001a84 <HAL_RCC_OscConfig+0x2f8>)
 80018d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	4b6a      	ldr	r3, [pc, #424]	; (8001a84 <HAL_RCC_OscConfig+0x2f8>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a69      	ldr	r2, [pc, #420]	; (8001a84 <HAL_RCC_OscConfig+0x2f8>)
 80018de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e2:	6013      	str	r3, [r2, #0]
 80018e4:	e00b      	b.n	80018fe <HAL_RCC_OscConfig+0x172>
 80018e6:	4b67      	ldr	r3, [pc, #412]	; (8001a84 <HAL_RCC_OscConfig+0x2f8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a66      	ldr	r2, [pc, #408]	; (8001a84 <HAL_RCC_OscConfig+0x2f8>)
 80018ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018f0:	6013      	str	r3, [r2, #0]
 80018f2:	4b64      	ldr	r3, [pc, #400]	; (8001a84 <HAL_RCC_OscConfig+0x2f8>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a63      	ldr	r2, [pc, #396]	; (8001a84 <HAL_RCC_OscConfig+0x2f8>)
 80018f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018fc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018fe:	4b61      	ldr	r3, [pc, #388]	; (8001a84 <HAL_RCC_OscConfig+0x2f8>)
 8001900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001902:	f023 020f 	bic.w	r2, r3, #15
 8001906:	1d3b      	adds	r3, r7, #4
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	495d      	ldr	r1, [pc, #372]	; (8001a84 <HAL_RCC_OscConfig+0x2f8>)
 800190e:	4313      	orrs	r3, r2
 8001910:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d059      	beq.n	80019d0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191c:	f7ff fe44 	bl	80015a8 <HAL_GetTick>
 8001920:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001924:	e00a      	b.n	800193c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001926:	f7ff fe3f 	bl	80015a8 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b64      	cmp	r3, #100	; 0x64
 8001934:	d902      	bls.n	800193c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	f000 be29 	b.w	800258e <HAL_RCC_OscConfig+0xe02>
 800193c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001940:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001944:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001948:	fa93 f3a3 	rbit	r3, r3
 800194c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001950:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001954:	fab3 f383 	clz	r3, r3
 8001958:	b2db      	uxtb	r3, r3
 800195a:	095b      	lsrs	r3, r3, #5
 800195c:	b2db      	uxtb	r3, r3
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b01      	cmp	r3, #1
 8001966:	d102      	bne.n	800196e <HAL_RCC_OscConfig+0x1e2>
 8001968:	4b46      	ldr	r3, [pc, #280]	; (8001a84 <HAL_RCC_OscConfig+0x2f8>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	e015      	b.n	800199a <HAL_RCC_OscConfig+0x20e>
 800196e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001972:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001976:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800197a:	fa93 f3a3 	rbit	r3, r3
 800197e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001982:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001986:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800198a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800198e:	fa93 f3a3 	rbit	r3, r3
 8001992:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001996:	4b3b      	ldr	r3, [pc, #236]	; (8001a84 <HAL_RCC_OscConfig+0x2f8>)
 8001998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800199e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80019a2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80019a6:	fa92 f2a2 	rbit	r2, r2
 80019aa:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80019ae:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80019b2:	fab2 f282 	clz	r2, r2
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	f042 0220 	orr.w	r2, r2, #32
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	f002 021f 	and.w	r2, r2, #31
 80019c2:	2101      	movs	r1, #1
 80019c4:	fa01 f202 	lsl.w	r2, r1, r2
 80019c8:	4013      	ands	r3, r2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d0ab      	beq.n	8001926 <HAL_RCC_OscConfig+0x19a>
 80019ce:	e05c      	b.n	8001a8a <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d0:	f7ff fdea 	bl	80015a8 <HAL_GetTick>
 80019d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019d8:	e00a      	b.n	80019f0 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019da:	f7ff fde5 	bl	80015a8 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b64      	cmp	r3, #100	; 0x64
 80019e8:	d902      	bls.n	80019f0 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	f000 bdcf 	b.w	800258e <HAL_RCC_OscConfig+0xe02>
 80019f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019f4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80019fc:	fa93 f3a3 	rbit	r3, r3
 8001a00:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001a04:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a08:	fab3 f383 	clz	r3, r3
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	095b      	lsrs	r3, r3, #5
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d102      	bne.n	8001a22 <HAL_RCC_OscConfig+0x296>
 8001a1c:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <HAL_RCC_OscConfig+0x2f8>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	e015      	b.n	8001a4e <HAL_RCC_OscConfig+0x2c2>
 8001a22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a26:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001a2e:	fa93 f3a3 	rbit	r3, r3
 8001a32:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001a36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a3a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001a3e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001a42:	fa93 f3a3 	rbit	r3, r3
 8001a46:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <HAL_RCC_OscConfig+0x2f8>)
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a52:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001a56:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001a5a:	fa92 f2a2 	rbit	r2, r2
 8001a5e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001a62:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001a66:	fab2 f282 	clz	r2, r2
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	f042 0220 	orr.w	r2, r2, #32
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	f002 021f 	and.w	r2, r2, #31
 8001a76:	2101      	movs	r1, #1
 8001a78:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1ab      	bne.n	80019da <HAL_RCC_OscConfig+0x24e>
 8001a82:	e002      	b.n	8001a8a <HAL_RCC_OscConfig+0x2fe>
 8001a84:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 816f 	beq.w	8001d78 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a9a:	4bd0      	ldr	r3, [pc, #832]	; (8001ddc <HAL_RCC_OscConfig+0x650>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f003 030c 	and.w	r3, r3, #12
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d00b      	beq.n	8001abe <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001aa6:	4bcd      	ldr	r3, [pc, #820]	; (8001ddc <HAL_RCC_OscConfig+0x650>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f003 030c 	and.w	r3, r3, #12
 8001aae:	2b08      	cmp	r3, #8
 8001ab0:	d16c      	bne.n	8001b8c <HAL_RCC_OscConfig+0x400>
 8001ab2:	4bca      	ldr	r3, [pc, #808]	; (8001ddc <HAL_RCC_OscConfig+0x650>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d166      	bne.n	8001b8c <HAL_RCC_OscConfig+0x400>
 8001abe:	2302      	movs	r3, #2
 8001ac0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001ac8:	fa93 f3a3 	rbit	r3, r3
 8001acc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001ad0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ad4:	fab3 f383 	clz	r3, r3
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	095b      	lsrs	r3, r3, #5
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	f043 0301 	orr.w	r3, r3, #1
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d102      	bne.n	8001aee <HAL_RCC_OscConfig+0x362>
 8001ae8:	4bbc      	ldr	r3, [pc, #752]	; (8001ddc <HAL_RCC_OscConfig+0x650>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	e013      	b.n	8001b16 <HAL_RCC_OscConfig+0x38a>
 8001aee:	2302      	movs	r3, #2
 8001af0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001af8:	fa93 f3a3 	rbit	r3, r3
 8001afc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001b00:	2302      	movs	r3, #2
 8001b02:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001b06:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001b0a:	fa93 f3a3 	rbit	r3, r3
 8001b0e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001b12:	4bb2      	ldr	r3, [pc, #712]	; (8001ddc <HAL_RCC_OscConfig+0x650>)
 8001b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b16:	2202      	movs	r2, #2
 8001b18:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001b1c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001b20:	fa92 f2a2 	rbit	r2, r2
 8001b24:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001b28:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001b2c:	fab2 f282 	clz	r2, r2
 8001b30:	b2d2      	uxtb	r2, r2
 8001b32:	f042 0220 	orr.w	r2, r2, #32
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	f002 021f 	and.w	r2, r2, #31
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b42:	4013      	ands	r3, r2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d007      	beq.n	8001b58 <HAL_RCC_OscConfig+0x3cc>
 8001b48:	1d3b      	adds	r3, r7, #4
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d002      	beq.n	8001b58 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	f000 bd1b 	b.w	800258e <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b58:	4ba0      	ldr	r3, [pc, #640]	; (8001ddc <HAL_RCC_OscConfig+0x650>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b60:	1d3b      	adds	r3, r7, #4
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	21f8      	movs	r1, #248	; 0xf8
 8001b68:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001b70:	fa91 f1a1 	rbit	r1, r1
 8001b74:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001b78:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001b7c:	fab1 f181 	clz	r1, r1
 8001b80:	b2c9      	uxtb	r1, r1
 8001b82:	408b      	lsls	r3, r1
 8001b84:	4995      	ldr	r1, [pc, #596]	; (8001ddc <HAL_RCC_OscConfig+0x650>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b8a:	e0f5      	b.n	8001d78 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f000 8085 	beq.w	8001ca2 <HAL_RCC_OscConfig+0x516>
 8001b98:	2301      	movs	r3, #1
 8001b9a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001ba2:	fa93 f3a3 	rbit	r3, r3
 8001ba6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001baa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bae:	fab3 f383 	clz	r3, r3
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bb8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc4:	f7ff fcf0 	bl	80015a8 <HAL_GetTick>
 8001bc8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bcc:	e00a      	b.n	8001be4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bce:	f7ff fceb 	bl	80015a8 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d902      	bls.n	8001be4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	f000 bcd5 	b.w	800258e <HAL_RCC_OscConfig+0xe02>
 8001be4:	2302      	movs	r3, #2
 8001be6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bea:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001bee:	fa93 f3a3 	rbit	r3, r3
 8001bf2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001bf6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bfa:	fab3 f383 	clz	r3, r3
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	095b      	lsrs	r3, r3, #5
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d102      	bne.n	8001c14 <HAL_RCC_OscConfig+0x488>
 8001c0e:	4b73      	ldr	r3, [pc, #460]	; (8001ddc <HAL_RCC_OscConfig+0x650>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	e013      	b.n	8001c3c <HAL_RCC_OscConfig+0x4b0>
 8001c14:	2302      	movs	r3, #2
 8001c16:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001c1e:	fa93 f3a3 	rbit	r3, r3
 8001c22:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001c26:	2302      	movs	r3, #2
 8001c28:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001c2c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001c30:	fa93 f3a3 	rbit	r3, r3
 8001c34:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001c38:	4b68      	ldr	r3, [pc, #416]	; (8001ddc <HAL_RCC_OscConfig+0x650>)
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001c42:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001c46:	fa92 f2a2 	rbit	r2, r2
 8001c4a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001c4e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001c52:	fab2 f282 	clz	r2, r2
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	f042 0220 	orr.w	r2, r2, #32
 8001c5c:	b2d2      	uxtb	r2, r2
 8001c5e:	f002 021f 	and.w	r2, r2, #31
 8001c62:	2101      	movs	r1, #1
 8001c64:	fa01 f202 	lsl.w	r2, r1, r2
 8001c68:	4013      	ands	r3, r2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0af      	beq.n	8001bce <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c6e:	4b5b      	ldr	r3, [pc, #364]	; (8001ddc <HAL_RCC_OscConfig+0x650>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c76:	1d3b      	adds	r3, r7, #4
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	695b      	ldr	r3, [r3, #20]
 8001c7c:	21f8      	movs	r1, #248	; 0xf8
 8001c7e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c82:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001c86:	fa91 f1a1 	rbit	r1, r1
 8001c8a:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001c8e:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001c92:	fab1 f181 	clz	r1, r1
 8001c96:	b2c9      	uxtb	r1, r1
 8001c98:	408b      	lsls	r3, r1
 8001c9a:	4950      	ldr	r1, [pc, #320]	; (8001ddc <HAL_RCC_OscConfig+0x650>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	600b      	str	r3, [r1, #0]
 8001ca0:	e06a      	b.n	8001d78 <HAL_RCC_OscConfig+0x5ec>
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001cac:	fa93 f3a3 	rbit	r3, r3
 8001cb0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001cb4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cb8:	fab3 f383 	clz	r3, r3
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cc2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	461a      	mov	r2, r3
 8001cca:	2300      	movs	r3, #0
 8001ccc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cce:	f7ff fc6b 	bl	80015a8 <HAL_GetTick>
 8001cd2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd6:	e00a      	b.n	8001cee <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cd8:	f7ff fc66 	bl	80015a8 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d902      	bls.n	8001cee <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	f000 bc50 	b.w	800258e <HAL_RCC_OscConfig+0xe02>
 8001cee:	2302      	movs	r3, #2
 8001cf0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001cf8:	fa93 f3a3 	rbit	r3, r3
 8001cfc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001d00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d04:	fab3 f383 	clz	r3, r3
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	095b      	lsrs	r3, r3, #5
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d102      	bne.n	8001d1e <HAL_RCC_OscConfig+0x592>
 8001d18:	4b30      	ldr	r3, [pc, #192]	; (8001ddc <HAL_RCC_OscConfig+0x650>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	e013      	b.n	8001d46 <HAL_RCC_OscConfig+0x5ba>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001d28:	fa93 f3a3 	rbit	r3, r3
 8001d2c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001d30:	2302      	movs	r3, #2
 8001d32:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001d36:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001d3a:	fa93 f3a3 	rbit	r3, r3
 8001d3e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001d42:	4b26      	ldr	r3, [pc, #152]	; (8001ddc <HAL_RCC_OscConfig+0x650>)
 8001d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d46:	2202      	movs	r2, #2
 8001d48:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001d4c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001d50:	fa92 f2a2 	rbit	r2, r2
 8001d54:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001d58:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001d5c:	fab2 f282 	clz	r2, r2
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	f042 0220 	orr.w	r2, r2, #32
 8001d66:	b2d2      	uxtb	r2, r2
 8001d68:	f002 021f 	and.w	r2, r2, #31
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1af      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d78:	1d3b      	adds	r3, r7, #4
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f000 80da 	beq.w	8001f3c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d88:	1d3b      	adds	r3, r7, #4
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d069      	beq.n	8001e66 <HAL_RCC_OscConfig+0x6da>
 8001d92:	2301      	movs	r3, #1
 8001d94:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d98:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001d9c:	fa93 f3a3 	rbit	r3, r3
 8001da0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001da4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001da8:	fab3 f383 	clz	r3, r3
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	461a      	mov	r2, r3
 8001db0:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <HAL_RCC_OscConfig+0x654>)
 8001db2:	4413      	add	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	461a      	mov	r2, r3
 8001db8:	2301      	movs	r3, #1
 8001dba:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dbc:	f7ff fbf4 	bl	80015a8 <HAL_GetTick>
 8001dc0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dc4:	e00e      	b.n	8001de4 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dc6:	f7ff fbef 	bl	80015a8 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d906      	bls.n	8001de4 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e3d9      	b.n	800258e <HAL_RCC_OscConfig+0xe02>
 8001dda:	bf00      	nop
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	10908120 	.word	0x10908120
 8001de4:	2302      	movs	r3, #2
 8001de6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001dee:	fa93 f3a3 	rbit	r3, r3
 8001df2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001df6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	fa93 f2a3 	rbit	r2, r3
 8001e08:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001e12:	2202      	movs	r2, #2
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	fa93 f2a3 	rbit	r2, r3
 8001e20:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001e24:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e26:	4ba5      	ldr	r3, [pc, #660]	; (80020bc <HAL_RCC_OscConfig+0x930>)
 8001e28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e2a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001e2e:	2102      	movs	r1, #2
 8001e30:	6019      	str	r1, [r3, #0]
 8001e32:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	fa93 f1a3 	rbit	r1, r3
 8001e3c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001e40:	6019      	str	r1, [r3, #0]
  return result;
 8001e42:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	fab3 f383 	clz	r3, r3
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	f003 031f 	and.w	r3, r3, #31
 8001e58:	2101      	movs	r1, #1
 8001e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5e:	4013      	ands	r3, r2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d0b0      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x63a>
 8001e64:	e06a      	b.n	8001f3c <HAL_RCC_OscConfig+0x7b0>
 8001e66:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	fa93 f2a3 	rbit	r2, r3
 8001e78:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e7c:	601a      	str	r2, [r3, #0]
  return result;
 8001e7e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e82:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e84:	fab3 f383 	clz	r3, r3
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	4b8c      	ldr	r3, [pc, #560]	; (80020c0 <HAL_RCC_OscConfig+0x934>)
 8001e8e:	4413      	add	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	461a      	mov	r2, r3
 8001e94:	2300      	movs	r3, #0
 8001e96:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e98:	f7ff fb86 	bl	80015a8 <HAL_GetTick>
 8001e9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea0:	e009      	b.n	8001eb6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ea2:	f7ff fb81 	bl	80015a8 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e36b      	b.n	800258e <HAL_RCC_OscConfig+0xe02>
 8001eb6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001eba:	2202      	movs	r2, #2
 8001ebc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebe:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	fa93 f2a3 	rbit	r2, r3
 8001ec8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	fa93 f2a3 	rbit	r2, r3
 8001ee0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001eea:	2202      	movs	r2, #2
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	fa93 f2a3 	rbit	r2, r3
 8001ef8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001efc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001efe:	4b6f      	ldr	r3, [pc, #444]	; (80020bc <HAL_RCC_OscConfig+0x930>)
 8001f00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f02:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f06:	2102      	movs	r1, #2
 8001f08:	6019      	str	r1, [r3, #0]
 8001f0a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	fa93 f1a3 	rbit	r1, r3
 8001f14:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001f18:	6019      	str	r1, [r3, #0]
  return result;
 8001f1a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	fab3 f383 	clz	r3, r3
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	f003 031f 	and.w	r3, r3, #31
 8001f30:	2101      	movs	r1, #1
 8001f32:	fa01 f303 	lsl.w	r3, r1, r3
 8001f36:	4013      	ands	r3, r2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1b2      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f3c:	1d3b      	adds	r3, r7, #4
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 8158 	beq.w	80021fc <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f52:	4b5a      	ldr	r3, [pc, #360]	; (80020bc <HAL_RCC_OscConfig+0x930>)
 8001f54:	69db      	ldr	r3, [r3, #28]
 8001f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d112      	bne.n	8001f84 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f5e:	4b57      	ldr	r3, [pc, #348]	; (80020bc <HAL_RCC_OscConfig+0x930>)
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	4a56      	ldr	r2, [pc, #344]	; (80020bc <HAL_RCC_OscConfig+0x930>)
 8001f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f68:	61d3      	str	r3, [r2, #28]
 8001f6a:	4b54      	ldr	r3, [pc, #336]	; (80020bc <HAL_RCC_OscConfig+0x930>)
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001f72:	f107 0308 	add.w	r3, r7, #8
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	f107 0308 	add.w	r3, r7, #8
 8001f7c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f84:	4b4f      	ldr	r3, [pc, #316]	; (80020c4 <HAL_RCC_OscConfig+0x938>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d11a      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f90:	4b4c      	ldr	r3, [pc, #304]	; (80020c4 <HAL_RCC_OscConfig+0x938>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a4b      	ldr	r2, [pc, #300]	; (80020c4 <HAL_RCC_OscConfig+0x938>)
 8001f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f9a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f9c:	f7ff fb04 	bl	80015a8 <HAL_GetTick>
 8001fa0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa4:	e009      	b.n	8001fba <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa6:	f7ff faff 	bl	80015a8 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b64      	cmp	r3, #100	; 0x64
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e2e9      	b.n	800258e <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fba:	4b42      	ldr	r3, [pc, #264]	; (80020c4 <HAL_RCC_OscConfig+0x938>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0ef      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc6:	1d3b      	adds	r3, r7, #4
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d106      	bne.n	8001fde <HAL_RCC_OscConfig+0x852>
 8001fd0:	4b3a      	ldr	r3, [pc, #232]	; (80020bc <HAL_RCC_OscConfig+0x930>)
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	4a39      	ldr	r2, [pc, #228]	; (80020bc <HAL_RCC_OscConfig+0x930>)
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	6213      	str	r3, [r2, #32]
 8001fdc:	e02f      	b.n	800203e <HAL_RCC_OscConfig+0x8b2>
 8001fde:	1d3b      	adds	r3, r7, #4
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d10c      	bne.n	8002002 <HAL_RCC_OscConfig+0x876>
 8001fe8:	4b34      	ldr	r3, [pc, #208]	; (80020bc <HAL_RCC_OscConfig+0x930>)
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	4a33      	ldr	r2, [pc, #204]	; (80020bc <HAL_RCC_OscConfig+0x930>)
 8001fee:	f023 0301 	bic.w	r3, r3, #1
 8001ff2:	6213      	str	r3, [r2, #32]
 8001ff4:	4b31      	ldr	r3, [pc, #196]	; (80020bc <HAL_RCC_OscConfig+0x930>)
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	4a30      	ldr	r2, [pc, #192]	; (80020bc <HAL_RCC_OscConfig+0x930>)
 8001ffa:	f023 0304 	bic.w	r3, r3, #4
 8001ffe:	6213      	str	r3, [r2, #32]
 8002000:	e01d      	b.n	800203e <HAL_RCC_OscConfig+0x8b2>
 8002002:	1d3b      	adds	r3, r7, #4
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	2b05      	cmp	r3, #5
 800200a:	d10c      	bne.n	8002026 <HAL_RCC_OscConfig+0x89a>
 800200c:	4b2b      	ldr	r3, [pc, #172]	; (80020bc <HAL_RCC_OscConfig+0x930>)
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	4a2a      	ldr	r2, [pc, #168]	; (80020bc <HAL_RCC_OscConfig+0x930>)
 8002012:	f043 0304 	orr.w	r3, r3, #4
 8002016:	6213      	str	r3, [r2, #32]
 8002018:	4b28      	ldr	r3, [pc, #160]	; (80020bc <HAL_RCC_OscConfig+0x930>)
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	4a27      	ldr	r2, [pc, #156]	; (80020bc <HAL_RCC_OscConfig+0x930>)
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	6213      	str	r3, [r2, #32]
 8002024:	e00b      	b.n	800203e <HAL_RCC_OscConfig+0x8b2>
 8002026:	4b25      	ldr	r3, [pc, #148]	; (80020bc <HAL_RCC_OscConfig+0x930>)
 8002028:	6a1b      	ldr	r3, [r3, #32]
 800202a:	4a24      	ldr	r2, [pc, #144]	; (80020bc <HAL_RCC_OscConfig+0x930>)
 800202c:	f023 0301 	bic.w	r3, r3, #1
 8002030:	6213      	str	r3, [r2, #32]
 8002032:	4b22      	ldr	r3, [pc, #136]	; (80020bc <HAL_RCC_OscConfig+0x930>)
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	4a21      	ldr	r2, [pc, #132]	; (80020bc <HAL_RCC_OscConfig+0x930>)
 8002038:	f023 0304 	bic.w	r3, r3, #4
 800203c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800203e:	1d3b      	adds	r3, r7, #4
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d06b      	beq.n	8002120 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002048:	f7ff faae 	bl	80015a8 <HAL_GetTick>
 800204c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002050:	e00b      	b.n	800206a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002052:	f7ff faa9 	bl	80015a8 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002062:	4293      	cmp	r3, r2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e291      	b.n	800258e <HAL_RCC_OscConfig+0xe02>
 800206a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800206e:	2202      	movs	r2, #2
 8002070:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002072:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	fa93 f2a3 	rbit	r2, r3
 800207c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002086:	2202      	movs	r2, #2
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	fa93 f2a3 	rbit	r2, r3
 8002094:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002098:	601a      	str	r2, [r3, #0]
  return result;
 800209a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800209e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a0:	fab3 f383 	clz	r3, r3
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	095b      	lsrs	r3, r3, #5
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	f043 0302 	orr.w	r3, r3, #2
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d109      	bne.n	80020c8 <HAL_RCC_OscConfig+0x93c>
 80020b4:	4b01      	ldr	r3, [pc, #4]	; (80020bc <HAL_RCC_OscConfig+0x930>)
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	e014      	b.n	80020e4 <HAL_RCC_OscConfig+0x958>
 80020ba:	bf00      	nop
 80020bc:	40021000 	.word	0x40021000
 80020c0:	10908120 	.word	0x10908120
 80020c4:	40007000 	.word	0x40007000
 80020c8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80020cc:	2202      	movs	r2, #2
 80020ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	fa93 f2a3 	rbit	r2, r3
 80020da:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	4bbb      	ldr	r3, [pc, #748]	; (80023d0 <HAL_RCC_OscConfig+0xc44>)
 80020e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80020e8:	2102      	movs	r1, #2
 80020ea:	6011      	str	r1, [r2, #0]
 80020ec:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80020f0:	6812      	ldr	r2, [r2, #0]
 80020f2:	fa92 f1a2 	rbit	r1, r2
 80020f6:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80020fa:	6011      	str	r1, [r2, #0]
  return result;
 80020fc:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002100:	6812      	ldr	r2, [r2, #0]
 8002102:	fab2 f282 	clz	r2, r2
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	f002 021f 	and.w	r2, r2, #31
 8002112:	2101      	movs	r1, #1
 8002114:	fa01 f202 	lsl.w	r2, r1, r2
 8002118:	4013      	ands	r3, r2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d099      	beq.n	8002052 <HAL_RCC_OscConfig+0x8c6>
 800211e:	e063      	b.n	80021e8 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002120:	f7ff fa42 	bl	80015a8 <HAL_GetTick>
 8002124:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002128:	e00b      	b.n	8002142 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800212a:	f7ff fa3d 	bl	80015a8 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	f241 3288 	movw	r2, #5000	; 0x1388
 800213a:	4293      	cmp	r3, r2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e225      	b.n	800258e <HAL_RCC_OscConfig+0xe02>
 8002142:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002146:	2202      	movs	r2, #2
 8002148:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	fa93 f2a3 	rbit	r2, r3
 8002154:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800215e:	2202      	movs	r2, #2
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	fa93 f2a3 	rbit	r2, r3
 800216c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002170:	601a      	str	r2, [r3, #0]
  return result;
 8002172:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002176:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002178:	fab3 f383 	clz	r3, r3
 800217c:	b2db      	uxtb	r3, r3
 800217e:	095b      	lsrs	r3, r3, #5
 8002180:	b2db      	uxtb	r3, r3
 8002182:	f043 0302 	orr.w	r3, r3, #2
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d102      	bne.n	8002192 <HAL_RCC_OscConfig+0xa06>
 800218c:	4b90      	ldr	r3, [pc, #576]	; (80023d0 <HAL_RCC_OscConfig+0xc44>)
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	e00d      	b.n	80021ae <HAL_RCC_OscConfig+0xa22>
 8002192:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002196:	2202      	movs	r2, #2
 8002198:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	fa93 f2a3 	rbit	r2, r3
 80021a4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	4b89      	ldr	r3, [pc, #548]	; (80023d0 <HAL_RCC_OscConfig+0xc44>)
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ae:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80021b2:	2102      	movs	r1, #2
 80021b4:	6011      	str	r1, [r2, #0]
 80021b6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80021ba:	6812      	ldr	r2, [r2, #0]
 80021bc:	fa92 f1a2 	rbit	r1, r2
 80021c0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80021c4:	6011      	str	r1, [r2, #0]
  return result;
 80021c6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80021ca:	6812      	ldr	r2, [r2, #0]
 80021cc:	fab2 f282 	clz	r2, r2
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021d6:	b2d2      	uxtb	r2, r2
 80021d8:	f002 021f 	and.w	r2, r2, #31
 80021dc:	2101      	movs	r1, #1
 80021de:	fa01 f202 	lsl.w	r2, r1, r2
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1a0      	bne.n	800212a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021e8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d105      	bne.n	80021fc <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f0:	4b77      	ldr	r3, [pc, #476]	; (80023d0 <HAL_RCC_OscConfig+0xc44>)
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	4a76      	ldr	r2, [pc, #472]	; (80023d0 <HAL_RCC_OscConfig+0xc44>)
 80021f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021fa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021fc:	1d3b      	adds	r3, r7, #4
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 81c2 	beq.w	800258c <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002208:	4b71      	ldr	r3, [pc, #452]	; (80023d0 <HAL_RCC_OscConfig+0xc44>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 030c 	and.w	r3, r3, #12
 8002210:	2b08      	cmp	r3, #8
 8002212:	f000 819c 	beq.w	800254e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002216:	1d3b      	adds	r3, r7, #4
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	69db      	ldr	r3, [r3, #28]
 800221c:	2b02      	cmp	r3, #2
 800221e:	f040 8114 	bne.w	800244a <HAL_RCC_OscConfig+0xcbe>
 8002222:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002226:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800222a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	fa93 f2a3 	rbit	r2, r3
 8002236:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800223a:	601a      	str	r2, [r3, #0]
  return result;
 800223c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002240:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002242:	fab3 f383 	clz	r3, r3
 8002246:	b2db      	uxtb	r3, r3
 8002248:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800224c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	461a      	mov	r2, r3
 8002254:	2300      	movs	r3, #0
 8002256:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002258:	f7ff f9a6 	bl	80015a8 <HAL_GetTick>
 800225c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002260:	e009      	b.n	8002276 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002262:	f7ff f9a1 	bl	80015a8 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e18b      	b.n	800258e <HAL_RCC_OscConfig+0xe02>
 8002276:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800227a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800227e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002280:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	fa93 f2a3 	rbit	r2, r3
 800228a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800228e:	601a      	str	r2, [r3, #0]
  return result;
 8002290:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002294:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002296:	fab3 f383 	clz	r3, r3
 800229a:	b2db      	uxtb	r3, r3
 800229c:	095b      	lsrs	r3, r3, #5
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d102      	bne.n	80022b0 <HAL_RCC_OscConfig+0xb24>
 80022aa:	4b49      	ldr	r3, [pc, #292]	; (80023d0 <HAL_RCC_OscConfig+0xc44>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	e01b      	b.n	80022e8 <HAL_RCC_OscConfig+0xb5c>
 80022b0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80022b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	fa93 f2a3 	rbit	r2, r3
 80022c4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80022ce:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	fa93 f2a3 	rbit	r2, r3
 80022de:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	4b3a      	ldr	r3, [pc, #232]	; (80023d0 <HAL_RCC_OscConfig+0xc44>)
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80022ec:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022f0:	6011      	str	r1, [r2, #0]
 80022f2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80022f6:	6812      	ldr	r2, [r2, #0]
 80022f8:	fa92 f1a2 	rbit	r1, r2
 80022fc:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002300:	6011      	str	r1, [r2, #0]
  return result;
 8002302:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002306:	6812      	ldr	r2, [r2, #0]
 8002308:	fab2 f282 	clz	r2, r2
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	f042 0220 	orr.w	r2, r2, #32
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	f002 021f 	and.w	r2, r2, #31
 8002318:	2101      	movs	r1, #1
 800231a:	fa01 f202 	lsl.w	r2, r1, r2
 800231e:	4013      	ands	r3, r2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d19e      	bne.n	8002262 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002324:	4b2a      	ldr	r3, [pc, #168]	; (80023d0 <HAL_RCC_OscConfig+0xc44>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800232c:	1d3b      	adds	r3, r7, #4
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002332:	1d3b      	adds	r3, r7, #4
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	430b      	orrs	r3, r1
 800233a:	4925      	ldr	r1, [pc, #148]	; (80023d0 <HAL_RCC_OscConfig+0xc44>)
 800233c:	4313      	orrs	r3, r2
 800233e:	604b      	str	r3, [r1, #4]
 8002340:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002344:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002348:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	fa93 f2a3 	rbit	r2, r3
 8002354:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002358:	601a      	str	r2, [r3, #0]
  return result;
 800235a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800235e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002360:	fab3 f383 	clz	r3, r3
 8002364:	b2db      	uxtb	r3, r3
 8002366:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800236a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	461a      	mov	r2, r3
 8002372:	2301      	movs	r3, #1
 8002374:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002376:	f7ff f917 	bl	80015a8 <HAL_GetTick>
 800237a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800237e:	e009      	b.n	8002394 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002380:	f7ff f912 	bl	80015a8 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e0fc      	b.n	800258e <HAL_RCC_OscConfig+0xe02>
 8002394:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002398:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800239c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	fa93 f2a3 	rbit	r2, r3
 80023a8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80023ac:	601a      	str	r2, [r3, #0]
  return result;
 80023ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80023b2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023b4:	fab3 f383 	clz	r3, r3
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	095b      	lsrs	r3, r3, #5
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d105      	bne.n	80023d4 <HAL_RCC_OscConfig+0xc48>
 80023c8:	4b01      	ldr	r3, [pc, #4]	; (80023d0 <HAL_RCC_OscConfig+0xc44>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	e01e      	b.n	800240c <HAL_RCC_OscConfig+0xc80>
 80023ce:	bf00      	nop
 80023d0:	40021000 	.word	0x40021000
 80023d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	fa93 f2a3 	rbit	r2, r3
 80023e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80023f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	fa93 f2a3 	rbit	r2, r3
 8002402:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	4b63      	ldr	r3, [pc, #396]	; (8002598 <HAL_RCC_OscConfig+0xe0c>)
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002410:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002414:	6011      	str	r1, [r2, #0]
 8002416:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800241a:	6812      	ldr	r2, [r2, #0]
 800241c:	fa92 f1a2 	rbit	r1, r2
 8002420:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002424:	6011      	str	r1, [r2, #0]
  return result;
 8002426:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800242a:	6812      	ldr	r2, [r2, #0]
 800242c:	fab2 f282 	clz	r2, r2
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	f042 0220 	orr.w	r2, r2, #32
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	f002 021f 	and.w	r2, r2, #31
 800243c:	2101      	movs	r1, #1
 800243e:	fa01 f202 	lsl.w	r2, r1, r2
 8002442:	4013      	ands	r3, r2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d09b      	beq.n	8002380 <HAL_RCC_OscConfig+0xbf4>
 8002448:	e0a0      	b.n	800258c <HAL_RCC_OscConfig+0xe00>
 800244a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800244e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002452:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002454:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	fa93 f2a3 	rbit	r2, r3
 800245e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002462:	601a      	str	r2, [r3, #0]
  return result;
 8002464:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002468:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800246a:	fab3 f383 	clz	r3, r3
 800246e:	b2db      	uxtb	r3, r3
 8002470:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002474:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	461a      	mov	r2, r3
 800247c:	2300      	movs	r3, #0
 800247e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002480:	f7ff f892 	bl	80015a8 <HAL_GetTick>
 8002484:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002488:	e009      	b.n	800249e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800248a:	f7ff f88d 	bl	80015a8 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e077      	b.n	800258e <HAL_RCC_OscConfig+0xe02>
 800249e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	fa93 f2a3 	rbit	r2, r3
 80024b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b6:	601a      	str	r2, [r3, #0]
  return result;
 80024b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024be:	fab3 f383 	clz	r3, r3
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	095b      	lsrs	r3, r3, #5
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d102      	bne.n	80024d8 <HAL_RCC_OscConfig+0xd4c>
 80024d2:	4b31      	ldr	r3, [pc, #196]	; (8002598 <HAL_RCC_OscConfig+0xe0c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	e01b      	b.n	8002510 <HAL_RCC_OscConfig+0xd84>
 80024d8:	f107 0320 	add.w	r3, r7, #32
 80024dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e2:	f107 0320 	add.w	r3, r7, #32
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	fa93 f2a3 	rbit	r2, r3
 80024ec:	f107 031c 	add.w	r3, r7, #28
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	f107 0318 	add.w	r3, r7, #24
 80024f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	f107 0318 	add.w	r3, r7, #24
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	fa93 f2a3 	rbit	r2, r3
 8002506:	f107 0314 	add.w	r3, r7, #20
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	4b22      	ldr	r3, [pc, #136]	; (8002598 <HAL_RCC_OscConfig+0xe0c>)
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	f107 0210 	add.w	r2, r7, #16
 8002514:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002518:	6011      	str	r1, [r2, #0]
 800251a:	f107 0210 	add.w	r2, r7, #16
 800251e:	6812      	ldr	r2, [r2, #0]
 8002520:	fa92 f1a2 	rbit	r1, r2
 8002524:	f107 020c 	add.w	r2, r7, #12
 8002528:	6011      	str	r1, [r2, #0]
  return result;
 800252a:	f107 020c 	add.w	r2, r7, #12
 800252e:	6812      	ldr	r2, [r2, #0]
 8002530:	fab2 f282 	clz	r2, r2
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	f042 0220 	orr.w	r2, r2, #32
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	f002 021f 	and.w	r2, r2, #31
 8002540:	2101      	movs	r1, #1
 8002542:	fa01 f202 	lsl.w	r2, r1, r2
 8002546:	4013      	ands	r3, r2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d19e      	bne.n	800248a <HAL_RCC_OscConfig+0xcfe>
 800254c:	e01e      	b.n	800258c <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800254e:	1d3b      	adds	r3, r7, #4
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d101      	bne.n	800255c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e018      	b.n	800258e <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800255c:	4b0e      	ldr	r3, [pc, #56]	; (8002598 <HAL_RCC_OscConfig+0xe0c>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002564:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002568:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800256c:	1d3b      	adds	r3, r7, #4
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	429a      	cmp	r2, r3
 8002574:	d108      	bne.n	8002588 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002576:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800257a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800257e:	1d3b      	adds	r3, r7, #4
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002584:	429a      	cmp	r2, r3
 8002586:	d001      	beq.n	800258c <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e000      	b.n	800258e <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40021000 	.word	0x40021000

0800259c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b09e      	sub	sp, #120	; 0x78
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d101      	bne.n	80025b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e162      	b.n	800287a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025b4:	4b90      	ldr	r3, [pc, #576]	; (80027f8 <HAL_RCC_ClockConfig+0x25c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d910      	bls.n	80025e4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c2:	4b8d      	ldr	r3, [pc, #564]	; (80027f8 <HAL_RCC_ClockConfig+0x25c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f023 0207 	bic.w	r2, r3, #7
 80025ca:	498b      	ldr	r1, [pc, #556]	; (80027f8 <HAL_RCC_ClockConfig+0x25c>)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d2:	4b89      	ldr	r3, [pc, #548]	; (80027f8 <HAL_RCC_ClockConfig+0x25c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0307 	and.w	r3, r3, #7
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d001      	beq.n	80025e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e14a      	b.n	800287a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d008      	beq.n	8002602 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025f0:	4b82      	ldr	r3, [pc, #520]	; (80027fc <HAL_RCC_ClockConfig+0x260>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	497f      	ldr	r1, [pc, #508]	; (80027fc <HAL_RCC_ClockConfig+0x260>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 80dc 	beq.w	80027c8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d13c      	bne.n	8002692 <HAL_RCC_ClockConfig+0xf6>
 8002618:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800261c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002620:	fa93 f3a3 	rbit	r3, r3
 8002624:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002628:	fab3 f383 	clz	r3, r3
 800262c:	b2db      	uxtb	r3, r3
 800262e:	095b      	lsrs	r3, r3, #5
 8002630:	b2db      	uxtb	r3, r3
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b01      	cmp	r3, #1
 800263a:	d102      	bne.n	8002642 <HAL_RCC_ClockConfig+0xa6>
 800263c:	4b6f      	ldr	r3, [pc, #444]	; (80027fc <HAL_RCC_ClockConfig+0x260>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	e00f      	b.n	8002662 <HAL_RCC_ClockConfig+0xc6>
 8002642:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002646:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002648:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800264a:	fa93 f3a3 	rbit	r3, r3
 800264e:	667b      	str	r3, [r7, #100]	; 0x64
 8002650:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002654:	663b      	str	r3, [r7, #96]	; 0x60
 8002656:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002658:	fa93 f3a3 	rbit	r3, r3
 800265c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800265e:	4b67      	ldr	r3, [pc, #412]	; (80027fc <HAL_RCC_ClockConfig+0x260>)
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002666:	65ba      	str	r2, [r7, #88]	; 0x58
 8002668:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800266a:	fa92 f2a2 	rbit	r2, r2
 800266e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002670:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002672:	fab2 f282 	clz	r2, r2
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	f042 0220 	orr.w	r2, r2, #32
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	f002 021f 	and.w	r2, r2, #31
 8002682:	2101      	movs	r1, #1
 8002684:	fa01 f202 	lsl.w	r2, r1, r2
 8002688:	4013      	ands	r3, r2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d17b      	bne.n	8002786 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e0f3      	b.n	800287a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2b02      	cmp	r3, #2
 8002698:	d13c      	bne.n	8002714 <HAL_RCC_ClockConfig+0x178>
 800269a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800269e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026a2:	fa93 f3a3 	rbit	r3, r3
 80026a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80026a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026aa:	fab3 f383 	clz	r3, r3
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	095b      	lsrs	r3, r3, #5
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	f043 0301 	orr.w	r3, r3, #1
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d102      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x128>
 80026be:	4b4f      	ldr	r3, [pc, #316]	; (80027fc <HAL_RCC_ClockConfig+0x260>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	e00f      	b.n	80026e4 <HAL_RCC_ClockConfig+0x148>
 80026c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026cc:	fa93 f3a3 	rbit	r3, r3
 80026d0:	647b      	str	r3, [r7, #68]	; 0x44
 80026d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026d6:	643b      	str	r3, [r7, #64]	; 0x40
 80026d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026e0:	4b46      	ldr	r3, [pc, #280]	; (80027fc <HAL_RCC_ClockConfig+0x260>)
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026e8:	63ba      	str	r2, [r7, #56]	; 0x38
 80026ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026ec:	fa92 f2a2 	rbit	r2, r2
 80026f0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80026f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026f4:	fab2 f282 	clz	r2, r2
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	f042 0220 	orr.w	r2, r2, #32
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	f002 021f 	and.w	r2, r2, #31
 8002704:	2101      	movs	r1, #1
 8002706:	fa01 f202 	lsl.w	r2, r1, r2
 800270a:	4013      	ands	r3, r2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d13a      	bne.n	8002786 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e0b2      	b.n	800287a <HAL_RCC_ClockConfig+0x2de>
 8002714:	2302      	movs	r3, #2
 8002716:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800271a:	fa93 f3a3 	rbit	r3, r3
 800271e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002722:	fab3 f383 	clz	r3, r3
 8002726:	b2db      	uxtb	r3, r3
 8002728:	095b      	lsrs	r3, r3, #5
 800272a:	b2db      	uxtb	r3, r3
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b01      	cmp	r3, #1
 8002734:	d102      	bne.n	800273c <HAL_RCC_ClockConfig+0x1a0>
 8002736:	4b31      	ldr	r3, [pc, #196]	; (80027fc <HAL_RCC_ClockConfig+0x260>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	e00d      	b.n	8002758 <HAL_RCC_ClockConfig+0x1bc>
 800273c:	2302      	movs	r3, #2
 800273e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002742:	fa93 f3a3 	rbit	r3, r3
 8002746:	627b      	str	r3, [r7, #36]	; 0x24
 8002748:	2302      	movs	r3, #2
 800274a:	623b      	str	r3, [r7, #32]
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	fa93 f3a3 	rbit	r3, r3
 8002752:	61fb      	str	r3, [r7, #28]
 8002754:	4b29      	ldr	r3, [pc, #164]	; (80027fc <HAL_RCC_ClockConfig+0x260>)
 8002756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002758:	2202      	movs	r2, #2
 800275a:	61ba      	str	r2, [r7, #24]
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	fa92 f2a2 	rbit	r2, r2
 8002762:	617a      	str	r2, [r7, #20]
  return result;
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	fab2 f282 	clz	r2, r2
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	f042 0220 	orr.w	r2, r2, #32
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	f002 021f 	and.w	r2, r2, #31
 8002776:	2101      	movs	r1, #1
 8002778:	fa01 f202 	lsl.w	r2, r1, r2
 800277c:	4013      	ands	r3, r2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e079      	b.n	800287a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002786:	4b1d      	ldr	r3, [pc, #116]	; (80027fc <HAL_RCC_ClockConfig+0x260>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f023 0203 	bic.w	r2, r3, #3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	491a      	ldr	r1, [pc, #104]	; (80027fc <HAL_RCC_ClockConfig+0x260>)
 8002794:	4313      	orrs	r3, r2
 8002796:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002798:	f7fe ff06 	bl	80015a8 <HAL_GetTick>
 800279c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279e:	e00a      	b.n	80027b6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a0:	f7fe ff02 	bl	80015a8 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e061      	b.n	800287a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b6:	4b11      	ldr	r3, [pc, #68]	; (80027fc <HAL_RCC_ClockConfig+0x260>)
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 020c 	and.w	r2, r3, #12
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d1eb      	bne.n	80027a0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027c8:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <HAL_RCC_ClockConfig+0x25c>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d214      	bcs.n	8002800 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d6:	4b08      	ldr	r3, [pc, #32]	; (80027f8 <HAL_RCC_ClockConfig+0x25c>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f023 0207 	bic.w	r2, r3, #7
 80027de:	4906      	ldr	r1, [pc, #24]	; (80027f8 <HAL_RCC_ClockConfig+0x25c>)
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e6:	4b04      	ldr	r3, [pc, #16]	; (80027f8 <HAL_RCC_ClockConfig+0x25c>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d005      	beq.n	8002800 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e040      	b.n	800287a <HAL_RCC_ClockConfig+0x2de>
 80027f8:	40022000 	.word	0x40022000
 80027fc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b00      	cmp	r3, #0
 800280a:	d008      	beq.n	800281e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800280c:	4b1d      	ldr	r3, [pc, #116]	; (8002884 <HAL_RCC_ClockConfig+0x2e8>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	491a      	ldr	r1, [pc, #104]	; (8002884 <HAL_RCC_ClockConfig+0x2e8>)
 800281a:	4313      	orrs	r3, r2
 800281c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0308 	and.w	r3, r3, #8
 8002826:	2b00      	cmp	r3, #0
 8002828:	d009      	beq.n	800283e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800282a:	4b16      	ldr	r3, [pc, #88]	; (8002884 <HAL_RCC_ClockConfig+0x2e8>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	4912      	ldr	r1, [pc, #72]	; (8002884 <HAL_RCC_ClockConfig+0x2e8>)
 800283a:	4313      	orrs	r3, r2
 800283c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800283e:	f000 f829 	bl	8002894 <HAL_RCC_GetSysClockFreq>
 8002842:	4601      	mov	r1, r0
 8002844:	4b0f      	ldr	r3, [pc, #60]	; (8002884 <HAL_RCC_ClockConfig+0x2e8>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800284c:	22f0      	movs	r2, #240	; 0xf0
 800284e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	fa92 f2a2 	rbit	r2, r2
 8002856:	60fa      	str	r2, [r7, #12]
  return result;
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	fab2 f282 	clz	r2, r2
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	40d3      	lsrs	r3, r2
 8002862:	4a09      	ldr	r2, [pc, #36]	; (8002888 <HAL_RCC_ClockConfig+0x2ec>)
 8002864:	5cd3      	ldrb	r3, [r2, r3]
 8002866:	fa21 f303 	lsr.w	r3, r1, r3
 800286a:	4a08      	ldr	r2, [pc, #32]	; (800288c <HAL_RCC_ClockConfig+0x2f0>)
 800286c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800286e:	4b08      	ldr	r3, [pc, #32]	; (8002890 <HAL_RCC_ClockConfig+0x2f4>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f7fe fe54 	bl	8001520 <HAL_InitTick>
  
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3778      	adds	r7, #120	; 0x78
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40021000 	.word	0x40021000
 8002888:	08002ed0 	.word	0x08002ed0
 800288c:	20000000 	.word	0x20000000
 8002890:	20000004 	.word	0x20000004

08002894 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002894:	b480      	push	{r7}
 8002896:	b08b      	sub	sp, #44	; 0x2c
 8002898:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800289a:	2300      	movs	r3, #0
 800289c:	61fb      	str	r3, [r7, #28]
 800289e:	2300      	movs	r3, #0
 80028a0:	61bb      	str	r3, [r7, #24]
 80028a2:	2300      	movs	r3, #0
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80028ae:	4b29      	ldr	r3, [pc, #164]	; (8002954 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	f003 030c 	and.w	r3, r3, #12
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d002      	beq.n	80028c4 <HAL_RCC_GetSysClockFreq+0x30>
 80028be:	2b08      	cmp	r3, #8
 80028c0:	d003      	beq.n	80028ca <HAL_RCC_GetSysClockFreq+0x36>
 80028c2:	e03c      	b.n	800293e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028c4:	4b24      	ldr	r3, [pc, #144]	; (8002958 <HAL_RCC_GetSysClockFreq+0xc4>)
 80028c6:	623b      	str	r3, [r7, #32]
      break;
 80028c8:	e03c      	b.n	8002944 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80028d0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80028d4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	fa92 f2a2 	rbit	r2, r2
 80028dc:	607a      	str	r2, [r7, #4]
  return result;
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	fab2 f282 	clz	r2, r2
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	40d3      	lsrs	r3, r2
 80028e8:	4a1c      	ldr	r2, [pc, #112]	; (800295c <HAL_RCC_GetSysClockFreq+0xc8>)
 80028ea:	5cd3      	ldrb	r3, [r2, r3]
 80028ec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80028ee:	4b19      	ldr	r3, [pc, #100]	; (8002954 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	220f      	movs	r2, #15
 80028f8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	fa92 f2a2 	rbit	r2, r2
 8002900:	60fa      	str	r2, [r7, #12]
  return result;
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	fab2 f282 	clz	r2, r2
 8002908:	b2d2      	uxtb	r2, r2
 800290a:	40d3      	lsrs	r3, r2
 800290c:	4a14      	ldr	r2, [pc, #80]	; (8002960 <HAL_RCC_GetSysClockFreq+0xcc>)
 800290e:	5cd3      	ldrb	r3, [r2, r3]
 8002910:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d008      	beq.n	800292e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800291c:	4a0e      	ldr	r2, [pc, #56]	; (8002958 <HAL_RCC_GetSysClockFreq+0xc4>)
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	fbb2 f2f3 	udiv	r2, r2, r3
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	fb02 f303 	mul.w	r3, r2, r3
 800292a:	627b      	str	r3, [r7, #36]	; 0x24
 800292c:	e004      	b.n	8002938 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	4a0c      	ldr	r2, [pc, #48]	; (8002964 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002932:	fb02 f303 	mul.w	r3, r2, r3
 8002936:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	623b      	str	r3, [r7, #32]
      break;
 800293c:	e002      	b.n	8002944 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800293e:	4b06      	ldr	r3, [pc, #24]	; (8002958 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002940:	623b      	str	r3, [r7, #32]
      break;
 8002942:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002944:	6a3b      	ldr	r3, [r7, #32]
}
 8002946:	4618      	mov	r0, r3
 8002948:	372c      	adds	r7, #44	; 0x2c
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	40021000 	.word	0x40021000
 8002958:	007a1200 	.word	0x007a1200
 800295c:	08002ee0 	.word	0x08002ee0
 8002960:	08002ef0 	.word	0x08002ef0
 8002964:	003d0900 	.word	0x003d0900

08002968 <__libc_init_array>:
 8002968:	b570      	push	{r4, r5, r6, lr}
 800296a:	4d0d      	ldr	r5, [pc, #52]	; (80029a0 <__libc_init_array+0x38>)
 800296c:	4c0d      	ldr	r4, [pc, #52]	; (80029a4 <__libc_init_array+0x3c>)
 800296e:	1b64      	subs	r4, r4, r5
 8002970:	10a4      	asrs	r4, r4, #2
 8002972:	2600      	movs	r6, #0
 8002974:	42a6      	cmp	r6, r4
 8002976:	d109      	bne.n	800298c <__libc_init_array+0x24>
 8002978:	4d0b      	ldr	r5, [pc, #44]	; (80029a8 <__libc_init_array+0x40>)
 800297a:	4c0c      	ldr	r4, [pc, #48]	; (80029ac <__libc_init_array+0x44>)
 800297c:	f000 fa9a 	bl	8002eb4 <_init>
 8002980:	1b64      	subs	r4, r4, r5
 8002982:	10a4      	asrs	r4, r4, #2
 8002984:	2600      	movs	r6, #0
 8002986:	42a6      	cmp	r6, r4
 8002988:	d105      	bne.n	8002996 <__libc_init_array+0x2e>
 800298a:	bd70      	pop	{r4, r5, r6, pc}
 800298c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002990:	4798      	blx	r3
 8002992:	3601      	adds	r6, #1
 8002994:	e7ee      	b.n	8002974 <__libc_init_array+0xc>
 8002996:	f855 3b04 	ldr.w	r3, [r5], #4
 800299a:	4798      	blx	r3
 800299c:	3601      	adds	r6, #1
 800299e:	e7f2      	b.n	8002986 <__libc_init_array+0x1e>
 80029a0:	08002f70 	.word	0x08002f70
 80029a4:	08002f70 	.word	0x08002f70
 80029a8:	08002f70 	.word	0x08002f70
 80029ac:	08002f74 	.word	0x08002f74

080029b0 <memset>:
 80029b0:	4402      	add	r2, r0
 80029b2:	4603      	mov	r3, r0
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d100      	bne.n	80029ba <memset+0xa>
 80029b8:	4770      	bx	lr
 80029ba:	f803 1b01 	strb.w	r1, [r3], #1
 80029be:	e7f9      	b.n	80029b4 <memset+0x4>

080029c0 <atan2>:
 80029c0:	f000 b802 	b.w	80029c8 <__ieee754_atan2>
 80029c4:	0000      	movs	r0, r0
	...

080029c8 <__ieee754_atan2>:
 80029c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029cc:	ec57 6b11 	vmov	r6, r7, d1
 80029d0:	4273      	negs	r3, r6
 80029d2:	f8df e184 	ldr.w	lr, [pc, #388]	; 8002b58 <__ieee754_atan2+0x190>
 80029d6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80029da:	4333      	orrs	r3, r6
 80029dc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80029e0:	4573      	cmp	r3, lr
 80029e2:	ec51 0b10 	vmov	r0, r1, d0
 80029e6:	ee11 8a10 	vmov	r8, s2
 80029ea:	d80a      	bhi.n	8002a02 <__ieee754_atan2+0x3a>
 80029ec:	4244      	negs	r4, r0
 80029ee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80029f2:	4304      	orrs	r4, r0
 80029f4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80029f8:	4574      	cmp	r4, lr
 80029fa:	ee10 9a10 	vmov	r9, s0
 80029fe:	468c      	mov	ip, r1
 8002a00:	d907      	bls.n	8002a12 <__ieee754_atan2+0x4a>
 8002a02:	4632      	mov	r2, r6
 8002a04:	463b      	mov	r3, r7
 8002a06:	f7fd fbe5 	bl	80001d4 <__adddf3>
 8002a0a:	ec41 0b10 	vmov	d0, r0, r1
 8002a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a12:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8002a16:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8002a1a:	4334      	orrs	r4, r6
 8002a1c:	d103      	bne.n	8002a26 <__ieee754_atan2+0x5e>
 8002a1e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a22:	f000 b89d 	b.w	8002b60 <atan>
 8002a26:	17bc      	asrs	r4, r7, #30
 8002a28:	f004 0402 	and.w	r4, r4, #2
 8002a2c:	ea53 0909 	orrs.w	r9, r3, r9
 8002a30:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8002a34:	d107      	bne.n	8002a46 <__ieee754_atan2+0x7e>
 8002a36:	2c02      	cmp	r4, #2
 8002a38:	d060      	beq.n	8002afc <__ieee754_atan2+0x134>
 8002a3a:	2c03      	cmp	r4, #3
 8002a3c:	d1e5      	bne.n	8002a0a <__ieee754_atan2+0x42>
 8002a3e:	a142      	add	r1, pc, #264	; (adr r1, 8002b48 <__ieee754_atan2+0x180>)
 8002a40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a44:	e7e1      	b.n	8002a0a <__ieee754_atan2+0x42>
 8002a46:	ea52 0808 	orrs.w	r8, r2, r8
 8002a4a:	d106      	bne.n	8002a5a <__ieee754_atan2+0x92>
 8002a4c:	f1bc 0f00 	cmp.w	ip, #0
 8002a50:	da5f      	bge.n	8002b12 <__ieee754_atan2+0x14a>
 8002a52:	a13f      	add	r1, pc, #252	; (adr r1, 8002b50 <__ieee754_atan2+0x188>)
 8002a54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a58:	e7d7      	b.n	8002a0a <__ieee754_atan2+0x42>
 8002a5a:	4572      	cmp	r2, lr
 8002a5c:	d10f      	bne.n	8002a7e <__ieee754_atan2+0xb6>
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	f104 34ff 	add.w	r4, r4, #4294967295
 8002a64:	d107      	bne.n	8002a76 <__ieee754_atan2+0xae>
 8002a66:	2c02      	cmp	r4, #2
 8002a68:	d84c      	bhi.n	8002b04 <__ieee754_atan2+0x13c>
 8002a6a:	4b35      	ldr	r3, [pc, #212]	; (8002b40 <__ieee754_atan2+0x178>)
 8002a6c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8002a70:	e9d4 0100 	ldrd	r0, r1, [r4]
 8002a74:	e7c9      	b.n	8002a0a <__ieee754_atan2+0x42>
 8002a76:	2c02      	cmp	r4, #2
 8002a78:	d848      	bhi.n	8002b0c <__ieee754_atan2+0x144>
 8002a7a:	4b32      	ldr	r3, [pc, #200]	; (8002b44 <__ieee754_atan2+0x17c>)
 8002a7c:	e7f6      	b.n	8002a6c <__ieee754_atan2+0xa4>
 8002a7e:	4573      	cmp	r3, lr
 8002a80:	d0e4      	beq.n	8002a4c <__ieee754_atan2+0x84>
 8002a82:	1a9b      	subs	r3, r3, r2
 8002a84:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8002a88:	ea4f 5223 	mov.w	r2, r3, asr #20
 8002a8c:	da1e      	bge.n	8002acc <__ieee754_atan2+0x104>
 8002a8e:	2f00      	cmp	r7, #0
 8002a90:	da01      	bge.n	8002a96 <__ieee754_atan2+0xce>
 8002a92:	323c      	adds	r2, #60	; 0x3c
 8002a94:	db1e      	blt.n	8002ad4 <__ieee754_atan2+0x10c>
 8002a96:	4632      	mov	r2, r6
 8002a98:	463b      	mov	r3, r7
 8002a9a:	f7fd fe7b 	bl	8000794 <__aeabi_ddiv>
 8002a9e:	ec41 0b10 	vmov	d0, r0, r1
 8002aa2:	f000 f9fd 	bl	8002ea0 <fabs>
 8002aa6:	f000 f85b 	bl	8002b60 <atan>
 8002aaa:	ec51 0b10 	vmov	r0, r1, d0
 8002aae:	2c01      	cmp	r4, #1
 8002ab0:	d013      	beq.n	8002ada <__ieee754_atan2+0x112>
 8002ab2:	2c02      	cmp	r4, #2
 8002ab4:	d015      	beq.n	8002ae2 <__ieee754_atan2+0x11a>
 8002ab6:	2c00      	cmp	r4, #0
 8002ab8:	d0a7      	beq.n	8002a0a <__ieee754_atan2+0x42>
 8002aba:	a319      	add	r3, pc, #100	; (adr r3, 8002b20 <__ieee754_atan2+0x158>)
 8002abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac0:	f7fd fb86 	bl	80001d0 <__aeabi_dsub>
 8002ac4:	a318      	add	r3, pc, #96	; (adr r3, 8002b28 <__ieee754_atan2+0x160>)
 8002ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aca:	e014      	b.n	8002af6 <__ieee754_atan2+0x12e>
 8002acc:	a118      	add	r1, pc, #96	; (adr r1, 8002b30 <__ieee754_atan2+0x168>)
 8002ace:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002ad2:	e7ec      	b.n	8002aae <__ieee754_atan2+0xe6>
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	e7e9      	b.n	8002aae <__ieee754_atan2+0xe6>
 8002ada:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002ade:	4619      	mov	r1, r3
 8002ae0:	e793      	b.n	8002a0a <__ieee754_atan2+0x42>
 8002ae2:	a30f      	add	r3, pc, #60	; (adr r3, 8002b20 <__ieee754_atan2+0x158>)
 8002ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae8:	f7fd fb72 	bl	80001d0 <__aeabi_dsub>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	a10d      	add	r1, pc, #52	; (adr r1, 8002b28 <__ieee754_atan2+0x160>)
 8002af2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002af6:	f7fd fb6b 	bl	80001d0 <__aeabi_dsub>
 8002afa:	e786      	b.n	8002a0a <__ieee754_atan2+0x42>
 8002afc:	a10a      	add	r1, pc, #40	; (adr r1, 8002b28 <__ieee754_atan2+0x160>)
 8002afe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b02:	e782      	b.n	8002a0a <__ieee754_atan2+0x42>
 8002b04:	a10c      	add	r1, pc, #48	; (adr r1, 8002b38 <__ieee754_atan2+0x170>)
 8002b06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b0a:	e77e      	b.n	8002a0a <__ieee754_atan2+0x42>
 8002b0c:	2000      	movs	r0, #0
 8002b0e:	2100      	movs	r1, #0
 8002b10:	e77b      	b.n	8002a0a <__ieee754_atan2+0x42>
 8002b12:	a107      	add	r1, pc, #28	; (adr r1, 8002b30 <__ieee754_atan2+0x168>)
 8002b14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b18:	e777      	b.n	8002a0a <__ieee754_atan2+0x42>
 8002b1a:	bf00      	nop
 8002b1c:	f3af 8000 	nop.w
 8002b20:	33145c07 	.word	0x33145c07
 8002b24:	3ca1a626 	.word	0x3ca1a626
 8002b28:	54442d18 	.word	0x54442d18
 8002b2c:	400921fb 	.word	0x400921fb
 8002b30:	54442d18 	.word	0x54442d18
 8002b34:	3ff921fb 	.word	0x3ff921fb
 8002b38:	54442d18 	.word	0x54442d18
 8002b3c:	3fe921fb 	.word	0x3fe921fb
 8002b40:	08002f00 	.word	0x08002f00
 8002b44:	08002f18 	.word	0x08002f18
 8002b48:	54442d18 	.word	0x54442d18
 8002b4c:	c00921fb 	.word	0xc00921fb
 8002b50:	54442d18 	.word	0x54442d18
 8002b54:	bff921fb 	.word	0xbff921fb
 8002b58:	7ff00000 	.word	0x7ff00000
 8002b5c:	00000000 	.word	0x00000000

08002b60 <atan>:
 8002b60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b64:	ec55 4b10 	vmov	r4, r5, d0
 8002b68:	4bc3      	ldr	r3, [pc, #780]	; (8002e78 <atan+0x318>)
 8002b6a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8002b6e:	429e      	cmp	r6, r3
 8002b70:	46ab      	mov	fp, r5
 8002b72:	dd18      	ble.n	8002ba6 <atan+0x46>
 8002b74:	4bc1      	ldr	r3, [pc, #772]	; (8002e7c <atan+0x31c>)
 8002b76:	429e      	cmp	r6, r3
 8002b78:	dc01      	bgt.n	8002b7e <atan+0x1e>
 8002b7a:	d109      	bne.n	8002b90 <atan+0x30>
 8002b7c:	b144      	cbz	r4, 8002b90 <atan+0x30>
 8002b7e:	4622      	mov	r2, r4
 8002b80:	462b      	mov	r3, r5
 8002b82:	4620      	mov	r0, r4
 8002b84:	4629      	mov	r1, r5
 8002b86:	f7fd fb25 	bl	80001d4 <__adddf3>
 8002b8a:	4604      	mov	r4, r0
 8002b8c:	460d      	mov	r5, r1
 8002b8e:	e006      	b.n	8002b9e <atan+0x3e>
 8002b90:	f1bb 0f00 	cmp.w	fp, #0
 8002b94:	f300 8131 	bgt.w	8002dfa <atan+0x29a>
 8002b98:	a59b      	add	r5, pc, #620	; (adr r5, 8002e08 <atan+0x2a8>)
 8002b9a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8002b9e:	ec45 4b10 	vmov	d0, r4, r5
 8002ba2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ba6:	4bb6      	ldr	r3, [pc, #728]	; (8002e80 <atan+0x320>)
 8002ba8:	429e      	cmp	r6, r3
 8002baa:	dc14      	bgt.n	8002bd6 <atan+0x76>
 8002bac:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8002bb0:	429e      	cmp	r6, r3
 8002bb2:	dc0d      	bgt.n	8002bd0 <atan+0x70>
 8002bb4:	a396      	add	r3, pc, #600	; (adr r3, 8002e10 <atan+0x2b0>)
 8002bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bba:	ee10 0a10 	vmov	r0, s0
 8002bbe:	4629      	mov	r1, r5
 8002bc0:	f7fd fb08 	bl	80001d4 <__adddf3>
 8002bc4:	4baf      	ldr	r3, [pc, #700]	; (8002e84 <atan+0x324>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f7fd ff4a 	bl	8000a60 <__aeabi_dcmpgt>
 8002bcc:	2800      	cmp	r0, #0
 8002bce:	d1e6      	bne.n	8002b9e <atan+0x3e>
 8002bd0:	f04f 3aff 	mov.w	sl, #4294967295
 8002bd4:	e02b      	b.n	8002c2e <atan+0xce>
 8002bd6:	f000 f963 	bl	8002ea0 <fabs>
 8002bda:	4bab      	ldr	r3, [pc, #684]	; (8002e88 <atan+0x328>)
 8002bdc:	429e      	cmp	r6, r3
 8002bde:	ec55 4b10 	vmov	r4, r5, d0
 8002be2:	f300 80bf 	bgt.w	8002d64 <atan+0x204>
 8002be6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8002bea:	429e      	cmp	r6, r3
 8002bec:	f300 80a0 	bgt.w	8002d30 <atan+0x1d0>
 8002bf0:	ee10 2a10 	vmov	r2, s0
 8002bf4:	ee10 0a10 	vmov	r0, s0
 8002bf8:	462b      	mov	r3, r5
 8002bfa:	4629      	mov	r1, r5
 8002bfc:	f7fd faea 	bl	80001d4 <__adddf3>
 8002c00:	4ba0      	ldr	r3, [pc, #640]	; (8002e84 <atan+0x324>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	f7fd fae4 	bl	80001d0 <__aeabi_dsub>
 8002c08:	2200      	movs	r2, #0
 8002c0a:	4606      	mov	r6, r0
 8002c0c:	460f      	mov	r7, r1
 8002c0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c12:	4620      	mov	r0, r4
 8002c14:	4629      	mov	r1, r5
 8002c16:	f7fd fadd 	bl	80001d4 <__adddf3>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	4630      	mov	r0, r6
 8002c20:	4639      	mov	r1, r7
 8002c22:	f7fd fdb7 	bl	8000794 <__aeabi_ddiv>
 8002c26:	f04f 0a00 	mov.w	sl, #0
 8002c2a:	4604      	mov	r4, r0
 8002c2c:	460d      	mov	r5, r1
 8002c2e:	4622      	mov	r2, r4
 8002c30:	462b      	mov	r3, r5
 8002c32:	4620      	mov	r0, r4
 8002c34:	4629      	mov	r1, r5
 8002c36:	f7fd fc83 	bl	8000540 <__aeabi_dmul>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	4680      	mov	r8, r0
 8002c40:	4689      	mov	r9, r1
 8002c42:	f7fd fc7d 	bl	8000540 <__aeabi_dmul>
 8002c46:	a374      	add	r3, pc, #464	; (adr r3, 8002e18 <atan+0x2b8>)
 8002c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4c:	4606      	mov	r6, r0
 8002c4e:	460f      	mov	r7, r1
 8002c50:	f7fd fc76 	bl	8000540 <__aeabi_dmul>
 8002c54:	a372      	add	r3, pc, #456	; (adr r3, 8002e20 <atan+0x2c0>)
 8002c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5a:	f7fd fabb 	bl	80001d4 <__adddf3>
 8002c5e:	4632      	mov	r2, r6
 8002c60:	463b      	mov	r3, r7
 8002c62:	f7fd fc6d 	bl	8000540 <__aeabi_dmul>
 8002c66:	a370      	add	r3, pc, #448	; (adr r3, 8002e28 <atan+0x2c8>)
 8002c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6c:	f7fd fab2 	bl	80001d4 <__adddf3>
 8002c70:	4632      	mov	r2, r6
 8002c72:	463b      	mov	r3, r7
 8002c74:	f7fd fc64 	bl	8000540 <__aeabi_dmul>
 8002c78:	a36d      	add	r3, pc, #436	; (adr r3, 8002e30 <atan+0x2d0>)
 8002c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7e:	f7fd faa9 	bl	80001d4 <__adddf3>
 8002c82:	4632      	mov	r2, r6
 8002c84:	463b      	mov	r3, r7
 8002c86:	f7fd fc5b 	bl	8000540 <__aeabi_dmul>
 8002c8a:	a36b      	add	r3, pc, #428	; (adr r3, 8002e38 <atan+0x2d8>)
 8002c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c90:	f7fd faa0 	bl	80001d4 <__adddf3>
 8002c94:	4632      	mov	r2, r6
 8002c96:	463b      	mov	r3, r7
 8002c98:	f7fd fc52 	bl	8000540 <__aeabi_dmul>
 8002c9c:	a368      	add	r3, pc, #416	; (adr r3, 8002e40 <atan+0x2e0>)
 8002c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca2:	f7fd fa97 	bl	80001d4 <__adddf3>
 8002ca6:	4642      	mov	r2, r8
 8002ca8:	464b      	mov	r3, r9
 8002caa:	f7fd fc49 	bl	8000540 <__aeabi_dmul>
 8002cae:	a366      	add	r3, pc, #408	; (adr r3, 8002e48 <atan+0x2e8>)
 8002cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb4:	4680      	mov	r8, r0
 8002cb6:	4689      	mov	r9, r1
 8002cb8:	4630      	mov	r0, r6
 8002cba:	4639      	mov	r1, r7
 8002cbc:	f7fd fc40 	bl	8000540 <__aeabi_dmul>
 8002cc0:	a363      	add	r3, pc, #396	; (adr r3, 8002e50 <atan+0x2f0>)
 8002cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc6:	f7fd fa83 	bl	80001d0 <__aeabi_dsub>
 8002cca:	4632      	mov	r2, r6
 8002ccc:	463b      	mov	r3, r7
 8002cce:	f7fd fc37 	bl	8000540 <__aeabi_dmul>
 8002cd2:	a361      	add	r3, pc, #388	; (adr r3, 8002e58 <atan+0x2f8>)
 8002cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd8:	f7fd fa7a 	bl	80001d0 <__aeabi_dsub>
 8002cdc:	4632      	mov	r2, r6
 8002cde:	463b      	mov	r3, r7
 8002ce0:	f7fd fc2e 	bl	8000540 <__aeabi_dmul>
 8002ce4:	a35e      	add	r3, pc, #376	; (adr r3, 8002e60 <atan+0x300>)
 8002ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cea:	f7fd fa71 	bl	80001d0 <__aeabi_dsub>
 8002cee:	4632      	mov	r2, r6
 8002cf0:	463b      	mov	r3, r7
 8002cf2:	f7fd fc25 	bl	8000540 <__aeabi_dmul>
 8002cf6:	a35c      	add	r3, pc, #368	; (adr r3, 8002e68 <atan+0x308>)
 8002cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cfc:	f7fd fa68 	bl	80001d0 <__aeabi_dsub>
 8002d00:	4632      	mov	r2, r6
 8002d02:	463b      	mov	r3, r7
 8002d04:	f7fd fc1c 	bl	8000540 <__aeabi_dmul>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4640      	mov	r0, r8
 8002d0e:	4649      	mov	r1, r9
 8002d10:	f7fd fa60 	bl	80001d4 <__adddf3>
 8002d14:	4622      	mov	r2, r4
 8002d16:	462b      	mov	r3, r5
 8002d18:	f7fd fc12 	bl	8000540 <__aeabi_dmul>
 8002d1c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	d14b      	bne.n	8002dbe <atan+0x25e>
 8002d26:	4620      	mov	r0, r4
 8002d28:	4629      	mov	r1, r5
 8002d2a:	f7fd fa51 	bl	80001d0 <__aeabi_dsub>
 8002d2e:	e72c      	b.n	8002b8a <atan+0x2a>
 8002d30:	ee10 0a10 	vmov	r0, s0
 8002d34:	4b53      	ldr	r3, [pc, #332]	; (8002e84 <atan+0x324>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	4629      	mov	r1, r5
 8002d3a:	f7fd fa49 	bl	80001d0 <__aeabi_dsub>
 8002d3e:	4b51      	ldr	r3, [pc, #324]	; (8002e84 <atan+0x324>)
 8002d40:	4606      	mov	r6, r0
 8002d42:	460f      	mov	r7, r1
 8002d44:	2200      	movs	r2, #0
 8002d46:	4620      	mov	r0, r4
 8002d48:	4629      	mov	r1, r5
 8002d4a:	f7fd fa43 	bl	80001d4 <__adddf3>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	4630      	mov	r0, r6
 8002d54:	4639      	mov	r1, r7
 8002d56:	f7fd fd1d 	bl	8000794 <__aeabi_ddiv>
 8002d5a:	f04f 0a01 	mov.w	sl, #1
 8002d5e:	4604      	mov	r4, r0
 8002d60:	460d      	mov	r5, r1
 8002d62:	e764      	b.n	8002c2e <atan+0xce>
 8002d64:	4b49      	ldr	r3, [pc, #292]	; (8002e8c <atan+0x32c>)
 8002d66:	429e      	cmp	r6, r3
 8002d68:	da1d      	bge.n	8002da6 <atan+0x246>
 8002d6a:	ee10 0a10 	vmov	r0, s0
 8002d6e:	4b48      	ldr	r3, [pc, #288]	; (8002e90 <atan+0x330>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	4629      	mov	r1, r5
 8002d74:	f7fd fa2c 	bl	80001d0 <__aeabi_dsub>
 8002d78:	4b45      	ldr	r3, [pc, #276]	; (8002e90 <atan+0x330>)
 8002d7a:	4606      	mov	r6, r0
 8002d7c:	460f      	mov	r7, r1
 8002d7e:	2200      	movs	r2, #0
 8002d80:	4620      	mov	r0, r4
 8002d82:	4629      	mov	r1, r5
 8002d84:	f7fd fbdc 	bl	8000540 <__aeabi_dmul>
 8002d88:	4b3e      	ldr	r3, [pc, #248]	; (8002e84 <atan+0x324>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f7fd fa22 	bl	80001d4 <__adddf3>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	4630      	mov	r0, r6
 8002d96:	4639      	mov	r1, r7
 8002d98:	f7fd fcfc 	bl	8000794 <__aeabi_ddiv>
 8002d9c:	f04f 0a02 	mov.w	sl, #2
 8002da0:	4604      	mov	r4, r0
 8002da2:	460d      	mov	r5, r1
 8002da4:	e743      	b.n	8002c2e <atan+0xce>
 8002da6:	462b      	mov	r3, r5
 8002da8:	ee10 2a10 	vmov	r2, s0
 8002dac:	4939      	ldr	r1, [pc, #228]	; (8002e94 <atan+0x334>)
 8002dae:	2000      	movs	r0, #0
 8002db0:	f7fd fcf0 	bl	8000794 <__aeabi_ddiv>
 8002db4:	f04f 0a03 	mov.w	sl, #3
 8002db8:	4604      	mov	r4, r0
 8002dba:	460d      	mov	r5, r1
 8002dbc:	e737      	b.n	8002c2e <atan+0xce>
 8002dbe:	4b36      	ldr	r3, [pc, #216]	; (8002e98 <atan+0x338>)
 8002dc0:	4e36      	ldr	r6, [pc, #216]	; (8002e9c <atan+0x33c>)
 8002dc2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8002dc6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8002dca:	e9da 2300 	ldrd	r2, r3, [sl]
 8002dce:	f7fd f9ff 	bl	80001d0 <__aeabi_dsub>
 8002dd2:	4622      	mov	r2, r4
 8002dd4:	462b      	mov	r3, r5
 8002dd6:	f7fd f9fb 	bl	80001d0 <__aeabi_dsub>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	460b      	mov	r3, r1
 8002dde:	e9d6 0100 	ldrd	r0, r1, [r6]
 8002de2:	f7fd f9f5 	bl	80001d0 <__aeabi_dsub>
 8002de6:	f1bb 0f00 	cmp.w	fp, #0
 8002dea:	4604      	mov	r4, r0
 8002dec:	460d      	mov	r5, r1
 8002dee:	f6bf aed6 	bge.w	8002b9e <atan+0x3e>
 8002df2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002df6:	461d      	mov	r5, r3
 8002df8:	e6d1      	b.n	8002b9e <atan+0x3e>
 8002dfa:	a51d      	add	r5, pc, #116	; (adr r5, 8002e70 <atan+0x310>)
 8002dfc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8002e00:	e6cd      	b.n	8002b9e <atan+0x3e>
 8002e02:	bf00      	nop
 8002e04:	f3af 8000 	nop.w
 8002e08:	54442d18 	.word	0x54442d18
 8002e0c:	bff921fb 	.word	0xbff921fb
 8002e10:	8800759c 	.word	0x8800759c
 8002e14:	7e37e43c 	.word	0x7e37e43c
 8002e18:	e322da11 	.word	0xe322da11
 8002e1c:	3f90ad3a 	.word	0x3f90ad3a
 8002e20:	24760deb 	.word	0x24760deb
 8002e24:	3fa97b4b 	.word	0x3fa97b4b
 8002e28:	a0d03d51 	.word	0xa0d03d51
 8002e2c:	3fb10d66 	.word	0x3fb10d66
 8002e30:	c54c206e 	.word	0xc54c206e
 8002e34:	3fb745cd 	.word	0x3fb745cd
 8002e38:	920083ff 	.word	0x920083ff
 8002e3c:	3fc24924 	.word	0x3fc24924
 8002e40:	5555550d 	.word	0x5555550d
 8002e44:	3fd55555 	.word	0x3fd55555
 8002e48:	2c6a6c2f 	.word	0x2c6a6c2f
 8002e4c:	bfa2b444 	.word	0xbfa2b444
 8002e50:	52defd9a 	.word	0x52defd9a
 8002e54:	3fadde2d 	.word	0x3fadde2d
 8002e58:	af749a6d 	.word	0xaf749a6d
 8002e5c:	3fb3b0f2 	.word	0x3fb3b0f2
 8002e60:	fe231671 	.word	0xfe231671
 8002e64:	3fbc71c6 	.word	0x3fbc71c6
 8002e68:	9998ebc4 	.word	0x9998ebc4
 8002e6c:	3fc99999 	.word	0x3fc99999
 8002e70:	54442d18 	.word	0x54442d18
 8002e74:	3ff921fb 	.word	0x3ff921fb
 8002e78:	440fffff 	.word	0x440fffff
 8002e7c:	7ff00000 	.word	0x7ff00000
 8002e80:	3fdbffff 	.word	0x3fdbffff
 8002e84:	3ff00000 	.word	0x3ff00000
 8002e88:	3ff2ffff 	.word	0x3ff2ffff
 8002e8c:	40038000 	.word	0x40038000
 8002e90:	3ff80000 	.word	0x3ff80000
 8002e94:	bff00000 	.word	0xbff00000
 8002e98:	08002f50 	.word	0x08002f50
 8002e9c:	08002f30 	.word	0x08002f30

08002ea0 <fabs>:
 8002ea0:	ec51 0b10 	vmov	r0, r1, d0
 8002ea4:	ee10 2a10 	vmov	r2, s0
 8002ea8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002eac:	ec43 2b10 	vmov	d0, r2, r3
 8002eb0:	4770      	bx	lr
	...

08002eb4 <_init>:
 8002eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eb6:	bf00      	nop
 8002eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eba:	bc08      	pop	{r3}
 8002ebc:	469e      	mov	lr, r3
 8002ebe:	4770      	bx	lr

08002ec0 <_fini>:
 8002ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ec2:	bf00      	nop
 8002ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ec6:	bc08      	pop	{r3}
 8002ec8:	469e      	mov	lr, r3
 8002eca:	4770      	bx	lr
