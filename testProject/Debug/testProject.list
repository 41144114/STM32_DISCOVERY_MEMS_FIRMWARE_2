
testProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bdc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08005d70  08005d70  00015d70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e58  08005e58  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08005e58  08005e58  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e58  08005e58  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e58  08005e58  00015e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e5c  08005e5c  00015e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005e60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000062c  20000068  08005ec8  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000694  08005ec8  00020694  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b244  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d63  00000000  00000000  0003b2dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd8  00000000  00000000  0003f040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a98  00000000  00000000  0003fc18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002742e  00000000  00000000  000406b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017a04  00000000  00000000  00067ade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de0a9  00000000  00000000  0007f4e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015d58b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033e8  00000000  00000000  0015d5e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d54 	.word	0x08005d54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005d54 	.word	0x08005d54

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2f>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b34:	bf24      	itt	cs
 8000b36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b3e:	d90d      	bls.n	8000b5c <__aeabi_d2f+0x30>
 8000b40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b54:	bf08      	it	eq
 8000b56:	f020 0001 	biceq.w	r0, r0, #1
 8000b5a:	4770      	bx	lr
 8000b5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b60:	d121      	bne.n	8000ba6 <__aeabi_d2f+0x7a>
 8000b62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b66:	bfbc      	itt	lt
 8000b68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	4770      	bxlt	lr
 8000b6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b76:	f1c2 0218 	rsb	r2, r2, #24
 8000b7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b82:	fa20 f002 	lsr.w	r0, r0, r2
 8000b86:	bf18      	it	ne
 8000b88:	f040 0001 	orrne.w	r0, r0, #1
 8000b8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b98:	ea40 000c 	orr.w	r0, r0, ip
 8000b9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba4:	e7cc      	b.n	8000b40 <__aeabi_d2f+0x14>
 8000ba6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000baa:	d107      	bne.n	8000bbc <__aeabi_d2f+0x90>
 8000bac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bb6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bba:	4770      	bxne	lr
 8000bbc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b087      	sub	sp, #28
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8000be0:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	68ba      	ldr	r2, [r7, #8]
 8000be6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8000bea:	88fa      	ldrh	r2, [r7, #6]
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
 8000bf2:	2300      	movs	r3, #0
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	371c      	adds	r7, #28
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8000c0e:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d017      	beq.n	8000c4a <USBD_CDC_TransmitPacket+0x4a>
  {
    if(hcdc->TxState == 0)
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d110      	bne.n	8000c46 <USBD_CDC_TransmitPacket+0x46>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	2201      	movs	r2, #1
 8000c28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev,
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	2181      	movs	r1, #129	; 0x81
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f000 f851 	bl	8000ce4 <USBD_LL_Transmit>
      
      return USBD_OK;
 8000c42:	2300      	movs	r3, #0
 8000c44:	e002      	b.n	8000c4c <USBD_CDC_TransmitPacket+0x4c>
    }
    else
    {
      return USBD_BUSY;
 8000c46:	2301      	movs	r3, #1
 8000c48:	e000      	b.n	8000c4c <USBD_CDC_TransmitPacket+0x4c>
    }
  }
  else
  {
    return USBD_FAIL;
 8000c4a:	2302      	movs	r3, #2
  }
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	4608      	mov	r0, r1
 8000c5e:	4611      	mov	r1, r2
 8000c60:	461a      	mov	r2, r3
 8000c62:	4603      	mov	r3, r0
 8000c64:	70fb      	strb	r3, [r7, #3]
 8000c66:	460b      	mov	r3, r1
 8000c68:	70bb      	strb	r3, [r7, #2]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	803b      	strh	r3, [r7, #0]
  return USBD_OK;
 8000c6e:	2300      	movs	r3, #0
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	460b      	mov	r3, r1
 8000c86:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000c96:	b480      	push	{r7}
 8000c98:	b083      	sub	sp, #12
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	70fb      	strb	r3, [r7, #3]
  return USBD_OK; 
 8000ca2:	2300      	movs	r3, #0
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	460b      	mov	r3, r1
 8000cba:	70fb      	strb	r3, [r7, #3]
   return 0;
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	b083      	sub	sp, #12
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	70fb      	strb	r3, [r7, #3]
  return USBD_OK; 
 8000cd6:	2300      	movs	r3, #0
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint16_t size)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	607a      	str	r2, [r7, #4]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	72fb      	strb	r3, [r7, #11]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	813b      	strh	r3, [r7, #8]
  return USBD_OK;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3714      	adds	r7, #20
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint16_t size)
{
 8000d06:	b480      	push	{r7}
 8000d08:	b085      	sub	sp, #20
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	60f8      	str	r0, [r7, #12]
 8000d0e:	607a      	str	r2, [r7, #4]
 8000d10:	461a      	mov	r2, r3
 8000d12:	460b      	mov	r3, r1
 8000d14:	72fb      	strb	r3, [r7, #11]
 8000d16:	4613      	mov	r3, r2
 8000d18:	813b      	strh	r3, [r7, #8]
  return USBD_OK;
 8000d1a:	2300      	movs	r3, #0
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b084      	sub	sp, #16
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
 8000d46:	460b      	mov	r3, r1
 8000d48:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d00c      	beq.n	8000d72 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	78fa      	ldrb	r2, [r7, #3]
 8000d62:	4611      	mov	r1, r2
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	4798      	blx	r3
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d101      	bne.n	8000d72 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 8000d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3710      	adds	r7, #16
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	460b      	mov	r3, r1
 8000d86:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	78fa      	ldrb	r2, [r7, #3]
 8000d92:	4611      	mov	r1, r2
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	4798      	blx	r3
  return USBD_OK;
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b082      	sub	sp, #8
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
 8000daa:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000db2:	6839      	ldr	r1, [r7, #0]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f000 fd66 	bl	8001886 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8000dc8:	461a      	mov	r2, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8000dd6:	f003 031f 	and.w	r3, r3, #31
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d016      	beq.n	8000e0c <USBD_LL_SetupStage+0x6a>
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	dc1c      	bgt.n	8000e1c <USBD_LL_SetupStage+0x7a>
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d002      	beq.n	8000dec <USBD_LL_SetupStage+0x4a>
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d008      	beq.n	8000dfc <USBD_LL_SetupStage+0x5a>
 8000dea:	e017      	b.n	8000e1c <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000df2:	4619      	mov	r1, r3
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f000 f98b 	bl	8001110 <USBD_StdDevReq>
    break;
 8000dfa:	e01a      	b.n	8000e32 <USBD_LL_SetupStage+0x90>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000e02:	4619      	mov	r1, r3
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f000 f9d3 	bl	80011b0 <USBD_StdItfReq>
    break;
 8000e0a:	e012      	b.n	8000e32 <USBD_LL_SetupStage+0x90>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000e12:	4619      	mov	r1, r3
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f000 f9fe 	bl	8001216 <USBD_StdEPReq>
    break;
 8000e1a:	e00a      	b.n	8000e32 <USBD_LL_SetupStage+0x90>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8000e22:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	4619      	mov	r1, r3
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff ff26 	bl	8000c7c <USBD_LL_StallEP>
    break;
 8000e30:	bf00      	nop
  }  
  return USBD_OK;  
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	460b      	mov	r3, r1
 8000e46:	607a      	str	r2, [r7, #4]
 8000e48:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8000e4a:	7afb      	ldrb	r3, [r7, #11]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d138      	bne.n	8000ec2 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8000e56:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8000e5e:	2b03      	cmp	r3, #3
 8000e60:	d142      	bne.n	8000ee8 <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	689a      	ldr	r2, [r3, #8]
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d914      	bls.n	8000e98 <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	689a      	ldr	r2, [r3, #8]
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	1ad2      	subs	r2, r2, r3
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	68da      	ldr	r2, [r3, #12]
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	4293      	cmp	r3, r2
 8000e86:	bf28      	it	cs
 8000e88:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	6879      	ldr	r1, [r7, #4]
 8000e90:	68f8      	ldr	r0, [r7, #12]
 8000e92:	f000 fd74 	bl	800197e <USBD_CtlContinueRx>
 8000e96:	e027      	b.n	8000ee8 <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000e9e:	691b      	ldr	r3, [r3, #16]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d00a      	beq.n	8000eba <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8000eaa:	2b03      	cmp	r3, #3
 8000eac:	d105      	bne.n	8000eba <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000eb4:	691b      	ldr	r3, [r3, #16]
 8000eb6:	68f8      	ldr	r0, [r7, #12]
 8000eb8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8000eba:	68f8      	ldr	r0, [r7, #12]
 8000ebc:	f000 fd71 	bl	80019a2 <USBD_CtlSendStatus>
 8000ec0:	e012      	b.n	8000ee8 <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000ec8:	699b      	ldr	r3, [r3, #24]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d00c      	beq.n	8000ee8 <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 8000ed4:	2b03      	cmp	r3, #3
 8000ed6:	d107      	bne.n	8000ee8 <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	7afa      	ldrb	r2, [r7, #11]
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	68f8      	ldr	r0, [r7, #12]
 8000ee6:	4798      	blx	r3
  }  
  return USBD_OK;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3718      	adds	r7, #24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b086      	sub	sp, #24
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	60f8      	str	r0, [r7, #12]
 8000efa:	460b      	mov	r3, r1
 8000efc:	607a      	str	r2, [r7, #4]
 8000efe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8000f00:	7afb      	ldrb	r3, [r7, #11]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d16c      	bne.n	8000fe0 <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	3314      	adds	r3, #20
 8000f0a:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d157      	bne.n	8000fc6 <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	689a      	ldr	r2, [r3, #8]
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	68db      	ldr	r3, [r3, #12]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d915      	bls.n	8000f4e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	689a      	ldr	r2, [r3, #8]
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	1ad2      	subs	r2, r2, r3
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	461a      	mov	r2, r3
 8000f38:	6879      	ldr	r1, [r7, #4]
 8000f3a:	68f8      	ldr	r0, [r7, #12]
 8000f3c:	f000 fd0d 	bl	800195a <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8000f40:	2300      	movs	r3, #0
 8000f42:	2200      	movs	r2, #0
 8000f44:	2100      	movs	r1, #0
 8000f46:	68f8      	ldr	r0, [r7, #12]
 8000f48:	f7ff fedd 	bl	8000d06 <USBD_LL_PrepareReceive>
 8000f4c:	e03b      	b.n	8000fc6 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	697a      	ldr	r2, [r7, #20]
 8000f54:	68d2      	ldr	r2, [r2, #12]
 8000f56:	fbb3 f1f2 	udiv	r1, r3, r2
 8000f5a:	fb02 f201 	mul.w	r2, r2, r1
 8000f5e:	1a9b      	subs	r3, r3, r2
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d11c      	bne.n	8000f9e <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	685a      	ldr	r2, [r3, #4]
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d316      	bcc.n	8000f9e <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	685a      	ldr	r2, [r3, #4]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d20f      	bcs.n	8000f9e <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2100      	movs	r1, #0
 8000f82:	68f8      	ldr	r0, [r7, #12]
 8000f84:	f000 fce9 	bl	800195a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8000f90:	2300      	movs	r3, #0
 8000f92:	2200      	movs	r2, #0
 8000f94:	2100      	movs	r1, #0
 8000f96:	68f8      	ldr	r0, [r7, #12]
 8000f98:	f7ff feb5 	bl	8000d06 <USBD_LL_PrepareReceive>
 8000f9c:	e013      	b.n	8000fc6 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d00a      	beq.n	8000fc0 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8000fb0:	2b03      	cmp	r3, #3
 8000fb2:	d105      	bne.n	8000fc0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	68f8      	ldr	r0, [r7, #12]
 8000fbe:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8000fc0:	68f8      	ldr	r0, [r7, #12]
 8000fc2:	f000 fd01 	bl	80019c8 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d11a      	bne.n	8001006 <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 8000fd0:	68f8      	ldr	r0, [r7, #12]
 8000fd2:	f7ff fea9 	bl	8000d28 <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8000fde:	e012      	b.n	8001006 <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000fe6:	695b      	ldr	r3, [r3, #20]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d00c      	beq.n	8001006 <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	d107      	bne.n	8001006 <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	7afa      	ldrb	r2, [r7, #11]
 8001000:	4611      	mov	r1, r2
 8001002:	68f8      	ldr	r0, [r7, #12]
 8001004:	4798      	blx	r3
  }  
  return USBD_OK;
 8001006:	2300      	movs	r3, #0
}
 8001008:	4618      	mov	r0, r3
 800100a:	3718      	adds	r7, #24
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8001018:	2340      	movs	r3, #64	; 0x40
 800101a:	2200      	movs	r2, #0
 800101c:	2100      	movs	r1, #0
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff fe18 	bl	8000c54 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2240      	movs	r2, #64	; 0x40
 8001028:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 800102c:	2340      	movs	r3, #64	; 0x40
 800102e:	2200      	movs	r2, #0
 8001030:	2180      	movs	r1, #128	; 0x80
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff fe0e 	bl	8000c54 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2240      	movs	r2, #64	; 0x40
 800103c:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2201      	movs	r2, #1
 8001042:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800104c:	2b00      	cmp	r3, #0
 800104e:	d009      	beq.n	8001064 <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	6852      	ldr	r2, [r2, #4]
 800105c:	b2d2      	uxtb	r2, r2
 800105e:	4611      	mov	r1, r2
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	4798      	blx	r3
 
  
  return USBD_OK;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800106e:	b480      	push	{r7}
 8001070:	b083      	sub	sp, #12
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
 8001076:	460b      	mov	r3, r1
 8001078:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	78fa      	ldrb	r2, [r7, #3]
 800107e:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2204      	movs	r2, #4
 80010a6:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80010e8:	2b03      	cmp	r3, #3
 80010ea:	d10b      	bne.n	8001104 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80010f2:	69db      	ldr	r3, [r3, #28]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d005      	beq.n	8001104 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80010fe:	69db      	ldr	r3, [r3, #28]
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 800111a:	2300      	movs	r3, #0
 800111c:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	785b      	ldrb	r3, [r3, #1]
 8001122:	2b09      	cmp	r3, #9
 8001124:	d839      	bhi.n	800119a <USBD_StdDevReq+0x8a>
 8001126:	a201      	add	r2, pc, #4	; (adr r2, 800112c <USBD_StdDevReq+0x1c>)
 8001128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800112c:	0800117d 	.word	0x0800117d
 8001130:	08001191 	.word	0x08001191
 8001134:	0800119b 	.word	0x0800119b
 8001138:	08001187 	.word	0x08001187
 800113c:	0800119b 	.word	0x0800119b
 8001140:	0800115f 	.word	0x0800115f
 8001144:	08001155 	.word	0x08001155
 8001148:	0800119b 	.word	0x0800119b
 800114c:	08001173 	.word	0x08001173
 8001150:	08001169 	.word	0x08001169
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8001154:	6839      	ldr	r1, [r7, #0]
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f000 f93a 	bl	80013d0 <USBD_GetDescriptor>
    break;
 800115c:	e022      	b.n	80011a4 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 800115e:	6839      	ldr	r1, [r7, #0]
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f000 fa29 	bl	80015b8 <USBD_SetAddress>
    break;
 8001166:	e01d      	b.n	80011a4 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8001168:	6839      	ldr	r1, [r7, #0]
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f000 fa64 	bl	8001638 <USBD_SetConfig>
    break;
 8001170:	e018      	b.n	80011a4 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 8001172:	6839      	ldr	r1, [r7, #0]
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f000 fae7 	bl	8001748 <USBD_GetConfig>
    break;
 800117a:	e013      	b.n	80011a4 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 800117c:	6839      	ldr	r1, [r7, #0]
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f000 fb14 	bl	80017ac <USBD_GetStatus>
    break;
 8001184:	e00e      	b.n	80011a4 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 8001186:	6839      	ldr	r1, [r7, #0]
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f000 fb39 	bl	8001800 <USBD_SetFeature>
    break;
 800118e:	e009      	b.n	80011a4 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8001190:	6839      	ldr	r1, [r7, #0]
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f000 fb4f 	bl	8001836 <USBD_ClrFeature>
    break;
 8001198:	e004      	b.n	80011a4 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 800119a:	6839      	ldr	r1, [r7, #0]
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f000 fbaf 	bl	8001900 <USBD_CtlError>
    break;
 80011a2:	bf00      	nop
  }
  
  return ret;
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop

080011b0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 80011ba:	2300      	movs	r3, #0
 80011bc:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80011c4:	2b03      	cmp	r3, #3
 80011c6:	d11b      	bne.n	8001200 <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	889b      	ldrh	r3, [r3, #4]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d811      	bhi.n	80011f6 <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	6839      	ldr	r1, [r7, #0]
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	88db      	ldrh	r3, [r3, #6]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d110      	bne.n	800120a <USBD_StdItfReq+0x5a>
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10d      	bne.n	800120a <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f000 fbd7 	bl	80019a2 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 80011f4:	e009      	b.n	800120a <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 80011f6:	6839      	ldr	r1, [r7, #0]
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f000 fb81 	bl	8001900 <USBD_CtlError>
    break;
 80011fe:	e004      	b.n	800120a <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 8001200:	6839      	ldr	r1, [r7, #0]
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f000 fb7c 	bl	8001900 <USBD_CtlError>
    break;
 8001208:	e000      	b.n	800120c <USBD_StdItfReq+0x5c>
    break;
 800120a:	bf00      	nop
  }
  return USBD_OK;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b084      	sub	sp, #16
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
 800121e:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 8001220:	2300      	movs	r3, #0
 8001222:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	889b      	ldrh	r3, [r3, #4]
 8001228:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001232:	2b20      	cmp	r3, #32
 8001234:	d108      	bne.n	8001248 <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	6839      	ldr	r1, [r7, #0]
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	4798      	blx	r3
    
    return USBD_OK;
 8001244:	2300      	movs	r3, #0
 8001246:	e0be      	b.n	80013c6 <USBD_StdEPReq+0x1b0>
  }
  
  switch (req->bRequest) 
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	785b      	ldrb	r3, [r3, #1]
 800124c:	2b03      	cmp	r3, #3
 800124e:	d007      	beq.n	8001260 <USBD_StdEPReq+0x4a>
 8001250:	2b03      	cmp	r3, #3
 8001252:	f300 80b6 	bgt.w	80013c2 <USBD_StdEPReq+0x1ac>
 8001256:	2b00      	cmp	r3, #0
 8001258:	d06d      	beq.n	8001336 <USBD_StdEPReq+0x120>
 800125a:	2b01      	cmp	r3, #1
 800125c:	d035      	beq.n	80012ca <USBD_StdEPReq+0xb4>
      break;
    }
    break;
    
  default:
    break;
 800125e:	e0b0      	b.n	80013c2 <USBD_StdEPReq+0x1ac>
    switch (pdev->dev_state) 
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8001266:	2b02      	cmp	r3, #2
 8001268:	d002      	beq.n	8001270 <USBD_StdEPReq+0x5a>
 800126a:	2b03      	cmp	r3, #3
 800126c:	d00c      	beq.n	8001288 <USBD_StdEPReq+0x72>
 800126e:	e025      	b.n	80012bc <USBD_StdEPReq+0xa6>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8001270:	7bbb      	ldrb	r3, [r7, #14]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d027      	beq.n	80012c6 <USBD_StdEPReq+0xb0>
 8001276:	7bbb      	ldrb	r3, [r7, #14]
 8001278:	2b80      	cmp	r3, #128	; 0x80
 800127a:	d024      	beq.n	80012c6 <USBD_StdEPReq+0xb0>
        USBD_LL_StallEP(pdev , ep_addr);
 800127c:	7bbb      	ldrb	r3, [r7, #14]
 800127e:	4619      	mov	r1, r3
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff fcfb 	bl	8000c7c <USBD_LL_StallEP>
      break;	
 8001286:	e01e      	b.n	80012c6 <USBD_StdEPReq+0xb0>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	885b      	ldrh	r3, [r3, #2]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d10a      	bne.n	80012a6 <USBD_StdEPReq+0x90>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8001290:	7bbb      	ldrb	r3, [r7, #14]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d007      	beq.n	80012a6 <USBD_StdEPReq+0x90>
 8001296:	7bbb      	ldrb	r3, [r7, #14]
 8001298:	2b80      	cmp	r3, #128	; 0x80
 800129a:	d004      	beq.n	80012a6 <USBD_StdEPReq+0x90>
          USBD_LL_StallEP(pdev , ep_addr);
 800129c:	7bbb      	ldrb	r3, [r7, #14]
 800129e:	4619      	mov	r1, r3
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff fceb 	bl	8000c7c <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	6839      	ldr	r1, [r7, #0]
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f000 fb74 	bl	80019a2 <USBD_CtlSendStatus>
      break;
 80012ba:	e005      	b.n	80012c8 <USBD_StdEPReq+0xb2>
      USBD_CtlError(pdev , req);
 80012bc:	6839      	ldr	r1, [r7, #0]
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f000 fb1e 	bl	8001900 <USBD_CtlError>
      break;    
 80012c4:	e000      	b.n	80012c8 <USBD_StdEPReq+0xb2>
      break;	
 80012c6:	bf00      	nop
    break;
 80012c8:	e07c      	b.n	80013c4 <USBD_StdEPReq+0x1ae>
    switch (pdev->dev_state) 
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d002      	beq.n	80012da <USBD_StdEPReq+0xc4>
 80012d4:	2b03      	cmp	r3, #3
 80012d6:	d00c      	beq.n	80012f2 <USBD_StdEPReq+0xdc>
 80012d8:	e024      	b.n	8001324 <USBD_StdEPReq+0x10e>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80012da:	7bbb      	ldrb	r3, [r7, #14]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d026      	beq.n	800132e <USBD_StdEPReq+0x118>
 80012e0:	7bbb      	ldrb	r3, [r7, #14]
 80012e2:	2b80      	cmp	r3, #128	; 0x80
 80012e4:	d023      	beq.n	800132e <USBD_StdEPReq+0x118>
        USBD_LL_StallEP(pdev , ep_addr);
 80012e6:	7bbb      	ldrb	r3, [r7, #14]
 80012e8:	4619      	mov	r1, r3
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff fcc6 	bl	8000c7c <USBD_LL_StallEP>
      break;	
 80012f0:	e01d      	b.n	800132e <USBD_StdEPReq+0x118>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	885b      	ldrh	r3, [r3, #2]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d11b      	bne.n	8001332 <USBD_StdEPReq+0x11c>
        if ((ep_addr & 0x7F) != 0x00) 
 80012fa:	7bbb      	ldrb	r3, [r7, #14]
 80012fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001300:	2b00      	cmp	r3, #0
 8001302:	d00b      	beq.n	800131c <USBD_StdEPReq+0x106>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8001304:	7bbb      	ldrb	r3, [r7, #14]
 8001306:	4619      	mov	r1, r3
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff fcc4 	bl	8000c96 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	6839      	ldr	r1, [r7, #0]
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f000 fb40 	bl	80019a2 <USBD_CtlSendStatus>
      break;
 8001322:	e006      	b.n	8001332 <USBD_StdEPReq+0x11c>
      USBD_CtlError(pdev , req);
 8001324:	6839      	ldr	r1, [r7, #0]
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f000 faea 	bl	8001900 <USBD_CtlError>
      break;    
 800132c:	e002      	b.n	8001334 <USBD_StdEPReq+0x11e>
      break;	
 800132e:	bf00      	nop
 8001330:	e048      	b.n	80013c4 <USBD_StdEPReq+0x1ae>
      break;
 8001332:	bf00      	nop
    break;
 8001334:	e046      	b.n	80013c4 <USBD_StdEPReq+0x1ae>
    switch (pdev->dev_state) 
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800133c:	2b02      	cmp	r3, #2
 800133e:	d002      	beq.n	8001346 <USBD_StdEPReq+0x130>
 8001340:	2b03      	cmp	r3, #3
 8001342:	d00b      	beq.n	800135c <USBD_StdEPReq+0x146>
 8001344:	e036      	b.n	80013b4 <USBD_StdEPReq+0x19e>
      if ((ep_addr & 0x7F) != 0x00) 
 8001346:	7bbb      	ldrb	r3, [r7, #14]
 8001348:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800134c:	2b00      	cmp	r3, #0
 800134e:	d036      	beq.n	80013be <USBD_StdEPReq+0x1a8>
        USBD_LL_StallEP(pdev , ep_addr);
 8001350:	7bbb      	ldrb	r3, [r7, #14]
 8001352:	4619      	mov	r1, r3
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff fc91 	bl	8000c7c <USBD_LL_StallEP>
      break;	
 800135a:	e030      	b.n	80013be <USBD_StdEPReq+0x1a8>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800135c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001360:	2b00      	cmp	r3, #0
 8001362:	da08      	bge.n	8001376 <USBD_StdEPReq+0x160>
 8001364:	7bbb      	ldrb	r3, [r7, #14]
 8001366:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800136a:	3301      	adds	r3, #1
 800136c:	011b      	lsls	r3, r3, #4
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	3304      	adds	r3, #4
 8001374:	e007      	b.n	8001386 <USBD_StdEPReq+0x170>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8001376:	7bbb      	ldrb	r3, [r7, #14]
 8001378:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800137c:	3310      	adds	r3, #16
 800137e:	011b      	lsls	r3, r3, #4
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	4413      	add	r3, r2
 8001384:	3304      	adds	r3, #4
 8001386:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8001388:	7bbb      	ldrb	r3, [r7, #14]
 800138a:	4619      	mov	r1, r3
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff fc8f 	bl	8000cb0 <USBD_LL_IsStallEP>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <USBD_StdEPReq+0x18a>
        pep->status = 0x0001;     
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	2201      	movs	r2, #1
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	e002      	b.n	80013a6 <USBD_StdEPReq+0x190>
        pep->status = 0x0000;  
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 80013a6:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 80013a8:	2202      	movs	r2, #2
 80013aa:	4619      	mov	r1, r3
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 fab8 	bl	8001922 <USBD_CtlSendData>
      break;
 80013b2:	e005      	b.n	80013c0 <USBD_StdEPReq+0x1aa>
      USBD_CtlError(pdev , req);
 80013b4:	6839      	ldr	r1, [r7, #0]
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f000 faa2 	bl	8001900 <USBD_CtlError>
      break;
 80013bc:	e000      	b.n	80013c0 <USBD_StdEPReq+0x1aa>
      break;	
 80013be:	bf00      	nop
    break;
 80013c0:	e000      	b.n	80013c4 <USBD_StdEPReq+0x1ae>
    break;
 80013c2:	bf00      	nop
  }
  return ret;
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	885b      	ldrh	r3, [r3, #2]
 80013de:	0a1b      	lsrs	r3, r3, #8
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	3b01      	subs	r3, #1
 80013e4:	2b06      	cmp	r3, #6
 80013e6:	f200 80c9 	bhi.w	800157c <USBD_GetDescriptor+0x1ac>
 80013ea:	a201      	add	r2, pc, #4	; (adr r2, 80013f0 <USBD_GetDescriptor+0x20>)
 80013ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f0:	0800140d 	.word	0x0800140d
 80013f4:	08001425 	.word	0x08001425
 80013f8:	08001465 	.word	0x08001465
 80013fc:	0800157d 	.word	0x0800157d
 8001400:	0800157d 	.word	0x0800157d
 8001404:	08001529 	.word	0x08001529
 8001408:	0800154f 	.word	0x0800154f
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	7c12      	ldrb	r2, [r2, #16]
 8001418:	f107 010a 	add.w	r1, r7, #10
 800141c:	4610      	mov	r0, r2
 800141e:	4798      	blx	r3
 8001420:	60f8      	str	r0, [r7, #12]
    break;
 8001422:	e0b0      	b.n	8001586 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	7c1b      	ldrb	r3, [r3, #16]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d10d      	bne.n	8001448 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001434:	f107 020a 	add.w	r2, r7, #10
 8001438:	4610      	mov	r0, r2
 800143a:	4798      	blx	r3
 800143c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	3301      	adds	r3, #1
 8001442:	2202      	movs	r2, #2
 8001444:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8001446:	e09e      	b.n	8001586 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800144e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001450:	f107 020a 	add.w	r2, r7, #10
 8001454:	4610      	mov	r0, r2
 8001456:	4798      	blx	r3
 8001458:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	3301      	adds	r3, #1
 800145e:	2202      	movs	r2, #2
 8001460:	701a      	strb	r2, [r3, #0]
    break;
 8001462:	e090      	b.n	8001586 <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	885b      	ldrh	r3, [r3, #2]
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b05      	cmp	r3, #5
 800146c:	d856      	bhi.n	800151c <USBD_GetDescriptor+0x14c>
 800146e:	a201      	add	r2, pc, #4	; (adr r2, 8001474 <USBD_GetDescriptor+0xa4>)
 8001470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001474:	0800148d 	.word	0x0800148d
 8001478:	080014a5 	.word	0x080014a5
 800147c:	080014bd 	.word	0x080014bd
 8001480:	080014d5 	.word	0x080014d5
 8001484:	080014ed 	.word	0x080014ed
 8001488:	08001505 	.word	0x08001505
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	7c12      	ldrb	r2, [r2, #16]
 8001498:	f107 010a 	add.w	r1, r7, #10
 800149c:	4610      	mov	r0, r2
 800149e:	4798      	blx	r3
 80014a0:	60f8      	str	r0, [r7, #12]
      break;
 80014a2:	e040      	b.n	8001526 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	7c12      	ldrb	r2, [r2, #16]
 80014b0:	f107 010a 	add.w	r1, r7, #10
 80014b4:	4610      	mov	r0, r2
 80014b6:	4798      	blx	r3
 80014b8:	60f8      	str	r0, [r7, #12]
      break;
 80014ba:	e034      	b.n	8001526 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	7c12      	ldrb	r2, [r2, #16]
 80014c8:	f107 010a 	add.w	r1, r7, #10
 80014cc:	4610      	mov	r0, r2
 80014ce:	4798      	blx	r3
 80014d0:	60f8      	str	r0, [r7, #12]
      break;
 80014d2:	e028      	b.n	8001526 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80014da:	691b      	ldr	r3, [r3, #16]
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	7c12      	ldrb	r2, [r2, #16]
 80014e0:	f107 010a 	add.w	r1, r7, #10
 80014e4:	4610      	mov	r0, r2
 80014e6:	4798      	blx	r3
 80014e8:	60f8      	str	r0, [r7, #12]
      break;
 80014ea:	e01c      	b.n	8001526 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80014f2:	695b      	ldr	r3, [r3, #20]
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	7c12      	ldrb	r2, [r2, #16]
 80014f8:	f107 010a 	add.w	r1, r7, #10
 80014fc:	4610      	mov	r0, r2
 80014fe:	4798      	blx	r3
 8001500:	60f8      	str	r0, [r7, #12]
      break;
 8001502:	e010      	b.n	8001526 <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	7c12      	ldrb	r2, [r2, #16]
 8001510:	f107 010a 	add.w	r1, r7, #10
 8001514:	4610      	mov	r0, r2
 8001516:	4798      	blx	r3
 8001518:	60f8      	str	r0, [r7, #12]
      break;
 800151a:	e004      	b.n	8001526 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 800151c:	6839      	ldr	r1, [r7, #0]
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 f9ee 	bl	8001900 <USBD_CtlError>
      return;
 8001524:	e044      	b.n	80015b0 <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 8001526:	e02e      	b.n	8001586 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	7c1b      	ldrb	r3, [r3, #16]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d109      	bne.n	8001544 <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001538:	f107 020a 	add.w	r2, r7, #10
 800153c:	4610      	mov	r0, r2
 800153e:	4798      	blx	r3
 8001540:	60f8      	str	r0, [r7, #12]
      break;
 8001542:	e020      	b.n	8001586 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8001544:	6839      	ldr	r1, [r7, #0]
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 f9da 	bl	8001900 <USBD_CtlError>
      return;
 800154c:	e030      	b.n	80015b0 <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	7c1b      	ldrb	r3, [r3, #16]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d10d      	bne.n	8001572 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f107 020a 	add.w	r2, r7, #10
 8001562:	4610      	mov	r0, r2
 8001564:	4798      	blx	r3
 8001566:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	3301      	adds	r3, #1
 800156c:	2207      	movs	r2, #7
 800156e:	701a      	strb	r2, [r3, #0]
      break; 
 8001570:	e009      	b.n	8001586 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8001572:	6839      	ldr	r1, [r7, #0]
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f000 f9c3 	bl	8001900 <USBD_CtlError>
      return;
 800157a:	e019      	b.n	80015b0 <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 800157c:	6839      	ldr	r1, [r7, #0]
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	f000 f9be 	bl	8001900 <USBD_CtlError>
    return;
 8001584:	e014      	b.n	80015b0 <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 8001586:	897b      	ldrh	r3, [r7, #10]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d011      	beq.n	80015b0 <USBD_GetDescriptor+0x1e0>
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	88db      	ldrh	r3, [r3, #6]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d00d      	beq.n	80015b0 <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	88da      	ldrh	r2, [r3, #6]
 8001598:	897b      	ldrh	r3, [r7, #10]
 800159a:	4293      	cmp	r3, r2
 800159c:	bf28      	it	cs
 800159e:	4613      	movcs	r3, r2
 80015a0:	b29b      	uxth	r3, r3
 80015a2:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 80015a4:	897b      	ldrh	r3, [r7, #10]
 80015a6:	461a      	mov	r2, r3
 80015a8:	68f9      	ldr	r1, [r7, #12]
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f000 f9b9 	bl	8001922 <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop

080015b8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	889b      	ldrh	r3, [r3, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d12c      	bne.n	8001624 <USBD_SetAddress+0x6c>
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	88db      	ldrh	r3, [r3, #6]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d128      	bne.n	8001624 <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	885b      	ldrh	r3, [r3, #2]
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015dc:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80015e4:	2b03      	cmp	r3, #3
 80015e6:	d104      	bne.n	80015f2 <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 80015e8:	6839      	ldr	r1, [r7, #0]
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f000 f988 	bl	8001900 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80015f0:	e01d      	b.n	800162e <USBD_SetAddress+0x76>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	7bfa      	ldrb	r2, [r7, #15]
 80015f6:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
 80015fc:	4619      	mov	r1, r3
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff fb63 	bl	8000cca <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f000 f9cc 	bl	80019a2 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 800160a:	7bfb      	ldrb	r3, [r7, #15]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d004      	beq.n	800161a <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2202      	movs	r2, #2
 8001614:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8001618:	e009      	b.n	800162e <USBD_SetAddress+0x76>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2201      	movs	r2, #1
 800161e:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8001622:	e004      	b.n	800162e <USBD_SetAddress+0x76>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 8001624:	6839      	ldr	r1, [r7, #0]
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 f96a 	bl	8001900 <USBD_CtlError>
  } 
}
 800162c:	bf00      	nop
 800162e:	bf00      	nop
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	885b      	ldrh	r3, [r3, #2]
 8001646:	b2da      	uxtb	r2, r3
 8001648:	4b3e      	ldr	r3, [pc, #248]	; (8001744 <USBD_SetConfig+0x10c>)
 800164a:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800164c:	4b3d      	ldr	r3, [pc, #244]	; (8001744 <USBD_SetConfig+0x10c>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d904      	bls.n	800165e <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 8001654:	6839      	ldr	r1, [r7, #0]
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f000 f952 	bl	8001900 <USBD_CtlError>
 800165c:	e06f      	b.n	800173e <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8001664:	2b02      	cmp	r3, #2
 8001666:	d002      	beq.n	800166e <USBD_SetConfig+0x36>
 8001668:	2b03      	cmp	r3, #3
 800166a:	d023      	beq.n	80016b4 <USBD_SetConfig+0x7c>
 800166c:	e062      	b.n	8001734 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 800166e:	4b35      	ldr	r3, [pc, #212]	; (8001744 <USBD_SetConfig+0x10c>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d01a      	beq.n	80016ac <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 8001676:	4b33      	ldr	r3, [pc, #204]	; (8001744 <USBD_SetConfig+0x10c>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	461a      	mov	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2203      	movs	r2, #3
 8001684:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8001688:	4b2e      	ldr	r3, [pc, #184]	; (8001744 <USBD_SetConfig+0x10c>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	4619      	mov	r1, r3
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff fb55 	bl	8000d3e <USBD_SetClassConfig>
 8001694:	4603      	mov	r3, r0
 8001696:	2b02      	cmp	r3, #2
 8001698:	d104      	bne.n	80016a4 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 800169a:	6839      	ldr	r1, [r7, #0]
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f000 f92f 	bl	8001900 <USBD_CtlError>
          return;
 80016a2:	e04c      	b.n	800173e <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f000 f97c 	bl	80019a2 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 80016aa:	e048      	b.n	800173e <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f000 f978 	bl	80019a2 <USBD_CtlSendStatus>
      break;
 80016b2:	e044      	b.n	800173e <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 80016b4:	4b23      	ldr	r3, [pc, #140]	; (8001744 <USBD_SetConfig+0x10c>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d112      	bne.n	80016e2 <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2202      	movs	r2, #2
 80016c0:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 80016c4:	4b1f      	ldr	r3, [pc, #124]	; (8001744 <USBD_SetConfig+0x10c>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	461a      	mov	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 80016ce:	4b1d      	ldr	r3, [pc, #116]	; (8001744 <USBD_SetConfig+0x10c>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	4619      	mov	r1, r3
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff fb51 	bl	8000d7c <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 f961 	bl	80019a2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80016e0:	e02d      	b.n	800173e <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 80016e2:	4b18      	ldr	r3, [pc, #96]	; (8001744 <USBD_SetConfig+0x10c>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	461a      	mov	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d01d      	beq.n	800172c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	4619      	mov	r1, r3
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff fb3f 	bl	8000d7c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80016fe:	4b11      	ldr	r3, [pc, #68]	; (8001744 <USBD_SetConfig+0x10c>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	461a      	mov	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8001708:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <USBD_SetConfig+0x10c>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	4619      	mov	r1, r3
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff fb15 	bl	8000d3e <USBD_SetClassConfig>
 8001714:	4603      	mov	r3, r0
 8001716:	2b02      	cmp	r3, #2
 8001718:	d104      	bne.n	8001724 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 800171a:	6839      	ldr	r1, [r7, #0]
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f000 f8ef 	bl	8001900 <USBD_CtlError>
          return;
 8001722:	e00c      	b.n	800173e <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f000 f93c 	bl	80019a2 <USBD_CtlSendStatus>
      break;
 800172a:	e008      	b.n	800173e <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f000 f938 	bl	80019a2 <USBD_CtlSendStatus>
      break;
 8001732:	e004      	b.n	800173e <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 8001734:	6839      	ldr	r1, [r7, #0]
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f000 f8e2 	bl	8001900 <USBD_CtlError>
      break;
 800173c:	bf00      	nop
    }
  }
}
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000084 	.word	0x20000084

08001748 <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	88db      	ldrh	r3, [r3, #6]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d004      	beq.n	8001764 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 800175a:	6839      	ldr	r1, [r7, #0]
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f000 f8cf 	bl	8001900 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8001762:	e01f      	b.n	80017a4 <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800176a:	2b02      	cmp	r3, #2
 800176c:	d002      	beq.n	8001774 <USBD_GetConfig+0x2c>
 800176e:	2b03      	cmp	r3, #3
 8001770:	d00b      	beq.n	800178a <USBD_GetConfig+0x42>
 8001772:	e012      	b.n	800179a <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 800177e:	2201      	movs	r2, #1
 8001780:	4619      	mov	r1, r3
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 f8cd 	bl	8001922 <USBD_CtlSendData>
      break;
 8001788:	e00c      	b.n	80017a4 <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 800178e:	2201      	movs	r2, #1
 8001790:	4619      	mov	r1, r3
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f000 f8c5 	bl	8001922 <USBD_CtlSendData>
      break;
 8001798:	e004      	b.n	80017a4 <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 800179a:	6839      	ldr	r1, [r7, #0]
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 f8af 	bl	8001900 <USBD_CtlError>
      break;
 80017a2:	bf00      	nop
}
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80017bc:	3b02      	subs	r3, #2
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d815      	bhi.n	80017ee <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2201      	movs	r2, #1
 80017c6:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d005      	beq.n	80017de <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	f043 0202 	orr.w	r2, r3, #2
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 80017e2:	2202      	movs	r2, #2
 80017e4:	4619      	mov	r1, r3
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 f89b 	bl	8001922 <USBD_CtlSendData>
                      2);
    break;
 80017ec:	e004      	b.n	80017f8 <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 80017ee:	6839      	ldr	r1, [r7, #0]
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 f885 	bl	8001900 <USBD_CtlError>
    break;
 80017f6:	bf00      	nop
  }
}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	885b      	ldrh	r3, [r3, #2]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d10d      	bne.n	800182e <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2201      	movs	r2, #1
 8001816:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	6839      	ldr	r1, [r7, #0]
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f000 f8ba 	bl	80019a2 <USBD_CtlSendStatus>
  }

}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
 800183e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8001846:	3b02      	subs	r3, #2
 8001848:	2b01      	cmp	r3, #1
 800184a:	d812      	bhi.n	8001872 <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	885b      	ldrh	r3, [r3, #2]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d113      	bne.n	800187c <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	6839      	ldr	r1, [r7, #0]
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 f899 	bl	80019a2 <USBD_CtlSendStatus>
    }
    break;
 8001870:	e004      	b.n	800187c <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 8001872:	6839      	ldr	r1, [r7, #0]
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f000 f843 	bl	8001900 <USBD_CtlError>
    break;
 800187a:	e000      	b.n	800187e <USBD_ClrFeature+0x48>
    break;
 800187c:	bf00      	nop
  }
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
 800188e:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	781a      	ldrb	r2, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	785a      	ldrb	r2, [r3, #1]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	3302      	adds	r3, #2
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	3303      	adds	r3, #3
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	021b      	lsls	r3, r3, #8
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	4413      	add	r3, r2
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	3304      	adds	r3, #4
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	3305      	adds	r3, #5
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	021b      	lsls	r3, r3, #8
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	4413      	add	r3, r2
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	3306      	adds	r3, #6
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	b29a      	uxth	r2, r3
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	3307      	adds	r3, #7
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	021b      	lsls	r3, r3, #8
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	4413      	add	r3, r2
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	80da      	strh	r2, [r3, #6]

}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 800190a:	2180      	movs	r1, #128	; 0x80
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7ff f9b5 	bl	8000c7c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8001912:	2100      	movs	r1, #0
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff f9b1 	bl	8000c7c <USBD_LL_StallEP>
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b084      	sub	sp, #16
 8001926:	af00      	add	r7, sp, #0
 8001928:	60f8      	str	r0, [r7, #12]
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	4613      	mov	r3, r2
 800192e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2202      	movs	r2, #2
 8001934:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8001938:	88fa      	ldrh	r2, [r7, #6]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 800193e:	88fa      	ldrh	r2, [r7, #6]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8001944:	88fb      	ldrh	r3, [r7, #6]
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	2100      	movs	r1, #0
 800194a:	68f8      	ldr	r0, [r7, #12]
 800194c:	f7ff f9ca 	bl	8000ce4 <USBD_LL_Transmit>
  
  return USBD_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b084      	sub	sp, #16
 800195e:	af00      	add	r7, sp, #0
 8001960:	60f8      	str	r0, [r7, #12]
 8001962:	60b9      	str	r1, [r7, #8]
 8001964:	4613      	mov	r3, r2
 8001966:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8001968:	88fb      	ldrh	r3, [r7, #6]
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	2100      	movs	r1, #0
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f7ff f9b8 	bl	8000ce4 <USBD_LL_Transmit>
  
  return USBD_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b084      	sub	sp, #16
 8001982:	af00      	add	r7, sp, #0
 8001984:	60f8      	str	r0, [r7, #12]
 8001986:	60b9      	str	r1, [r7, #8]
 8001988:	4613      	mov	r3, r2
 800198a:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 800198c:	88fb      	ldrh	r3, [r7, #6]
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	2100      	movs	r1, #0
 8001992:	68f8      	ldr	r0, [r7, #12]
 8001994:	f7ff f9b7 	bl	8000d06 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2204      	movs	r2, #4
 80019ae:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80019b2:	2300      	movs	r3, #0
 80019b4:	2200      	movs	r2, #0
 80019b6:	2100      	movs	r1, #0
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff f993 	bl	8000ce4 <USBD_LL_Transmit>
  
  return USBD_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2205      	movs	r2, #5
 80019d4:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 80019d8:	2300      	movs	r3, #0
 80019da:	2200      	movs	r2, #0
 80019dc:	2100      	movs	r1, #0
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff f991 	bl	8000d06 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
	...

080019f0 <turnOnLed>:
#include "stm32f3xx.h"
#include "leds.h"
#include <math.h>

void turnOnLed(int i)//включение диодов
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	GPIOE->MODER &= ~(1 <<(i*2+1) );  	//Настраиваем режим ножки 01
 80019f8:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <turnOnLed+0x58>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	0052      	lsls	r2, r2, #1
 8001a00:	3201      	adds	r2, #1
 8001a02:	2101      	movs	r1, #1
 8001a04:	fa01 f202 	lsl.w	r2, r1, r2
 8001a08:	43d2      	mvns	r2, r2
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	4a0e      	ldr	r2, [pc, #56]	; (8001a48 <turnOnLed+0x58>)
 8001a0e:	400b      	ands	r3, r1
 8001a10:	6013      	str	r3, [r2, #0]
	GPIOE->MODER |= (1 << i*2);
 8001a12:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <turnOnLed+0x58>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	0052      	lsls	r2, r2, #1
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a20:	4611      	mov	r1, r2
 8001a22:	4a09      	ldr	r2, [pc, #36]	; (8001a48 <turnOnLed+0x58>)
 8001a24:	430b      	orrs	r3, r1
 8001a26:	6013      	str	r3, [r2, #0]
	GPIOE->ODR |= (1 << i);//включили
 8001a28:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <turnOnLed+0x58>)
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	fa01 f202 	lsl.w	r2, r1, r2
 8001a34:	4611      	mov	r1, r2
 8001a36:	4a04      	ldr	r2, [pc, #16]	; (8001a48 <turnOnLed+0x58>)
 8001a38:	430b      	orrs	r3, r1
 8001a3a:	6153      	str	r3, [r2, #20]
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	48001000 	.word	0x48001000

08001a4c <turnOffLed>:

void turnOffLed(int i)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
	GPIOE->MODER &= ~(1 << (i*2+1) );  	//Настраиваем режим ножки 01
 8001a54:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <turnOffLed+0x5c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	0052      	lsls	r2, r2, #1
 8001a5c:	3201      	adds	r2, #1
 8001a5e:	2101      	movs	r1, #1
 8001a60:	fa01 f202 	lsl.w	r2, r1, r2
 8001a64:	43d2      	mvns	r2, r2
 8001a66:	4611      	mov	r1, r2
 8001a68:	4a0f      	ldr	r2, [pc, #60]	; (8001aa8 <turnOffLed+0x5c>)
 8001a6a:	400b      	ands	r3, r1
 8001a6c:	6013      	str	r3, [r2, #0]
	GPIOE->MODER |= (1 << i*2);
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <turnOffLed+0x5c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	0052      	lsls	r2, r2, #1
 8001a76:	2101      	movs	r1, #1
 8001a78:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7c:	4611      	mov	r1, r2
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <turnOffLed+0x5c>)
 8001a80:	430b      	orrs	r3, r1
 8001a82:	6013      	str	r3, [r2, #0]
	GPIOE->ODR &= ~(1 << i);//выключили
 8001a84:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <turnOffLed+0x5c>)
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	2101      	movs	r1, #1
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a90:	43d2      	mvns	r2, r2
 8001a92:	4611      	mov	r1, r2
 8001a94:	4a04      	ldr	r2, [pc, #16]	; (8001aa8 <turnOffLed+0x5c>)
 8001a96:	400b      	ands	r3, r1
 8001a98:	6153      	str	r3, [r2, #20]
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	48001000 	.word	0x48001000

08001aac <turnOffAllLeds>:

void turnOffAllLeds()
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
	//выключаем отдельно каждый диод
	turnOffLed(9); //LD3
 8001ab0:	2009      	movs	r0, #9
 8001ab2:	f7ff ffcb 	bl	8001a4c <turnOffLed>
	turnOffLed(8); //LD4
 8001ab6:	2008      	movs	r0, #8
 8001ab8:	f7ff ffc8 	bl	8001a4c <turnOffLed>
	turnOffLed(10); //LD5
 8001abc:	200a      	movs	r0, #10
 8001abe:	f7ff ffc5 	bl	8001a4c <turnOffLed>
	turnOffLed(15); //LD6
 8001ac2:	200f      	movs	r0, #15
 8001ac4:	f7ff ffc2 	bl	8001a4c <turnOffLed>
	turnOffLed(11); //LD7
 8001ac8:	200b      	movs	r0, #11
 8001aca:	f7ff ffbf 	bl	8001a4c <turnOffLed>
	turnOffLed(14); //LD8
 8001ace:	200e      	movs	r0, #14
 8001ad0:	f7ff ffbc 	bl	8001a4c <turnOffLed>
	turnOffLed(12); //LD9
 8001ad4:	200c      	movs	r0, #12
 8001ad6:	f7ff ffb9 	bl	8001a4c <turnOffLed>
	turnOffLed(13); //LD10
 8001ada:	200d      	movs	r0, #13
 8001adc:	f7ff ffb6 	bl	8001a4c <turnOffLed>
}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <displayLevel>:
	else if(ugol > -157.5 && ugol <= -112.5)
		turnOnLed(LD9);
}

void displayLevel(short ax, short ay)
{
 8001ae4:	b5b0      	push	{r4, r5, r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	460a      	mov	r2, r1
 8001aee:	80fb      	strh	r3, [r7, #6]
 8001af0:	4613      	mov	r3, r2
 8001af2:	80bb      	strh	r3, [r7, #4]
	turnOffAllLeds();//выключаем все диоды
 8001af4:	f7ff ffda 	bl	8001aac <turnOffAllLeds>
	if(abs(ax) < 900 && abs(ay) < 900)//если очень маленькие значения, не обращать на них внимания
 8001af8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	bfb8      	it	lt
 8001b00:	425b      	neglt	r3, r3
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001b08:	d209      	bcs.n	8001b1e <displayLevel+0x3a>
 8001b0a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	bfb8      	it	lt
 8001b12:	425b      	neglt	r3, r3
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001b1a:	f0c0 80eb 	bcc.w	8001cf4 <displayLevel+0x210>
		return;

	float ugol = atan2(ay, ax)*57;//перевели в градусы
 8001b1e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe fcfe 	bl	8000524 <__aeabi_i2d>
 8001b28:	4604      	mov	r4, r0
 8001b2a:	460d      	mov	r5, r1
 8001b2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7fe fcf7 	bl	8000524 <__aeabi_i2d>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	ec43 2b11 	vmov	d1, r2, r3
 8001b3e:	ec45 4b10 	vmov	d0, r4, r5
 8001b42:	f003 fe8f 	bl	8005864 <atan2>
 8001b46:	ec51 0b10 	vmov	r0, r1, d0
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	4b6b      	ldr	r3, [pc, #428]	; (8001cfc <displayLevel+0x218>)
 8001b50:	f7fe fd52 	bl	80005f8 <__aeabi_dmul>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4610      	mov	r0, r2
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	f7fe ffe6 	bl	8000b2c <__aeabi_d2f>
 8001b60:	4603      	mov	r3, r0
 8001b62:	60fb      	str	r3, [r7, #12]

	if(ugol > -22.5 && ugol <= 22.5)
 8001b64:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b68:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8001d00 <displayLevel+0x21c>
 8001b6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b74:	dd0f      	ble.n	8001b96 <displayLevel+0xb2>
 8001b76:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b7a:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8001d04 <displayLevel+0x220>
 8001b7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b86:	d806      	bhi.n	8001b96 <displayLevel+0xb2>
	{
		turnOnLed(LD6);
 8001b88:	200f      	movs	r0, #15
 8001b8a:	f7ff ff31 	bl	80019f0 <turnOnLed>
		turnOnLed(LD7);
 8001b8e:	200b      	movs	r0, #11
 8001b90:	f7ff ff2e 	bl	80019f0 <turnOnLed>
 8001b94:	e0af      	b.n	8001cf6 <displayLevel+0x212>
	}
	else if(ugol > 22.5 && ugol <= 67.5)
 8001b96:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b9a:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001d04 <displayLevel+0x220>
 8001b9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba6:	dd0f      	ble.n	8001bc8 <displayLevel+0xe4>
 8001ba8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bac:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001d08 <displayLevel+0x224>
 8001bb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb8:	d806      	bhi.n	8001bc8 <displayLevel+0xe4>
	{
		turnOnLed(LD5);
 8001bba:	200a      	movs	r0, #10
 8001bbc:	f7ff ff18 	bl	80019f0 <turnOnLed>
		turnOnLed(LD8);
 8001bc0:	200e      	movs	r0, #14
 8001bc2:	f7ff ff15 	bl	80019f0 <turnOnLed>
 8001bc6:	e096      	b.n	8001cf6 <displayLevel+0x212>
	}
	else if(ugol > 67.5 && ugol <= 112.5)
 8001bc8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bcc:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8001d08 <displayLevel+0x224>
 8001bd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd8:	dd0f      	ble.n	8001bfa <displayLevel+0x116>
 8001bda:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bde:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8001d0c <displayLevel+0x228>
 8001be2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bea:	d806      	bhi.n	8001bfa <displayLevel+0x116>
	{
		turnOnLed(LD3);
 8001bec:	2009      	movs	r0, #9
 8001bee:	f7ff feff 	bl	80019f0 <turnOnLed>
		turnOnLed(LD10);
 8001bf2:	200d      	movs	r0, #13
 8001bf4:	f7ff fefc 	bl	80019f0 <turnOnLed>
 8001bf8:	e07d      	b.n	8001cf6 <displayLevel+0x212>
	}
	else if(ugol > 112.5 && ugol <= 157.5)
 8001bfa:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bfe:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8001d0c <displayLevel+0x228>
 8001c02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0a:	dd0f      	ble.n	8001c2c <displayLevel+0x148>
 8001c0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c10:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001d10 <displayLevel+0x22c>
 8001c14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1c:	d806      	bhi.n	8001c2c <displayLevel+0x148>
	{
		turnOnLed(LD9);
 8001c1e:	200c      	movs	r0, #12
 8001c20:	f7ff fee6 	bl	80019f0 <turnOnLed>
		turnOnLed(LD4);
 8001c24:	2008      	movs	r0, #8
 8001c26:	f7ff fee3 	bl	80019f0 <turnOnLed>
 8001c2a:	e064      	b.n	8001cf6 <displayLevel+0x212>
	}
	else if(ugol > 157.5 || ugol <= -157.5)
 8001c2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c30:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001d10 <displayLevel+0x22c>
 8001c34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3c:	dc08      	bgt.n	8001c50 <displayLevel+0x16c>
 8001c3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c42:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001d14 <displayLevel+0x230>
 8001c46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4e:	d806      	bhi.n	8001c5e <displayLevel+0x17a>
	{
		turnOnLed(LD6);
 8001c50:	200f      	movs	r0, #15
 8001c52:	f7ff fecd 	bl	80019f0 <turnOnLed>
		turnOnLed(LD7);
 8001c56:	200b      	movs	r0, #11
 8001c58:	f7ff feca 	bl	80019f0 <turnOnLed>
 8001c5c:	e04b      	b.n	8001cf6 <displayLevel+0x212>
	}
	else if(ugol > -67.5 && ugol <= -22.5)
 8001c5e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c62:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001d18 <displayLevel+0x234>
 8001c66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6e:	dd0f      	ble.n	8001c90 <displayLevel+0x1ac>
 8001c70:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c74:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001d00 <displayLevel+0x21c>
 8001c78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c80:	d806      	bhi.n	8001c90 <displayLevel+0x1ac>
	{
		turnOnLed(LD9);
 8001c82:	200c      	movs	r0, #12
 8001c84:	f7ff feb4 	bl	80019f0 <turnOnLed>
		turnOnLed(LD4);
 8001c88:	2008      	movs	r0, #8
 8001c8a:	f7ff feb1 	bl	80019f0 <turnOnLed>
 8001c8e:	e032      	b.n	8001cf6 <displayLevel+0x212>
	}
	else if(ugol > -112.5 && ugol <= -67.5)
 8001c90:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c94:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001d1c <displayLevel+0x238>
 8001c98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ca0:	dd0f      	ble.n	8001cc2 <displayLevel+0x1de>
 8001ca2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ca6:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001d18 <displayLevel+0x234>
 8001caa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb2:	d806      	bhi.n	8001cc2 <displayLevel+0x1de>
	{
		turnOnLed(LD3);
 8001cb4:	2009      	movs	r0, #9
 8001cb6:	f7ff fe9b 	bl	80019f0 <turnOnLed>
		turnOnLed(LD10);
 8001cba:	200d      	movs	r0, #13
 8001cbc:	f7ff fe98 	bl	80019f0 <turnOnLed>
 8001cc0:	e019      	b.n	8001cf6 <displayLevel+0x212>
	}
	else if(ugol > -157.5 && ugol <= -112.5)
 8001cc2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cc6:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001d14 <displayLevel+0x230>
 8001cca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd2:	dd10      	ble.n	8001cf6 <displayLevel+0x212>
 8001cd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cd8:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001d1c <displayLevel+0x238>
 8001cdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce4:	d807      	bhi.n	8001cf6 <displayLevel+0x212>
	{
		turnOnLed(LD5);
 8001ce6:	200a      	movs	r0, #10
 8001ce8:	f7ff fe82 	bl	80019f0 <turnOnLed>
		turnOnLed(LD8);
 8001cec:	200e      	movs	r0, #14
 8001cee:	f7ff fe7f 	bl	80019f0 <turnOnLed>
 8001cf2:	e000      	b.n	8001cf6 <displayLevel+0x212>
		return;
 8001cf4:	bf00      	nop
	}
}
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bdb0      	pop	{r4, r5, r7, pc}
 8001cfc:	404c8000 	.word	0x404c8000
 8001d00:	c1b40000 	.word	0xc1b40000
 8001d04:	41b40000 	.word	0x41b40000
 8001d08:	42870000 	.word	0x42870000
 8001d0c:	42e10000 	.word	0x42e10000
 8001d10:	431d8000 	.word	0x431d8000
 8001d14:	c31d8000 	.word	0xc31d8000
 8001d18:	c2870000 	.word	0xc2870000
 8001d1c:	c2e10000 	.word	0xc2e10000

08001d20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b0ae      	sub	sp, #184	; 0xb8
 8001d24:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d26:	f000 fc77 	bl	8002618 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d2a:	f000 f872 	bl	8001e12 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

  setupFlash();
 8001d2e:	f000 f95f 	bl	8001ff0 <setupFlash>
  setupPll();
 8001d32:	f000 f973 	bl	800201c <setupPll>
  powerOn();
 8001d36:	f000 f939 	bl	8001fac <powerOn>
//  setupLight();
  setupI2C1();
 8001d3a:	f000 fa0b 	bl	8002154 <setupI2C1>
  setupSpi1();
 8001d3e:	f000 f9c1 	bl	80020c4 <setupSpi1>

  setupGyroscope();
 8001d42:	f000 fa4d 	bl	80021e0 <setupGyroscope>
  packet_t buf;


  char data[10]; //массив с переданными или полученными данными
  //настраиваем блок акселерометров
  data[0] = 0x20; //обращаемся к регистру CTRL_REG1_A по адресу 20h//запоминаем адрес регистра
 8001d46:	2320      	movs	r3, #32
 8001d48:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
  data[1] = 0x57; //заполняем регистр//записываем данные
 8001d4c:	2357      	movs	r3, #87	; 0x57
 8001d4e:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
  writeAcc(0x19, data, 2, 1);//подключаемся к акселерометру, настраиваем параметры обмена информацией
 8001d52:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8001d56:	2301      	movs	r3, #1
 8001d58:	2202      	movs	r2, #2
 8001d5a:	2019      	movs	r0, #25
 8001d5c:	f000 f89a 	bl	8001e94 <writeAcc>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
//	  clock();
	  if(GPIOE->IDR & 2)
 8001d60:	4b26      	ldr	r3, [pc, #152]	; (8001dfc <main+0xdc>)
 8001d62:	691b      	ldr	r3, [r3, #16]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d0f9      	beq.n	8001d60 <main+0x40>
	  {

	  		 // CDC_Transmit_FS("sss", 3);
	  //		  buf.t = 44 - readGyroscopeRegister(0x26);
//		  readGyroscopeData(&buf.Gx, &buf.Gy, &buf.Gz);
	      getAcc(accData);
 8001d6c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001d70:	4618      	mov	r0, r3
 8001d72:	f000 f905 	bl	8001f80 <getAcc>
	      ax = (accData[1] << 8) + accData[0];
 8001d76:	f897 30a1 	ldrb.w	r3, [r7, #161]	; 0xa1
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	021b      	lsls	r3, r3, #8
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	4413      	add	r3, r2
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
	      ay = (accData[3] << 8) + accData[2];
 8001d8e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	021b      	lsls	r3, r3, #8
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	f897 30a2 	ldrb.w	r3, [r7, #162]	; 0xa2
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	4413      	add	r3, r2
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	f8a7 30ac 	strh.w	r3, [r7, #172]	; 0xac
	      az = (accData[5] << 8) + accData[4];
 8001da6:	f897 30a5 	ldrb.w	r3, [r7, #165]	; 0xa5
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	021b      	lsls	r3, r3, #8
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	4413      	add	r3, r2
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa

//	      displayDown(ax, ay);
	      displayLevel(ax, ay);
 8001dbe:	f9b7 20ac 	ldrsh.w	r2, [r7, #172]	; 0xac
 8001dc2:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 8001dc6:	4611      	mov	r1, r2
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff fe8b 	bl	8001ae4 <displayLevel>
//	      sprintf(buffer, "sync,%d,%d,%d,%d,%d,%d\r\n", buf.Gx, buf.Gy, buf.Gz, ax, ay, az);
	      sprintf(buffer, "sync,%d,%d,%d\r\n", ax, ay, az);
 8001dce:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 8001dd2:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 8001dd6:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 8001dda:	1d38      	adds	r0, r7, #4
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	460b      	mov	r3, r1
 8001de0:	4907      	ldr	r1, [pc, #28]	; (8001e00 <main+0xe0>)
 8001de2:	f003 f911 	bl	8005008 <siprintf>
	  	  CDC_Transmit_FS(buffer, strlen(buffer));
 8001de6:	1d3b      	adds	r3, r7, #4
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7fe f9f1 	bl	80001d0 <strlen>
 8001dee:	4602      	mov	r2, r0
 8001df0:	1d3b      	adds	r3, r7, #4
 8001df2:	4611      	mov	r1, r2
 8001df4:	4618      	mov	r0, r3
 8001df6:	f000 fb1f 	bl	8002438 <CDC_Transmit_FS>
	  if(GPIOE->IDR & 2)
 8001dfa:	e7b1      	b.n	8001d60 <main+0x40>
 8001dfc:	48001000 	.word	0x48001000
 8001e00:	08005d70 	.word	0x08005d70

08001e04 <myTimerInterruptHandler>:
  }
  /* USER CODE END 3 */
}

void myTimerInterruptHandler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
//	SwitchLed(13);
//	TIM1->SR &= ~1;
}
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b090      	sub	sp, #64	; 0x40
 8001e16:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e18:	f107 0318 	add.w	r3, r7, #24
 8001e1c:	2228      	movs	r2, #40	; 0x28
 8001e1e:	2100      	movs	r1, #0
 8001e20:	4618      	mov	r0, r3
 8001e22:	f003 f8e9 	bl	8004ff8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e26:	1d3b      	adds	r3, r7, #4
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e34:	2302      	movs	r3, #2
 8001e36:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e3c:	2310      	movs	r3, #16
 8001e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001e40:	2300      	movs	r3, #0
 8001e42:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e44:	f107 0318 	add.w	r3, r7, #24
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f001 fbc9 	bl	80035e0 <HAL_RCC_OscConfig>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001e54:	f000 f818 	bl	8001e88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e58:	230f      	movs	r3, #15
 8001e5a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e60:	2300      	movs	r3, #0
 8001e62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e64:	2300      	movs	r3, #0
 8001e66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e6c:	1d3b      	adds	r3, r7, #4
 8001e6e:	2100      	movs	r1, #0
 8001e70:	4618      	mov	r0, r3
 8001e72:	f002 fa9b 	bl	80043ac <HAL_RCC_ClockConfig>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001e7c:	f000 f804 	bl	8001e88 <Error_Handler>
  }
}
 8001e80:	bf00      	nop
 8001e82:	3740      	adds	r7, #64	; 0x40
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e8c:	b672      	cpsid	i
}
 8001e8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e90:	e7fe      	b.n	8001e90 <Error_Handler+0x8>
	...

08001e94 <writeAcc>:
		flag++;
	}
}

void writeAcc(char address, char* data, char nbytes, char stop)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6039      	str	r1, [r7, #0]
 8001e9c:	4611      	mov	r1, r2
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	71fb      	strb	r3, [r7, #7]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	71bb      	strb	r3, [r7, #6]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	717b      	strb	r3, [r7, #5]
        I2C1->CR2 = ((address << 1) | (nbytes << 16) | (stop << 25));
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	005a      	lsls	r2, r3, #1
 8001eb0:	79bb      	ldrb	r3, [r7, #6]
 8001eb2:	041b      	lsls	r3, r3, #16
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	797b      	ldrb	r3, [r7, #5]
 8001eb8:	065b      	lsls	r3, r3, #25
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <writeAcc+0x74>)
 8001ebe:	605a      	str	r2, [r3, #4]
        I2C1->CR2 |= (1 << 13);	//������ ��������
 8001ec0:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <writeAcc+0x74>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	4a10      	ldr	r2, [pc, #64]	; (8001f08 <writeAcc+0x74>)
 8001ec6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001eca:	6053      	str	r3, [r2, #4]
        int i=0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60fb      	str	r3, [r7, #12]
        //���� � ���������
  while (i < nbytes)
 8001ed0:	e00f      	b.n	8001ef2 <writeAcc+0x5e>
  {
    while((I2C1->ISR & (1 << 1))==0)//���� 1(����������) � ������� �� �����
 8001ed2:	bf00      	nop
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <writeAcc+0x74>)
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0f9      	beq.n	8001ed4 <writeAcc+0x40>
    {
    }
    I2C1->TXDR = data[i];//��������� ������� I2C1_TXDR
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	781a      	ldrb	r2, [r3, #0]
 8001ee8:	4b07      	ldr	r3, [pc, #28]	; (8001f08 <writeAcc+0x74>)
 8001eea:	629a      	str	r2, [r3, #40]	; 0x28
    i++;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	60fb      	str	r3, [r7, #12]
  while (i < nbytes)
 8001ef2:	79bb      	ldrb	r3, [r7, #6]
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	dbeb      	blt.n	8001ed2 <writeAcc+0x3e>
  }
}
 8001efa:	bf00      	nop
 8001efc:	bf00      	nop
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	40005400 	.word	0x40005400

08001f0c <readAcc>:

void readAcc(char address, char* data, char nbytes)//��� 18
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	6039      	str	r1, [r7, #0]
 8001f16:	71fb      	strb	r3, [r7, #7]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	71bb      	strb	r3, [r7, #6]
        I2C1->CR2 = ((address << 1) | (nbytes << 16) | (1 << 25) | (1 << 10));
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	005a      	lsls	r2, r3, #1
 8001f20:	79bb      	ldrb	r3, [r7, #6]
 8001f22:	041b      	lsls	r3, r3, #16
 8001f24:	4313      	orrs	r3, r2
 8001f26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f2e:	4a13      	ldr	r2, [pc, #76]	; (8001f7c <readAcc+0x70>)
 8001f30:	6053      	str	r3, [r2, #4]
        I2C1->CR2 |= (1 << 13);//������ ��������
 8001f32:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <readAcc+0x70>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	4a11      	ldr	r2, [pc, #68]	; (8001f7c <readAcc+0x70>)
 8001f38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f3c:	6053      	str	r3, [r2, #4]
        int i = 0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
  while (i < nbytes)
 8001f42:	e010      	b.n	8001f66 <readAcc+0x5a>
  {
    while((I2C1->ISR & (1 << 2))==0)//���� 1
 8001f44:	bf00      	nop
 8001f46:	4b0d      	ldr	r3, [pc, #52]	; (8001f7c <readAcc+0x70>)
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	f003 0304 	and.w	r3, r3, #4
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f9      	beq.n	8001f46 <readAcc+0x3a>
    {
    }
    data[i] = I2C1->RXDR;//���������� ������ � ������ �� �������� I2C1_RXDR
 8001f52:	4b0a      	ldr	r3, [pc, #40]	; (8001f7c <readAcc+0x70>)
 8001f54:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	b2ca      	uxtb	r2, r1
 8001f5e:	701a      	strb	r2, [r3, #0]
    i++;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	3301      	adds	r3, #1
 8001f64:	60fb      	str	r3, [r7, #12]
  while (i < nbytes)
 8001f66:	79bb      	ldrb	r3, [r7, #6]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	dbea      	blt.n	8001f44 <readAcc+0x38>
  }
}
 8001f6e:	bf00      	nop
 8001f70:	bf00      	nop
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	40005400 	.word	0x40005400

08001f80 <getAcc>:

void getAcc(char* data)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
        char axyz = 0xA8;//����� �������� OUT_X_L_A
 8001f88:	23a8      	movs	r3, #168	; 0xa8
 8001f8a:	73fb      	strb	r3, [r7, #15]
        writeAcc(0x19, &axyz, 1, 0);//���������� ����� �����, ������ ���� �������� ������
 8001f8c:	f107 010f 	add.w	r1, r7, #15
 8001f90:	2300      	movs	r3, #0
 8001f92:	2201      	movs	r2, #1
 8001f94:	2019      	movs	r0, #25
 8001f96:	f7ff ff7d 	bl	8001e94 <writeAcc>

        readAcc(0x19, data, 6); //�������� ���� ������ � �������������
 8001f9a:	2206      	movs	r2, #6
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	2019      	movs	r0, #25
 8001fa0:	f7ff ffb4 	bl	8001f0c <readAcc>
}
 8001fa4:	bf00      	nop
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <powerOn>:


void powerOn()
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= (1 << 12);	//Enable SPI1
 8001fb0:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <powerOn+0x40>)
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	4a0d      	ldr	r2, [pc, #52]	; (8001fec <powerOn+0x40>)
 8001fb6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fba:	6193      	str	r3, [r2, #24]
	RCC->APB1ENR |= (1 << 21);	//Enable I2C
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <powerOn+0x40>)
 8001fbe:	69db      	ldr	r3, [r3, #28]
 8001fc0:	4a0a      	ldr	r2, [pc, #40]	; (8001fec <powerOn+0x40>)
 8001fc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fc6:	61d3      	str	r3, [r2, #28]
	RCC->AHBENR |= ((1 << 17) | (1 << 21) | (1 << 18)); //Enable GPIOA & GPIOE & GPIOB
 8001fc8:	4b08      	ldr	r3, [pc, #32]	; (8001fec <powerOn+0x40>)
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	4a07      	ldr	r2, [pc, #28]	; (8001fec <powerOn+0x40>)
 8001fce:	f443 1318 	orr.w	r3, r3, #2490368	; 0x260000
 8001fd2:	6153      	str	r3, [r2, #20]
	RCC->APB2ENR |= (1 << 11); // Подали питание на таймер
 8001fd4:	4b05      	ldr	r3, [pc, #20]	; (8001fec <powerOn+0x40>)
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	4a04      	ldr	r2, [pc, #16]	; (8001fec <powerOn+0x40>)
 8001fda:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fde:	6193      	str	r3, [r2, #24]
}
 8001fe0:	bf00      	nop
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	40021000 	.word	0x40021000

08001ff0 <setupFlash>:

void setupFlash()
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
	FLASH->ACR &= ~7;	//��������� flash-������ �� ������ �� ������� 72 ���!!!!!!!!!	<--------
 8001ff4:	4b08      	ldr	r3, [pc, #32]	; (8002018 <setupFlash+0x28>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a07      	ldr	r2, [pc, #28]	; (8002018 <setupFlash+0x28>)
 8001ffa:	f023 0307 	bic.w	r3, r3, #7
 8001ffe:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= 2;	//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!	<---------------
 8002000:	4b05      	ldr	r3, [pc, #20]	; (8002018 <setupFlash+0x28>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a04      	ldr	r2, [pc, #16]	; (8002018 <setupFlash+0x28>)
 8002006:	f043 0302 	orr.w	r3, r3, #2
 800200a:	6013      	str	r3, [r2, #0]
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	40022000 	.word	0x40022000

0800201c <setupPll>:

void setupPll()
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
	RCC->CR |= (5 << 16);	//HSE ON + HSE Bypass
 8002020:	4b27      	ldr	r3, [pc, #156]	; (80020c0 <setupPll+0xa4>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a26      	ldr	r2, [pc, #152]	; (80020c0 <setupPll+0xa4>)
 8002026:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 800202a:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & (1 << 17)))
 800202c:	bf00      	nop
 800202e:	4b24      	ldr	r3, [pc, #144]	; (80020c0 <setupPll+0xa4>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0f9      	beq.n	800202e <setupPll+0x12>
	{
	}


	RCC->CR &= ~(1 << 24);	//Disable PLL
 800203a:	4b21      	ldr	r3, [pc, #132]	; (80020c0 <setupPll+0xa4>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a20      	ldr	r2, [pc, #128]	; (80020c0 <setupPll+0xa4>)
 8002040:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002044:	6013      	str	r3, [r2, #0]
	while(RCC->CR & (1 << 25))
 8002046:	bf00      	nop
 8002048:	4b1d      	ldr	r3, [pc, #116]	; (80020c0 <setupPll+0xa4>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1f9      	bne.n	8002048 <setupPll+0x2c>
	{
	}

	//change a desire parameter
	RCC->CFGR |= (1 << 16);	//������� HSI/2 � �������� ��������� ��� PLL
 8002054:	4b1a      	ldr	r3, [pc, #104]	; (80020c0 <setupPll+0xa4>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	4a19      	ldr	r2, [pc, #100]	; (80020c0 <setupPll+0xa4>)
 800205a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800205e:	6053      	str	r3, [r2, #4]
	RCC->CFGR &= ~(0xF << 18);
 8002060:	4b17      	ldr	r3, [pc, #92]	; (80020c0 <setupPll+0xa4>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	4a16      	ldr	r2, [pc, #88]	; (80020c0 <setupPll+0xa4>)
 8002066:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 800206a:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (0x7 << 18); //���������� ������������� �� x16
 800206c:	4b14      	ldr	r3, [pc, #80]	; (80020c0 <setupPll+0xa4>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	4a13      	ldr	r2, [pc, #76]	; (80020c0 <setupPll+0xa4>)
 8002072:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8002076:	6053      	str	r3, [r2, #4]
	RCC->CFGR2 &= ~(0xF);
 8002078:	4b11      	ldr	r3, [pc, #68]	; (80020c0 <setupPll+0xa4>)
 800207a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207c:	4a10      	ldr	r2, [pc, #64]	; (80020c0 <setupPll+0xa4>)
 800207e:	f023 030f 	bic.w	r3, r3, #15
 8002082:	62d3      	str	r3, [r2, #44]	; 0x2c


	RCC->CR |= (1 << 24);//Enable PLL again
 8002084:	4b0e      	ldr	r3, [pc, #56]	; (80020c0 <setupPll+0xa4>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a0d      	ldr	r2, [pc, #52]	; (80020c0 <setupPll+0xa4>)
 800208a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800208e:	6013      	str	r3, [r2, #0]
	while( !(RCC->CR & (1 << 25)))
 8002090:	bf00      	nop
 8002092:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <setupPll+0xa4>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0f9      	beq.n	8002092 <setupPll+0x76>
	{
	}


	RCC->CFGR &= ~3;	// ����������� ���� �� PLL
 800209e:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <setupPll+0xa4>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	4a07      	ldr	r2, [pc, #28]	; (80020c0 <setupPll+0xa4>)
 80020a4:	f023 0303 	bic.w	r3, r3, #3
 80020a8:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= 2;
 80020aa:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <setupPll+0xa4>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	4a04      	ldr	r2, [pc, #16]	; (80020c0 <setupPll+0xa4>)
 80020b0:	f043 0302 	orr.w	r3, r3, #2
 80020b4:	6053      	str	r3, [r2, #4]
}
 80020b6:	bf00      	nop
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	40021000 	.word	0x40021000

080020c4 <setupSpi1>:
	TIM1->PSC = 999;
	TIM1->CR1 |= 1; 	//������ �������
}

void setupSpi1()
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
	GPIOA->MODER &= ~(63 << 10); //�������� �� ��� ���� � ���� ��������
 80020c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80020d2:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 80020d6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= ((1 << 11) | (1 << 13) | (1 << 15)); // ���������� ����� alternate function
 80020d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80020e2:	f443 4328 	orr.w	r3, r3, #43008	; 0xa800
 80020e6:	6013      	str	r3, [r2, #0]

	GPIOE->MODER &= ~(3 << 6);//�������� �� ��� ���� � ���� ��������
 80020e8:	4b18      	ldr	r3, [pc, #96]	; (800214c <setupSpi1+0x88>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a17      	ldr	r2, [pc, #92]	; (800214c <setupSpi1+0x88>)
 80020ee:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80020f2:	6013      	str	r3, [r2, #0]
	GPIOE->MODER |= (1 << 6); // ���������� ����� out
 80020f4:	4b15      	ldr	r3, [pc, #84]	; (800214c <setupSpi1+0x88>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a14      	ldr	r2, [pc, #80]	; (800214c <setupSpi1+0x88>)
 80020fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020fe:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] &= ~((0xF << 20) | (0xF << 24) | (0xF << 28));	//��������� ������� ����������� alternate function ��� ��� PA5, PA6, PA7
 8002100:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800210a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800210e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (0x5 << 20) | (0x5 << 24) | (0x5 << 28);	//���������� AF5 ��� alternate function
 8002110:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800211a:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 800211e:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8002122:	6213      	str	r3, [r2, #32]
	SPI1->CR1 |= (3 << 3);
	SPI1->CR1 |= (1 << 2); //Set master

	SPI1->CR1 |= (1 << 6);	//SPI1 enable*/

	SPI1->CR2 = 0x1700;//��������� Control Register 2
 8002124:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <setupSpi1+0x8c>)
 8002126:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 800212a:	605a      	str	r2, [r3, #4]
	SPI1->CR1 = 0x357;//��������� Control Register 1
 800212c:	4b08      	ldr	r3, [pc, #32]	; (8002150 <setupSpi1+0x8c>)
 800212e:	f240 3257 	movw	r2, #855	; 0x357
 8002132:	601a      	str	r2, [r3, #0]
	GPIOE->ODR |= (1 << 3);//������� ��� ��������
 8002134:	4b05      	ldr	r3, [pc, #20]	; (800214c <setupSpi1+0x88>)
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	4a04      	ldr	r2, [pc, #16]	; (800214c <setupSpi1+0x88>)
 800213a:	f043 0308 	orr.w	r3, r3, #8
 800213e:	6153      	str	r3, [r2, #20]
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	48001000 	.word	0x48001000
 8002150:	40013000 	.word	0x40013000

08002154 <setupI2C1>:

void setupI2C1()
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0

	GPIOB->MODER &= ~(0xF << 12); //�������� �� ��� ���� � ���� ��������
 8002158:	4b1d      	ldr	r3, [pc, #116]	; (80021d0 <setupI2C1+0x7c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a1c      	ldr	r2, [pc, #112]	; (80021d0 <setupI2C1+0x7c>)
 800215e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002162:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= ((1 << 13) | (1 << 15)); // ���������� ����� alternate function
 8002164:	4b1a      	ldr	r3, [pc, #104]	; (80021d0 <setupI2C1+0x7c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a19      	ldr	r2, [pc, #100]	; (80021d0 <setupI2C1+0x7c>)
 800216a:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 800216e:	6013      	str	r3, [r2, #0]

	GPIOE->MODER &= ~(3 << 4);// ���������� ����� in
 8002170:	4b18      	ldr	r3, [pc, #96]	; (80021d4 <setupI2C1+0x80>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a17      	ldr	r2, [pc, #92]	; (80021d4 <setupI2C1+0x80>)
 8002176:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800217a:	6013      	str	r3, [r2, #0]

	GPIOB->AFR[0] &= ~((0xF << 24) | (0xF << 28));	//��������� ������� ����������� alternate function ��� ��� PB6, PB7
 800217c:	4b14      	ldr	r3, [pc, #80]	; (80021d0 <setupI2C1+0x7c>)
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	4a13      	ldr	r2, [pc, #76]	; (80021d0 <setupI2C1+0x7c>)
 8002182:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002186:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |=  (0x4 << 24) | (0x4 << 28);	//���������� AF4 ��� alternate function
 8002188:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <setupI2C1+0x7c>)
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	4a10      	ldr	r2, [pc, #64]	; (80021d0 <setupI2C1+0x7c>)
 800218e:	f043 4388 	orr.w	r3, r3, #1140850688	; 0x44000000
 8002192:	6213      	str	r3, [r2, #32]

	I2C1->CR1 &= ~1;	// Clear PE bit
 8002194:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <setupI2C1+0x84>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a0f      	ldr	r2, [pc, #60]	; (80021d8 <setupI2C1+0x84>)
 800219a:	f023 0301 	bic.w	r3, r3, #1
 800219e:	6013      	str	r3, [r2, #0]
//	I2C1->CR1 |= (1 << 12);	// off anfoff (analog noise filter)
//	I2C1->CR1 &= ~(0xF << 8);	//off DNF
	I2C1->TIMINGR &= (0xF << 24);	//clear timings
 80021a0:	4b0d      	ldr	r3, [pc, #52]	; (80021d8 <setupI2C1+0x84>)
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	4a0c      	ldr	r2, [pc, #48]	; (80021d8 <setupI2C1+0x84>)
 80021a6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80021aa:	6113      	str	r3, [r2, #16]
	I2C1->TIMINGR |= (9 | (3 << 8) | (1 << 16) | (3 << 20));	//setup timings
 80021ac:	4b0a      	ldr	r3, [pc, #40]	; (80021d8 <setupI2C1+0x84>)
 80021ae:	691a      	ldr	r2, [r3, #16]
 80021b0:	4909      	ldr	r1, [pc, #36]	; (80021d8 <setupI2C1+0x84>)
 80021b2:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <setupI2C1+0x88>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	610b      	str	r3, [r1, #16]
//	I2C1->CR1 |=  (1 << 17); // disable strectching
	I2C1->CR1 |= 1;	// Clear PE bit
 80021b8:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <setupI2C1+0x84>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a06      	ldr	r2, [pc, #24]	; (80021d8 <setupI2C1+0x84>)
 80021be:	f043 0301 	orr.w	r3, r3, #1
 80021c2:	6013      	str	r3, [r2, #0]
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	48000400 	.word	0x48000400
 80021d4:	48001000 	.word	0x48001000
 80021d8:	40005400 	.word	0x40005400
 80021dc:	00310309 	.word	0x00310309

080021e0 <setupGyroscope>:
		}
	}
}

void setupGyroscope()
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
	writeGyroscopeRegister(0x20, 0x0F);
 80021e6:	210f      	movs	r1, #15
 80021e8:	2020      	movs	r0, #32
 80021ea:	f000 f85d 	bl	80022a8 <writeGyroscopeRegister>
	unsigned char temp = readGyroscopeRegister(0x22);
 80021ee:	2022      	movs	r0, #34	; 0x22
 80021f0:	f000 f834 	bl	800225c <readGyroscopeRegister>
 80021f4:	4603      	mov	r3, r0
 80021f6:	71fb      	strb	r3, [r7, #7]
	temp |= (1 << 3); // Выставили DRDY
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	f043 0308 	orr.w	r3, r3, #8
 80021fe:	71fb      	strb	r3, [r7, #7]
	writeGyroscopeRegister(0x22, temp);
 8002200:	79fb      	ldrb	r3, [r7, #7]
 8002202:	4619      	mov	r1, r3
 8002204:	2022      	movs	r0, #34	; 0x22
 8002206:	f000 f84f 	bl	80022a8 <writeGyroscopeRegister>
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <sendOneByteToGyroscope>:

unsigned char sendOneByteToGyroscope(unsigned char byte)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	71fb      	strb	r3, [r7, #7]
	while(!(SPI1->SR & 2))	//��� ���� transmit buffer not empty
 800221e:	bf00      	nop
 8002220:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <sendOneByteToGyroscope+0x40>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d0f9      	beq.n	8002220 <sendOneByteToGyroscope+0xc>
	{
	}

	*((unsigned char*)&SPI1->DR) = byte;
 800222c:	4a0a      	ldr	r2, [pc, #40]	; (8002258 <sendOneByteToGyroscope+0x44>)
 800222e:	79fb      	ldrb	r3, [r7, #7]
 8002230:	7013      	strb	r3, [r2, #0]

	while(!(SPI1->SR & 1))	//��� ���� Receive buffer empty
 8002232:	bf00      	nop
 8002234:	4b07      	ldr	r3, [pc, #28]	; (8002254 <sendOneByteToGyroscope+0x40>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f003 0301 	and.w	r3, r3, #1
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0f9      	beq.n	8002234 <sendOneByteToGyroscope+0x20>
	{
	}
	return SPI1->DR;
 8002240:	4b04      	ldr	r3, [pc, #16]	; (8002254 <sendOneByteToGyroscope+0x40>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	b2db      	uxtb	r3, r3
}
 8002246:	4618      	mov	r0, r3
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	40013000 	.word	0x40013000
 8002258:	4001300c 	.word	0x4001300c

0800225c <readGyroscopeRegister>:

unsigned char readGyroscopeRegister(int addres)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
	GPIOE->ODR &= ~(1 << 3);//�������� ��� ��������
 8002264:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <readGyroscopeRegister+0x48>)
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	4a0e      	ldr	r2, [pc, #56]	; (80022a4 <readGyroscopeRegister+0x48>)
 800226a:	f023 0308 	bic.w	r3, r3, #8
 800226e:	6153      	str	r3, [r2, #20]
	unsigned char firstMsg = (addres | (1 << 7));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	b25b      	sxtb	r3, r3
 8002274:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002278:	b25b      	sxtb	r3, r3
 800227a:	73fb      	strb	r3, [r7, #15]
	unsigned char ret;
	sendOneByteToGyroscope(firstMsg);	//������ ����� ������ � ����� � �������� ����� ������
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff ffc8 	bl	8002214 <sendOneByteToGyroscope>
	ret = sendOneByteToGyroscope(0x00);	//��������� �����-�� �����, ����� �������� �������� ��������
 8002284:	2000      	movs	r0, #0
 8002286:	f7ff ffc5 	bl	8002214 <sendOneByteToGyroscope>
 800228a:	4603      	mov	r3, r0
 800228c:	73bb      	strb	r3, [r7, #14]
	GPIOE->ODR |= (1 << 3);//������� ��� ��������
 800228e:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <readGyroscopeRegister+0x48>)
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	4a04      	ldr	r2, [pc, #16]	; (80022a4 <readGyroscopeRegister+0x48>)
 8002294:	f043 0308 	orr.w	r3, r3, #8
 8002298:	6153      	str	r3, [r2, #20]

	return ret;
 800229a:	7bbb      	ldrb	r3, [r7, #14]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	48001000 	.word	0x48001000

080022a8 <writeGyroscopeRegister>:

void writeGyroscopeRegister(int addres, unsigned char value)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	460b      	mov	r3, r1
 80022b2:	70fb      	strb	r3, [r7, #3]
	GPIOE->ODR &= ~(1 << 3);//�������� ��� ��������
 80022b4:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <writeGyroscopeRegister+0x40>)
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	4a0b      	ldr	r2, [pc, #44]	; (80022e8 <writeGyroscopeRegister+0x40>)
 80022ba:	f023 0308 	bic.w	r3, r3, #8
 80022be:	6153      	str	r3, [r2, #20]
	sendOneByteToGyroscope(addres);	//������ ����� ������ � ����� � �������� ����� ������
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff ffa5 	bl	8002214 <sendOneByteToGyroscope>
	sendOneByteToGyroscope(value);	//��������� �����-�� �����, ����� �������� �������� ��������
 80022ca:	78fb      	ldrb	r3, [r7, #3]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff ffa1 	bl	8002214 <sendOneByteToGyroscope>
	GPIOE->ODR |= (1 << 3);//������� ��� ��������
 80022d2:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <writeGyroscopeRegister+0x40>)
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	4a04      	ldr	r2, [pc, #16]	; (80022e8 <writeGyroscopeRegister+0x40>)
 80022d8:	f043 0308 	orr.w	r3, r3, #8
 80022dc:	6153      	str	r3, [r2, #20]
}
 80022de:	bf00      	nop
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	48001000 	.word	0x48001000

080022ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f2:	4b0f      	ldr	r3, [pc, #60]	; (8002330 <HAL_MspInit+0x44>)
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	4a0e      	ldr	r2, [pc, #56]	; (8002330 <HAL_MspInit+0x44>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	6193      	str	r3, [r2, #24]
 80022fe:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <HAL_MspInit+0x44>)
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	607b      	str	r3, [r7, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800230a:	4b09      	ldr	r3, [pc, #36]	; (8002330 <HAL_MspInit+0x44>)
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	4a08      	ldr	r2, [pc, #32]	; (8002330 <HAL_MspInit+0x44>)
 8002310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002314:	61d3      	str	r3, [r2, #28]
 8002316:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_MspInit+0x44>)
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231e:	603b      	str	r3, [r7, #0]
 8002320:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	40021000 	.word	0x40021000

08002334 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002342:	b480      	push	{r7}
 8002344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002346:	e7fe      	b.n	8002346 <HardFault_Handler+0x4>

08002348 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800234c:	e7fe      	b.n	800234c <MemManage_Handler+0x4>

0800234e <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800234e:	b480      	push	{r7}
 8002350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002352:	e7fe      	b.n	8002352 <BusFault_Handler+0x4>

08002354 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002358:	e7fe      	b.n	8002358 <UsageFault_Handler+0x4>

0800235a <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 800235a:	b480      	push	{r7}
 800235c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800235e:	bf00      	nop
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002376:	b480      	push	{r7}
 8002378:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800237a:	bf00      	nop
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002388:	f000 f95c 	bl	8002644 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800238c:	f000 fa56 	bl	800283c <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002390:	bf00      	nop
 8002392:	bd80      	pop	{r7, pc}

08002394 <USB_LP_CAN_RX0_IRQHandler>:

/**
* @brief This function handles USB low priority or CAN_RX0 interrupts.
*/
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002398:	4802      	ldr	r0, [pc, #8]	; (80023a4 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800239a:	f000 fd7d 	bl	8002e98 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	200002b8 	.word	0x200002b8

080023a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023b0:	4a14      	ldr	r2, [pc, #80]	; (8002404 <_sbrk+0x5c>)
 80023b2:	4b15      	ldr	r3, [pc, #84]	; (8002408 <_sbrk+0x60>)
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023bc:	4b13      	ldr	r3, [pc, #76]	; (800240c <_sbrk+0x64>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d102      	bne.n	80023ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023c4:	4b11      	ldr	r3, [pc, #68]	; (800240c <_sbrk+0x64>)
 80023c6:	4a12      	ldr	r2, [pc, #72]	; (8002410 <_sbrk+0x68>)
 80023c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ca:	4b10      	ldr	r3, [pc, #64]	; (800240c <_sbrk+0x64>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4413      	add	r3, r2
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d207      	bcs.n	80023e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023d8:	f002 fde4 	bl	8004fa4 <__errno>
 80023dc:	4603      	mov	r3, r0
 80023de:	220c      	movs	r2, #12
 80023e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023e2:	f04f 33ff 	mov.w	r3, #4294967295
 80023e6:	e009      	b.n	80023fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023e8:	4b08      	ldr	r3, [pc, #32]	; (800240c <_sbrk+0x64>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ee:	4b07      	ldr	r3, [pc, #28]	; (800240c <_sbrk+0x64>)
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4413      	add	r3, r2
 80023f6:	4a05      	ldr	r2, [pc, #20]	; (800240c <_sbrk+0x64>)
 80023f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023fa:	68fb      	ldr	r3, [r7, #12]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	2000a000 	.word	0x2000a000
 8002408:	00000400 	.word	0x00000400
 800240c:	20000088 	.word	0x20000088
 8002410:	20000698 	.word	0x20000698

08002414 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002418:	4b06      	ldr	r3, [pc, #24]	; (8002434 <SystemInit+0x20>)
 800241a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241e:	4a05      	ldr	r2, [pc, #20]	; (8002434 <SystemInit+0x20>)
 8002420:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002424:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be send
  * @param  Len: Number of data to be send (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8002444:	2300      	movs	r3, #0
 8002446:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */ 
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8002448:	4b0d      	ldr	r3, [pc, #52]	; (8002480 <CDC_Transmit_FS+0x48>)
 800244a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800244e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800245a:	2301      	movs	r3, #1
 800245c:	e00b      	b.n	8002476 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800245e:	887b      	ldrh	r3, [r7, #2]
 8002460:	461a      	mov	r2, r3
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	4806      	ldr	r0, [pc, #24]	; (8002480 <CDC_Transmit_FS+0x48>)
 8002466:	f7fe fbb1 	bl	8000bcc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800246a:	4805      	ldr	r0, [pc, #20]	; (8002480 <CDC_Transmit_FS+0x48>)
 800246c:	f7fe fbc8 	bl	8000c00 <USBD_CDC_TransmitPacket>
 8002470:	4603      	mov	r3, r0
 8002472:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */ 
  return result;
 8002474:	7bfb      	ldrb	r3, [r7, #15]
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20000094 	.word	0x20000094

08002484 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup Stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f8d3 23a4 	ldr.w	r2, [r3, #932]	; 0x3a4
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f503 735d 	add.w	r3, r3, #884	; 0x374
 8002498:	4619      	mov	r1, r3
 800249a:	4610      	mov	r0, r2
 800249c:	f7fe fc81 	bl	8000da2 <USBD_LL_SetupStage>
}
 80024a0:	bf00      	nop
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	460b      	mov	r3, r1
 80024b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f8d3 03a4 	ldr.w	r0, [r3, #932]	; 0x3a4
 80024ba:	78fa      	ldrb	r2, [r7, #3]
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	4613      	mov	r3, r2
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	1a9b      	subs	r3, r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	440b      	add	r3, r1
 80024c8:	f503 73ee 	add.w	r3, r3, #476	; 0x1dc
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	78fb      	ldrb	r3, [r7, #3]
 80024d0:	4619      	mov	r1, r3
 80024d2:	f7fe fcb3 	bl	8000e3c <USBD_LL_DataOutStage>
}
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b082      	sub	sp, #8
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	460b      	mov	r3, r1
 80024e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f8d3 03a4 	ldr.w	r0, [r3, #932]	; 0x3a4
 80024f0:	78fa      	ldrb	r2, [r7, #3]
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	4613      	mov	r3, r2
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	1a9b      	subs	r3, r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	440b      	add	r3, r1
 80024fe:	3338      	adds	r3, #56	; 0x38
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	78fb      	ldrb	r3, [r7, #3]
 8002504:	4619      	mov	r1, r3
 8002506:	f7fe fcf4 	bl	8000ef2 <USBD_LL_DataInStage>
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 8002520:	4618      	mov	r0, r3
 8002522:	f7fe fdda 	bl	80010da <USBD_LL_SOF>
}
 8002526:	bf00      	nop
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b084      	sub	sp, #16
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8002536:	2301      	movs	r3, #1
 8002538:	73fb      	strb	r3, [r7, #15]

  /*Set USB Current Speed*/
  switch (hpcd->Init.speed)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	2b02      	cmp	r3, #2
 8002540:	d102      	bne.n	8002548 <HAL_PCD_ResetCallback+0x1a>
  {
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 8002542:	2301      	movs	r3, #1
 8002544:	73fb      	strb	r3, [r7, #15]
    break;
 8002546:	e002      	b.n	800254e <HAL_PCD_ResetCallback+0x20>

  default:
    speed = USBD_SPEED_FULL;
 8002548:	2301      	movs	r3, #1
 800254a:	73fb      	strb	r3, [r7, #15]
    break;
 800254c:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 8002554:	7bfa      	ldrb	r2, [r7, #15]
 8002556:	4611      	mov	r1, r2
 8002558:	4618      	mov	r0, r3
 800255a:	f7fe fd88 	bl	800106e <USBD_LL_SetSpeed>

  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 8002564:	4618      	mov	r0, r3
 8002566:	f7fe fd53 	bl	8001010 <USBD_LL_Reset>
}
 800256a:	bf00      	nop
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 8002582:	4618      	mov	r0, r3
 8002584:	f7fe fd83 	bl	800108e <USBD_LL_Suspend>
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d005      	beq.n	800259c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8002590:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <HAL_PCD_SuspendCallback+0x30>)
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	4a03      	ldr	r2, [pc, #12]	; (80025a4 <HAL_PCD_SuspendCallback+0x30>)
 8002596:	f043 0306 	orr.w	r3, r3, #6
 800259a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800259c:	bf00      	nop
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	e000ed00 	.word	0xe000ed00

080025a8 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f8d3 33a4 	ldr.w	r3, [r3, #932]	; 0x3a4
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fe fd7e 	bl	80010b8 <USBD_LL_Resume>

}
 80025bc:	bf00      	nop
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80025c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025fc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025c8:	480d      	ldr	r0, [pc, #52]	; (8002600 <LoopForever+0x6>)
  ldr r1, =_edata
 80025ca:	490e      	ldr	r1, [pc, #56]	; (8002604 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025cc:	4a0e      	ldr	r2, [pc, #56]	; (8002608 <LoopForever+0xe>)
  movs r3, #0
 80025ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025d0:	e002      	b.n	80025d8 <LoopCopyDataInit>

080025d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025d6:	3304      	adds	r3, #4

080025d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025dc:	d3f9      	bcc.n	80025d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025de:	4a0b      	ldr	r2, [pc, #44]	; (800260c <LoopForever+0x12>)
  ldr r4, =_ebss
 80025e0:	4c0b      	ldr	r4, [pc, #44]	; (8002610 <LoopForever+0x16>)
  movs r3, #0
 80025e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025e4:	e001      	b.n	80025ea <LoopFillZerobss>

080025e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025e8:	3204      	adds	r2, #4

080025ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025ec:	d3fb      	bcc.n	80025e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80025ee:	f7ff ff11 	bl	8002414 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025f2:	f002 fcdd 	bl	8004fb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80025f6:	f7ff fb93 	bl	8001d20 <main>

080025fa <LoopForever>:

LoopForever:
    b LoopForever
 80025fa:	e7fe      	b.n	80025fa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80025fc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002604:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002608:	08005e60 	.word	0x08005e60
  ldr r2, =_sbss
 800260c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002610:	20000694 	.word	0x20000694

08002614 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002614:	e7fe      	b.n	8002614 <ADC1_2_IRQHandler>
	...

08002618 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800261c:	4b08      	ldr	r3, [pc, #32]	; (8002640 <HAL_Init+0x28>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a07      	ldr	r2, [pc, #28]	; (8002640 <HAL_Init+0x28>)
 8002622:	f043 0310 	orr.w	r3, r3, #16
 8002626:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002628:	2003      	movs	r0, #3
 800262a:	f000 f8d2 	bl	80027d2 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800262e:	200f      	movs	r0, #15
 8002630:	f002 fb76 	bl	8004d20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002634:	f7ff fe5a 	bl	80022ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40022000 	.word	0x40022000

08002644 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  uwTick++;
 8002648:	4b04      	ldr	r3, [pc, #16]	; (800265c <HAL_IncTick+0x18>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	3301      	adds	r3, #1
 800264e:	4a03      	ldr	r2, [pc, #12]	; (800265c <HAL_IncTick+0x18>)
 8002650:	6013      	str	r3, [r2, #0]
}
 8002652:	bf00      	nop
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	20000660 	.word	0x20000660

08002660 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  return uwTick;  
 8002664:	4b03      	ldr	r3, [pc, #12]	; (8002674 <HAL_GetTick+0x14>)
 8002666:	681b      	ldr	r3, [r3, #0]
}
 8002668:	4618      	mov	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	20000660 	.word	0x20000660

08002678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002688:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <__NVIC_SetPriorityGrouping+0x44>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002694:	4013      	ands	r3, r2
 8002696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026aa:	4a04      	ldr	r2, [pc, #16]	; (80026bc <__NVIC_SetPriorityGrouping+0x44>)
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	60d3      	str	r3, [r2, #12]
}
 80026b0:	bf00      	nop
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	e000ed00 	.word	0xe000ed00

080026c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026c4:	4b04      	ldr	r3, [pc, #16]	; (80026d8 <__NVIC_GetPriorityGrouping+0x18>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	0a1b      	lsrs	r3, r3, #8
 80026ca:	f003 0307 	and.w	r3, r3, #7
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	e000ed00 	.word	0xe000ed00

080026dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	db0b      	blt.n	8002706 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	f003 021f 	and.w	r2, r3, #31
 80026f4:	4907      	ldr	r1, [pc, #28]	; (8002714 <__NVIC_EnableIRQ+0x38>)
 80026f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fa:	095b      	lsrs	r3, r3, #5
 80026fc:	2001      	movs	r0, #1
 80026fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	e000e100 	.word	0xe000e100

08002718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	6039      	str	r1, [r7, #0]
 8002722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002728:	2b00      	cmp	r3, #0
 800272a:	db0a      	blt.n	8002742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	b2da      	uxtb	r2, r3
 8002730:	490c      	ldr	r1, [pc, #48]	; (8002764 <__NVIC_SetPriority+0x4c>)
 8002732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002736:	0112      	lsls	r2, r2, #4
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	440b      	add	r3, r1
 800273c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002740:	e00a      	b.n	8002758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	b2da      	uxtb	r2, r3
 8002746:	4908      	ldr	r1, [pc, #32]	; (8002768 <__NVIC_SetPriority+0x50>)
 8002748:	79fb      	ldrb	r3, [r7, #7]
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	3b04      	subs	r3, #4
 8002750:	0112      	lsls	r2, r2, #4
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	440b      	add	r3, r1
 8002756:	761a      	strb	r2, [r3, #24]
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	e000e100 	.word	0xe000e100
 8002768:	e000ed00 	.word	0xe000ed00

0800276c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800276c:	b480      	push	{r7}
 800276e:	b089      	sub	sp, #36	; 0x24
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	f1c3 0307 	rsb	r3, r3, #7
 8002786:	2b04      	cmp	r3, #4
 8002788:	bf28      	it	cs
 800278a:	2304      	movcs	r3, #4
 800278c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	3304      	adds	r3, #4
 8002792:	2b06      	cmp	r3, #6
 8002794:	d902      	bls.n	800279c <NVIC_EncodePriority+0x30>
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	3b03      	subs	r3, #3
 800279a:	e000      	b.n	800279e <NVIC_EncodePriority+0x32>
 800279c:	2300      	movs	r3, #0
 800279e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a0:	f04f 32ff 	mov.w	r2, #4294967295
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	43da      	mvns	r2, r3
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	401a      	ands	r2, r3
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027b4:	f04f 31ff 	mov.w	r1, #4294967295
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	fa01 f303 	lsl.w	r3, r1, r3
 80027be:	43d9      	mvns	r1, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c4:	4313      	orrs	r3, r2
         );
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3724      	adds	r7, #36	; 0x24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b082      	sub	sp, #8
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7ff ff4c 	bl	8002678 <__NVIC_SetPriorityGrouping>
}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
 80027f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027fa:	f7ff ff61 	bl	80026c0 <__NVIC_GetPriorityGrouping>
 80027fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	68b9      	ldr	r1, [r7, #8]
 8002804:	6978      	ldr	r0, [r7, #20]
 8002806:	f7ff ffb1 	bl	800276c <NVIC_EncodePriority>
 800280a:	4602      	mov	r2, r0
 800280c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002810:	4611      	mov	r1, r2
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff ff80 	bl	8002718 <__NVIC_SetPriority>
}
 8002818:	bf00      	nop
 800281a:	3718      	adds	r7, #24
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800282a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff ff54 	bl	80026dc <__NVIC_EnableIRQ>
}
 8002834:	bf00      	nop
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002840:	f000 f802 	bl	8002848 <HAL_SYSTICK_Callback>
}
 8002844:	bf00      	nop
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800284c:	bf00      	nop
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
	...

08002858 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002858:	b590      	push	{r4, r7, lr}
 800285a:	b089      	sub	sp, #36	; 0x24
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count=0U;
 8002860:	2300      	movs	r3, #0
 8002862:	82fb      	strh	r3, [r7, #22]
  uint8_t EPindex;
  __IO uint16_t wIstr;  
  __IO uint16_t wEPVal = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	81bb      	strh	r3, [r7, #12]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0U)
 8002868:	e304      	b.n	8002e74 <PCD_EP_ISR_Handler+0x61c>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800286a:	89fb      	ldrh	r3, [r7, #14]
 800286c:	b29b      	uxth	r3, r3
 800286e:	b2db      	uxtb	r3, r3
 8002870:	f003 030f 	and.w	r3, r3, #15
 8002874:	77fb      	strb	r3, [r7, #31]
    
    if (EPindex == 0U)
 8002876:	7ffb      	ldrb	r3, [r7, #31]
 8002878:	2b00      	cmp	r3, #0
 800287a:	f040 8128 	bne.w	8002ace <PCD_EP_ISR_Handler+0x276>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800287e:	89fb      	ldrh	r3, [r7, #14]
 8002880:	b29b      	uxth	r3, r3
 8002882:	f003 0310 	and.w	r3, r3, #16
 8002886:	2b00      	cmp	r3, #0
 8002888:	d14c      	bne.n	8002924 <PCD_EP_ISR_Handler+0xcc>
      {
        /* DIR = 0U */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1U) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	881b      	ldrh	r3, [r3, #0]
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6812      	ldr	r2, [r2, #0]
 8002894:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800289c:	b29b      	uxth	r3, r3
 800289e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3328      	adds	r3, #40	; 0x28
 80028a4:	61bb      	str	r3, [r7, #24]
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	461a      	mov	r2, r3
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	4413      	add	r3, r2
 80028ba:	3302      	adds	r3, #2
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	461a      	mov	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4413      	add	r3, r2
 80028c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028ca:	881b      	ldrh	r3, [r3, #0]
 80028cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	619a      	str	r2, [r3, #24]
        ep->xfer_buff += ep->xfer_count;
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	691a      	ldr	r2, [r3, #16]
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	441a      	add	r2, r3
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	611a      	str	r2, [r3, #16]
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80028e2:	2100      	movs	r1, #0
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f7ff fdfa 	bl	80024de <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 82be 	beq.w	8002e74 <PCD_EP_ISR_Handler+0x61c>
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f040 82b9 	bne.w	8002e74 <PCD_EP_ISR_Handler+0x61c>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002908:	b2db      	uxtb	r3, r3
 800290a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800290e:	b2da      	uxtb	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	b292      	uxth	r2, r2
 8002916:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002922:	e2a7      	b.n	8002e74 <PCD_EP_ISR_Handler+0x61c>
      {
        /* DIR = 1U */
        
        /* DIR = 1U & CTR_RX       => SETUP or OUT int */
        /* DIR = 1U & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f503 73e6 	add.w	r3, r3, #460	; 0x1cc
 800292a:	61bb      	str	r3, [r7, #24]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	881b      	ldrh	r3, [r3, #0]
 8002932:	b29b      	uxth	r3, r3
 8002934:	81bb      	strh	r3, [r7, #12]
        
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002936:	89bb      	ldrh	r3, [r7, #12]
 8002938:	b29b      	uxth	r3, r3
 800293a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800293e:	2b00      	cmp	r3, #0
 8002940:	d031      	beq.n	80029a6 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800294a:	b29b      	uxth	r3, r3
 800294c:	461a      	mov	r2, r3
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	4413      	add	r3, r2
 8002956:	3306      	adds	r3, #6
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	461a      	mov	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4413      	add	r3, r2
 8002962:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	619a      	str	r2, [r3, #24]
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6818      	ldr	r0, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f503 715d 	add.w	r1, r3, #884	; 0x374
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	889a      	ldrh	r2, [r3, #4]
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	b29b      	uxth	r3, r3
 8002984:	f000 fde6 	bl	8003554 <PCD_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1U*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	881a      	ldrh	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4619      	mov	r1, r3
 8002994:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002998:	4013      	ands	r3, r2
 800299a:	b29b      	uxth	r3, r3
 800299c:	800b      	strh	r3, [r1, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7ff fd70 	bl	8002484 <HAL_PCD_SetupStageCallback>
 80029a4:	e266      	b.n	8002e74 <PCD_EP_ISR_Handler+0x61c>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80029a6:	89bb      	ldrh	r3, [r7, #12]
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	b21b      	sxth	r3, r3
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f280 8261 	bge.w	8002e74 <PCD_EP_ISR_Handler+0x61c>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	881a      	ldrh	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4619      	mov	r1, r3
 80029be:	f640 738f 	movw	r3, #3983	; 0xf8f
 80029c2:	4013      	ands	r3, r2
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	800b      	strh	r3, [r1, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	461a      	mov	r2, r3
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	4413      	add	r3, r2
 80029dc:	3306      	adds	r3, #6
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	461a      	mov	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4413      	add	r3, r2
 80029e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	619a      	str	r2, [r3, #24]
          
          if (ep->xfer_count != 0U)
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d011      	beq.n	8002a22 <PCD_EP_ISR_Handler+0x1ca>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6818      	ldr	r0, [r3, #0]
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	6919      	ldr	r1, [r3, #16]
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	889a      	ldrh	r2, [r3, #4]
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	f000 fda0 	bl	8003554 <PCD_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	441a      	add	r2, r3
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	611a      	str	r2, [r3, #16]
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002a22:	2100      	movs	r1, #0
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f7ff fd3f 	bl	80024a8 <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	3306      	adds	r3, #6
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	461a      	mov	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4413      	add	r3, r2
 8002a40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a44:	613b      	str	r3, [r7, #16]
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	2b3e      	cmp	r3, #62	; 0x3e
 8002a4c:	d917      	bls.n	8002a7e <PCD_EP_ISR_Handler+0x226>
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	095b      	lsrs	r3, r3, #5
 8002a54:	82bb      	strh	r3, [r7, #20]
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	f003 031f 	and.w	r3, r3, #31
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d102      	bne.n	8002a68 <PCD_EP_ISR_Handler+0x210>
 8002a62:	8abb      	ldrh	r3, [r7, #20]
 8002a64:	3b01      	subs	r3, #1
 8002a66:	82bb      	strh	r3, [r7, #20]
 8002a68:	8abb      	ldrh	r3, [r7, #20]
 8002a6a:	029b      	lsls	r3, r3, #10
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	801a      	strh	r2, [r3, #0]
 8002a7c:	e011      	b.n	8002aa2 <PCD_EP_ISR_Handler+0x24a>
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	085b      	lsrs	r3, r3, #1
 8002a84:	82bb      	strh	r3, [r7, #20]
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d002      	beq.n	8002a98 <PCD_EP_ISR_Handler+0x240>
 8002a92:	8abb      	ldrh	r3, [r7, #20]
 8002a94:	3301      	adds	r3, #1
 8002a96:	82bb      	strh	r3, [r7, #20]
 8002a98:	8abb      	ldrh	r3, [r7, #20]
 8002a9a:	029b      	lsls	r3, r3, #10
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	881b      	ldrh	r3, [r3, #0]
 8002aa8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab0:	b29c      	uxth	r4, r3
 8002ab2:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002ab6:	b29c      	uxth	r4, r3
 8002ab8:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002abc:	b29c      	uxth	r4, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	4b98      	ldr	r3, [pc, #608]	; (8002d28 <PCD_EP_ISR_Handler+0x4d0>)
 8002ac6:	4323      	orrs	r3, r4
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	8013      	strh	r3, [r2, #0]
 8002acc:	e1d2      	b.n	8002e74 <PCD_EP_ISR_Handler+0x61c>
    {
      
      /* Decode and service non control endpoints interrupt  */
      
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	7ffb      	ldrb	r3, [r7, #31]
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	81bb      	strh	r3, [r7, #12]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002ade:	89bb      	ldrh	r3, [r7, #12]
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	b21b      	sxth	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f280 80d1 	bge.w	8002c8c <PCD_EP_ISR_Handler+0x434>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	461a      	mov	r2, r3
 8002af0:	7ffb      	ldrb	r3, [r7, #31]
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	8819      	ldrh	r1, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	461a      	mov	r2, r3
 8002afe:	7ffb      	ldrb	r3, [r7, #31]
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	441a      	add	r2, r3
 8002b04:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002b08:	400b      	ands	r3, r1
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->OUT_ep[EPindex];
 8002b0e:	7ffa      	ldrb	r2, [r7, #31]
 8002b10:	4613      	mov	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	1a9b      	subs	r3, r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	4413      	add	r3, r2
 8002b20:	3304      	adds	r3, #4
 8002b22:	61bb      	str	r3, [r7, #24]
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	7a9b      	ldrb	r3, [r3, #10]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d122      	bne.n	8002b72 <PCD_EP_ISR_Handler+0x31a>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	461a      	mov	r2, r3
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	00db      	lsls	r3, r3, #3
 8002b3e:	4413      	add	r3, r2
 8002b40:	3306      	adds	r3, #6
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	461a      	mov	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b56:	82fb      	strh	r3, [r7, #22]
          if (count != 0U)
 8002b58:	8afb      	ldrh	r3, [r7, #22]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d071      	beq.n	8002c42 <PCD_EP_ISR_Handler+0x3ea>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6818      	ldr	r0, [r3, #0]
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	6919      	ldr	r1, [r3, #16]
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	889a      	ldrh	r2, [r3, #4]
 8002b6a:	8afb      	ldrh	r3, [r7, #22]
 8002b6c:	f000 fcf2 	bl	8003554 <PCD_ReadPMA>
 8002b70:	e067      	b.n	8002c42 <PCD_EP_ISR_Handler+0x3ea>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_RX) == USB_EP_DTOG_RX)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	461a      	mov	r2, r3
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	881b      	ldrh	r3, [r3, #0]
 8002b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d022      	beq.n	8002bd0 <PCD_EP_ISR_Handler+0x378>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	461a      	mov	r2, r3
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	4413      	add	r3, r2
 8002b9e:	3302      	adds	r3, #2
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4413      	add	r3, r2
 8002baa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bae:	881b      	ldrh	r3, [r3, #0]
 8002bb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bb4:	82fb      	strh	r3, [r7, #22]
            if (count != 0U)
 8002bb6:	8afb      	ldrh	r3, [r7, #22]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d02b      	beq.n	8002c14 <PCD_EP_ISR_Handler+0x3bc>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6818      	ldr	r0, [r3, #0]
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	6919      	ldr	r1, [r3, #16]
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	88da      	ldrh	r2, [r3, #6]
 8002bc8:	8afb      	ldrh	r3, [r7, #22]
 8002bca:	f000 fcc3 	bl	8003554 <PCD_ReadPMA>
 8002bce:	e021      	b.n	8002c14 <PCD_EP_ISR_Handler+0x3bc>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	461a      	mov	r2, r3
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	4413      	add	r3, r2
 8002be4:	3306      	adds	r3, #6
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	461a      	mov	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4413      	add	r3, r2
 8002bf0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bf4:	881b      	ldrh	r3, [r3, #0]
 8002bf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bfa:	82fb      	strh	r3, [r7, #22]
            if (count != 0U)
 8002bfc:	8afb      	ldrh	r3, [r7, #22]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d008      	beq.n	8002c14 <PCD_EP_ISR_Handler+0x3bc>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6818      	ldr	r0, [r3, #0]
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	6919      	ldr	r1, [r3, #16]
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	891a      	ldrh	r2, [r3, #8]
 8002c0e:	8afb      	ldrh	r3, [r7, #22]
 8002c10:	f000 fca0 	bl	8003554 <PCD_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT)  
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	461a      	mov	r2, r3
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4413      	add	r3, r2
 8002c22:	881a      	ldrh	r2, [r3, #0]
 8002c24:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002c28:	4013      	ands	r3, r2
 8002c2a:	b299      	uxth	r1, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	461a      	mov	r2, r3
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	441a      	add	r2, r3
 8002c3a:	4b3c      	ldr	r3, [pc, #240]	; (8002d2c <PCD_EP_ISR_Handler+0x4d4>)
 8002c3c:	430b      	orrs	r3, r1
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	699a      	ldr	r2, [r3, #24]
 8002c46:	8afb      	ldrh	r3, [r7, #22]
 8002c48:	441a      	add	r2, r3
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	619a      	str	r2, [r3, #24]
        ep->xfer_buff+=count;
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	691a      	ldr	r2, [r3, #16]
 8002c52:	8afb      	ldrh	r3, [r7, #22]
 8002c54:	441a      	add	r2, r3
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	611a      	str	r2, [r3, #16]
       
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d004      	beq.n	8002c6c <PCD_EP_ISR_Handler+0x414>
 8002c62:	8afa      	ldrh	r2, [r7, #22]
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d206      	bcs.n	8002c7a <PCD_EP_ISR_Handler+0x422>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	4619      	mov	r1, r3
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7ff fc18 	bl	80024a8 <HAL_PCD_DataOutStageCallback>
 8002c78:	e008      	b.n	8002c8c <PCD_EP_ISR_Handler+0x434>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	7819      	ldrb	r1, [r3, #0]
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	691a      	ldr	r2, [r3, #16]
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 fa28 	bl	80030dc <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002c8c:	89bb      	ldrh	r3, [r7, #12]
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 80ed 	beq.w	8002e74 <PCD_EP_ISR_Handler+0x61c>
      {
        ep = &hpcd->IN_ep[EPindex];
 8002c9a:	7ffa      	ldrb	r2, [r7, #31]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	1a9b      	subs	r3, r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	3328      	adds	r3, #40	; 0x28
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	4413      	add	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	7ffb      	ldrb	r3, [r7, #31]
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	881b      	ldrh	r3, [r3, #0]
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	6812      	ldr	r2, [r2, #0]
 8002cbe:	4611      	mov	r1, r2
 8002cc0:	7ffa      	ldrb	r2, [r7, #31]
 8002cc2:	0092      	lsls	r2, r2, #2
 8002cc4:	440a      	add	r2, r1
 8002cc6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	8013      	strh	r3, [r2, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	7a9b      	ldrb	r3, [r3, #10]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d12a      	bne.n	8002d30 <PCD_EP_ISR_Handler+0x4d8>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	4413      	add	r3, r2
 8002cee:	3302      	adds	r3, #2
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cfe:	881b      	ldrh	r3, [r3, #0]
 8002d00:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	619a      	str	r2, [r3, #24]
          if (ep->xfer_count != 0U)
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d07f      	beq.n	8002e10 <PCD_EP_ISR_Handler+0x5b8>
          {
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6818      	ldr	r0, [r3, #0]
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	6919      	ldr	r1, [r3, #16]
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	889a      	ldrh	r2, [r3, #4]
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	f000 fbd5 	bl	80034d0 <PCD_WritePMA>
 8002d26:	e073      	b.n	8002e10 <PCD_EP_ISR_Handler+0x5b8>
 8002d28:	ffff8080 	.word	0xffff8080
 8002d2c:	ffff80c0 	.word	0xffff80c0
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	461a      	mov	r2, r3
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	881b      	ldrh	r3, [r3, #0]
 8002d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d026      	beq.n	8002d96 <PCD_EP_ISR_Handler+0x53e>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	461a      	mov	r2, r3
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	3302      	adds	r3, #2
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	461a      	mov	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4413      	add	r3, r2
 8002d68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d6c:	881b      	ldrh	r3, [r3, #0]
 8002d6e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	619a      	str	r2, [r3, #24]
            if (ep->xfer_count != 0U)
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d031      	beq.n	8002de2 <PCD_EP_ISR_Handler+0x58a>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6818      	ldr	r0, [r3, #0]
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	6919      	ldr	r1, [r3, #16]
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	88da      	ldrh	r2, [r3, #6]
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	f000 fb9e 	bl	80034d0 <PCD_WritePMA>
 8002d94:	e025      	b.n	8002de2 <PCD_EP_ISR_Handler+0x58a>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	461a      	mov	r2, r3
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	4413      	add	r3, r2
 8002daa:	3306      	adds	r3, #6
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	461a      	mov	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4413      	add	r3, r2
 8002db6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	619a      	str	r2, [r3, #24]
            if (ep->xfer_count != 0U)
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00a      	beq.n	8002de2 <PCD_EP_ISR_Handler+0x58a>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6818      	ldr	r0, [r3, #0]
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	6919      	ldr	r1, [r3, #16]
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	891a      	ldrh	r2, [r3, #8]
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	f000 fb77 	bl	80034d0 <PCD_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN)  
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	461a      	mov	r2, r3
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	881a      	ldrh	r2, [r3, #0]
 8002df2:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002df6:	4013      	ands	r3, r2
 8002df8:	b299      	uxth	r1, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	441a      	add	r2, r3
 8002e08:	4b22      	ldr	r3, [pc, #136]	; (8002e94 <PCD_EP_ISR_Handler+0x63c>)
 8002e0a:	430b      	orrs	r3, r1
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	4413      	add	r3, r2
 8002e24:	3302      	adds	r3, #2
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	461a      	mov	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4413      	add	r3, r2
 8002e30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e34:	881b      	ldrh	r3, [r3, #0]
 8002e36:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	619a      	str	r2, [r3, #24]
        ep->xfer_buff+=ep->xfer_count;
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	691a      	ldr	r2, [r3, #16]
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	441a      	add	r2, r3
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	611a      	str	r2, [r3, #16]
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d106      	bne.n	8002e62 <PCD_EP_ISR_Handler+0x60a>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	4619      	mov	r1, r3
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7ff fb3f 	bl	80024de <HAL_PCD_DataInStageCallback>
 8002e60:	e008      	b.n	8002e74 <PCD_EP_ISR_Handler+0x61c>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	7819      	ldrb	r1, [r3, #0]
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	691a      	ldr	r2, [r3, #16]
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 fa42 	bl	80032f8 <HAL_PCD_EP_Transmit>
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0U)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	461a      	mov	r2, r3
 8002e80:	81fa      	strh	r2, [r7, #14]
 8002e82:	b21b      	sxth	r3, r3
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f6ff acf0 	blt.w	800286a <PCD_EP_ISR_Handler+0x12>
        }
      } 
    }
  }
  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3724      	adds	r7, #36	; 0x24
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd90      	pop	{r4, r7, pc}
 8002e94:	ffffc080 	.word	0xffffc080

08002e98 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t wInterrupt_Mask = 0U;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	60fb      	str	r3, [r7, #12]
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eb6:	d102      	bne.n	8002ebe <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f7ff fccd 	bl	8002858 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ed0:	d112      	bne.n	8002ef8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ee4:	b292      	uxth	r2, r2
 8002ee6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f7ff fb1f 	bl	800252e <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f8c8 	bl	8003088 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f0a:	d10b      	bne.n	8002f24 <HAL_PCD_IRQHandler+0x8c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f1e:	b292      	uxth	r2, r2
 8002f20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f36:	d10b      	bne.n	8002f50 <HAL_PCD_IRQHandler+0xb8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f4a:	b292      	uxth	r2, r2
 8002f4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f62:	d123      	bne.n	8002fac <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t)(~(USB_CNTR_LPMODE));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0204 	bic.w	r2, r2, #4
 8002f76:	b292      	uxth	r2, r2
 8002f78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /*set wInterrupt_Mask global variable*/
    wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
 8002f7c:	f44f 433d 	mov.w	r3, #48384	; 0xbd00
 8002f80:	60fb      	str	r3, [r7, #12]
      | USB_CNTR_ESOFM | USB_CNTR_RESETM;
    
    /*Set interrupt mask*/
    hpcd->Instance->CNTR = wInterrupt_Mask;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	b292      	uxth	r2, r2
 8002f8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    HAL_PCD_ResumeCallback(hpcd);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7ff fb0a 	bl	80025a8 <HAL_PCD_ResumeCallback>
    
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002fa6:	b292      	uxth	r2, r2
 8002fa8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fbe:	d130      	bne.n	8003022 <HAL_PCD_IRQHandler+0x18a>
  {    
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fd2:	b292      	uxth	r2, r2
 8002fd4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 0208 	orr.w	r2, r2, #8
 8002fea:	b292      	uxth	r2, r2
 8002fec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0204 	orr.w	r2, r2, #4
 8003002:	b292      	uxth	r2, r2
 8003004:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003010:	b29b      	uxth	r3, r3
 8003012:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800301a:	d002      	beq.n	8003022 <HAL_PCD_IRQHandler+0x18a>
    {
      HAL_PCD_SuspendCallback(hpcd);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f7ff faa9 	bl	8002574 <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800302a:	b29b      	uxth	r3, r3
 800302c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003034:	d10e      	bne.n	8003054 <HAL_PCD_IRQHandler+0x1bc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800303e:	b29a      	uxth	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003048:	b292      	uxth	r2, r2
 800304a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7ff fa5f 	bl	8002512 <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800305c:	b29b      	uxth	r3, r3
 800305e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003066:	d10b      	bne.n	8003080 <HAL_PCD_IRQHandler+0x1e8>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003070:	b29a      	uxth	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800307a:	b292      	uxth	r2, r2
 800307c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003080:	bf00      	nop
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_PCD_SetAddress>:
  * @param  hpcd: PCD handle
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	460b      	mov	r3, r1
 8003092:	70fb      	strb	r3, [r7, #3]
   __HAL_LOCK(hpcd); 
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 800309a:	2b01      	cmp	r3, #1
 800309c:	d101      	bne.n	80030a2 <HAL_PCD_SetAddress+0x1a>
 800309e:	2302      	movs	r3, #2
 80030a0:	e015      	b.n	80030ce <HAL_PCD_SetAddress+0x46>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370

   if(address == 0U) 
 80030aa:	78fb      	ldrb	r3, [r7, #3]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d105      	bne.n	80030bc <HAL_PCD_SetAddress+0x34>
   {
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2280      	movs	r2, #128	; 0x80
 80030b6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 80030ba:	e003      	b.n	80030c4 <HAL_PCD_SetAddress+0x3c>
   }
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	78fa      	ldrb	r2, [r7, #3]
 80030c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   }

  __HAL_UNLOCK(hpcd);   
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
	...

080030dc <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer   
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030dc:	b490      	push	{r4, r7}
 80030de:	b088      	sub	sp, #32
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	607a      	str	r2, [r7, #4]
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	460b      	mov	r3, r1
 80030ea:	72fb      	strb	r3, [r7, #11]
  
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80030ec:	7afb      	ldrb	r3, [r7, #11]
 80030ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030f2:	4613      	mov	r3, r2
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	1a9b      	subs	r3, r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	4413      	add	r3, r2
 8003102:	3304      	adds	r3, #4
 8003104:	61bb      	str	r3, [r7, #24]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	2200      	movs	r2, #0
 8003116:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	2200      	movs	r2, #0
 800311c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 800311e:	7afb      	ldrb	r3, [r7, #11]
 8003120:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003124:	b2da      	uxtb	r2, r3
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	701a      	strb	r2, [r3, #0]
   
  __HAL_LOCK(hpcd); 
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 8003130:	2b01      	cmp	r3, #1
 8003132:	d101      	bne.n	8003138 <HAL_PCD_EP_Receive+0x5c>
 8003134:	2302      	movs	r3, #2
 8003136:	e0d7      	b.n	80032e8 <HAL_PCD_EP_Receive+0x20c>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	695a      	ldr	r2, [r3, #20]
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	429a      	cmp	r2, r3
 800314a:	d909      	bls.n	8003160 <HAL_PCD_EP_Receive+0x84>
  {
    len=ep->maxpacket;
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	603b      	str	r3, [r7, #0]
    ep->xfer_len-=len; 
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	695a      	ldr	r2, [r3, #20]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	1ad2      	subs	r2, r2, r3
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	615a      	str	r2, [r3, #20]
 800315e:	e005      	b.n	800316c <HAL_PCD_EP_Receive+0x90>
  }
  else
  {
    len=ep->xfer_len;
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	603b      	str	r3, [r7, #0]
    ep->xfer_len =0U;
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	2200      	movs	r2, #0
 800316a:	615a      	str	r2, [r3, #20]
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0U) 
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	7a9b      	ldrb	r3, [r3, #10]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d13c      	bne.n	80031ee <HAL_PCD_EP_Receive+0x112>
  {
    /*Set RX buffer count*/
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800317c:	b29b      	uxth	r3, r3
 800317e:	461a      	mov	r2, r3
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	4413      	add	r3, r2
 8003188:	3306      	adds	r3, #6
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	461a      	mov	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4413      	add	r3, r2
 8003194:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003198:	613b      	str	r3, [r7, #16]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	2b3e      	cmp	r3, #62	; 0x3e
 800319e:	d915      	bls.n	80031cc <HAL_PCD_EP_Receive+0xf0>
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	095b      	lsrs	r3, r3, #5
 80031a4:	83fb      	strh	r3, [r7, #30]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	f003 031f 	and.w	r3, r3, #31
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d102      	bne.n	80031b6 <HAL_PCD_EP_Receive+0xda>
 80031b0:	8bfb      	ldrh	r3, [r7, #30]
 80031b2:	3b01      	subs	r3, #1
 80031b4:	83fb      	strh	r3, [r7, #30]
 80031b6:	8bfb      	ldrh	r3, [r7, #30]
 80031b8:	029b      	lsls	r3, r3, #10
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	801a      	strh	r2, [r3, #0]
 80031ca:	e06a      	b.n	80032a2 <HAL_PCD_EP_Receive+0x1c6>
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	085b      	lsrs	r3, r3, #1
 80031d0:	83fb      	strh	r3, [r7, #30]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d002      	beq.n	80031e2 <HAL_PCD_EP_Receive+0x106>
 80031dc:	8bfb      	ldrh	r3, [r7, #30]
 80031de:	3301      	adds	r3, #1
 80031e0:	83fb      	strh	r3, [r7, #30]
 80031e2:	8bfb      	ldrh	r3, [r7, #30]
 80031e4:	029b      	lsls	r3, r3, #10
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	801a      	strh	r2, [r3, #0]
 80031ec:	e059      	b.n	80032a2 <HAL_PCD_EP_Receive+0x1c6>
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len)
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	785b      	ldrb	r3, [r3, #1]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d13c      	bne.n	8003270 <HAL_PCD_EP_Receive+0x194>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031fe:	b29b      	uxth	r3, r3
 8003200:	461a      	mov	r2, r3
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	4413      	add	r3, r2
 800320a:	3306      	adds	r3, #6
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	461a      	mov	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4413      	add	r3, r2
 8003216:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	2b3e      	cmp	r3, #62	; 0x3e
 8003220:	d915      	bls.n	800324e <HAL_PCD_EP_Receive+0x172>
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	095b      	lsrs	r3, r3, #5
 8003226:	83bb      	strh	r3, [r7, #28]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	f003 031f 	and.w	r3, r3, #31
 800322e:	2b00      	cmp	r3, #0
 8003230:	d102      	bne.n	8003238 <HAL_PCD_EP_Receive+0x15c>
 8003232:	8bbb      	ldrh	r3, [r7, #28]
 8003234:	3b01      	subs	r3, #1
 8003236:	83bb      	strh	r3, [r7, #28]
 8003238:	8bbb      	ldrh	r3, [r7, #28]
 800323a:	029b      	lsls	r3, r3, #10
 800323c:	b29b      	uxth	r3, r3
 800323e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003242:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003246:	b29a      	uxth	r2, r3
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	801a      	strh	r2, [r3, #0]
 800324c:	e029      	b.n	80032a2 <HAL_PCD_EP_Receive+0x1c6>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	085b      	lsrs	r3, r3, #1
 8003252:	83bb      	strh	r3, [r7, #28]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d002      	beq.n	8003264 <HAL_PCD_EP_Receive+0x188>
 800325e:	8bbb      	ldrh	r3, [r7, #28]
 8003260:	3301      	adds	r3, #1
 8003262:	83bb      	strh	r3, [r7, #28]
 8003264:	8bbb      	ldrh	r3, [r7, #28]
 8003266:	029b      	lsls	r3, r3, #10
 8003268:	b29a      	uxth	r2, r3
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	801a      	strh	r2, [r3, #0]
 800326e:	e018      	b.n	80032a2 <HAL_PCD_EP_Receive+0x1c6>
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	785b      	ldrb	r3, [r3, #1]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d114      	bne.n	80032a2 <HAL_PCD_EP_Receive+0x1c6>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003280:	b29b      	uxth	r3, r3
 8003282:	461a      	mov	r2, r3
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	4413      	add	r3, r2
 800328c:	3306      	adds	r3, #6
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	461a      	mov	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4413      	add	r3, r2
 8003298:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	b292      	uxth	r2, r2
 80032a0:	801a      	strh	r2, [r3, #0]
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	461a      	mov	r2, r3
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	881b      	ldrh	r3, [r3, #0]
 80032b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ba:	b29c      	uxth	r4, r3
 80032bc:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80032c0:	b29c      	uxth	r4, r3
 80032c2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80032c6:	b29c      	uxth	r4, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	461a      	mov	r2, r3
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	441a      	add	r2, r3
 80032d6:	4b07      	ldr	r3, [pc, #28]	; (80032f4 <HAL_PCD_EP_Receive+0x218>)
 80032d8:	4323      	orrs	r3, r4
 80032da:	b29b      	uxth	r3, r3
 80032dc:	8013      	strh	r3, [r2, #0]
  
  __HAL_UNLOCK(hpcd); 
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  
  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3720      	adds	r7, #32
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bc90      	pop	{r4, r7}
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	ffff8080 	.word	0xffff8080

080032f8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032f8:	b590      	push	{r4, r7, lr}
 80032fa:	b087      	sub	sp, #28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	607a      	str	r2, [r7, #4]
 8003302:	603b      	str	r3, [r7, #0]
 8003304:	460b      	mov	r3, r1
 8003306:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;
  uint16_t pmabuffer = 0U;
 8003308:	2300      	movs	r3, #0
 800330a:	82fb      	strh	r3, [r7, #22]
    
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800330c:	7afb      	ldrb	r3, [r7, #11]
 800330e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003312:	4613      	mov	r3, r2
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	1a9b      	subs	r3, r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	3328      	adds	r3, #40	; 0x28
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	4413      	add	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	2200      	movs	r2, #0
 8003332:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	2201      	movs	r2, #1
 8003338:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7FU;
 800333a:	7afb      	ldrb	r3, [r7, #11]
 800333c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003340:	b2da      	uxtb	r2, r3
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	701a      	strb	r2, [r3, #0]
  
  __HAL_LOCK(hpcd); 
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f893 3370 	ldrb.w	r3, [r3, #880]	; 0x370
 800334c:	2b01      	cmp	r3, #1
 800334e:	d101      	bne.n	8003354 <HAL_PCD_EP_Transmit+0x5c>
 8003350:	2302      	movs	r3, #2
 8003352:	e0b3      	b.n	80034bc <HAL_PCD_EP_Transmit+0x1c4>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	695a      	ldr	r2, [r3, #20]
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	429a      	cmp	r2, r3
 8003366:	d909      	bls.n	800337c <HAL_PCD_EP_Transmit+0x84>
  {
    len=ep->maxpacket;
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	603b      	str	r3, [r7, #0]
    ep->xfer_len-=len; 
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	695a      	ldr	r2, [r3, #20]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	1ad2      	subs	r2, r2, r3
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	615a      	str	r2, [r3, #20]
 800337a:	e005      	b.n	8003388 <HAL_PCD_EP_Transmit+0x90>
  }
  else
  {  
    len=ep->xfer_len;
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	695b      	ldr	r3, [r3, #20]
 8003380:	603b      	str	r3, [r7, #0]
    ep->xfer_len =0U;
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	2200      	movs	r2, #0
 8003386:	615a      	str	r2, [r3, #20]
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0U) 
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	7a9b      	ldrb	r3, [r3, #10]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d11f      	bne.n	80033d0 <HAL_PCD_EP_Transmit+0xd8>
  {
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6818      	ldr	r0, [r3, #0]
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	6919      	ldr	r1, [r3, #16]
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	889a      	ldrh	r2, [r3, #4]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	b29b      	uxth	r3, r3
 80033a0:	f000 f896 	bl	80034d0 <PCD_WritePMA>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	461a      	mov	r2, r3
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	4413      	add	r3, r2
 80033b8:	3302      	adds	r3, #2
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	461a      	mov	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4413      	add	r3, r2
 80033c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	b292      	uxth	r2, r2
 80033cc:	801a      	strh	r2, [r3, #0]
 80033ce:	e052      	b.n	8003476 <HAL_PCD_EP_Transmit+0x17e>
  }
  else
  {
    /*Write the data to the USB endpoint*/
    if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX) == USB_EP_DTOG_TX)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	461a      	mov	r2, r3
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	881b      	ldrh	r3, [r3, #0]
 80033e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <HAL_PCD_EP_Transmit+0xf8>
    {
      pmabuffer = ep->pmaaddr1;
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	891b      	ldrh	r3, [r3, #8]
 80033ec:	82fb      	strh	r3, [r7, #22]
 80033ee:	e002      	b.n	80033f6 <HAL_PCD_EP_Transmit+0xfe>
    }
    else
    {
      pmabuffer = ep->pmaaddr0;
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	88db      	ldrh	r3, [r3, #6]
 80033f4:	82fb      	strh	r3, [r7, #22]
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6818      	ldr	r0, [r3, #0]
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	6919      	ldr	r1, [r3, #16]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	b29b      	uxth	r3, r3
 8003402:	8afa      	ldrh	r2, [r7, #22]
 8003404:	f000 f864 	bl	80034d0 <PCD_WritePMA>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in)
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	785b      	ldrb	r3, [r3, #1]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d117      	bne.n	8003440 <HAL_PCD_EP_Transmit+0x148>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	461a      	mov	r2, r3
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	881a      	ldrh	r2, [r3, #0]
 8003420:	f640 730f 	movw	r3, #3855	; 0xf0f
 8003424:	4013      	ands	r3, r2
 8003426:	b299      	uxth	r1, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	461a      	mov	r2, r3
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	441a      	add	r2, r3
 8003436:	4b23      	ldr	r3, [pc, #140]	; (80034c4 <HAL_PCD_EP_Transmit+0x1cc>)
 8003438:	430b      	orrs	r3, r1
 800343a:	b29b      	uxth	r3, r3
 800343c:	8013      	strh	r3, [r2, #0]
 800343e:	e01a      	b.n	8003476 <HAL_PCD_EP_Transmit+0x17e>
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	785b      	ldrb	r3, [r3, #1]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d116      	bne.n	8003476 <HAL_PCD_EP_Transmit+0x17e>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	461a      	mov	r2, r3
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	881a      	ldrh	r2, [r3, #0]
 8003458:	f640 730f 	movw	r3, #3855	; 0xf0f
 800345c:	4013      	ands	r3, r2
 800345e:	b299      	uxth	r1, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	461a      	mov	r2, r3
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	441a      	add	r2, r3
 800346e:	4b16      	ldr	r3, [pc, #88]	; (80034c8 <HAL_PCD_EP_Transmit+0x1d0>)
 8003470:	430b      	orrs	r3, r1
 8003472:	b29b      	uxth	r3, r3
 8003474:	8013      	strh	r3, [r2, #0]
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	461a      	mov	r2, r3
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800348a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800348e:	b29c      	uxth	r4, r3
 8003490:	f084 0310 	eor.w	r3, r4, #16
 8003494:	b29c      	uxth	r4, r3
 8003496:	f084 0320 	eor.w	r3, r4, #32
 800349a:	b29c      	uxth	r4, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	461a      	mov	r2, r3
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	441a      	add	r2, r3
 80034aa:	4b08      	ldr	r3, [pc, #32]	; (80034cc <HAL_PCD_EP_Transmit+0x1d4>)
 80034ac:	4323      	orrs	r3, r4
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	8013      	strh	r3, [r2, #0]
  
  __HAL_UNLOCK(hpcd);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 2370 	strb.w	r2, [r3, #880]	; 0x370
     
  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	371c      	adds	r7, #28
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd90      	pop	{r4, r7, pc}
 80034c4:	ffff80c0 	.word	0xffff80c0
 80034c8:	ffffc080 	.word	0xffffc080
 80034cc:	ffff8080 	.word	0xffff8080

080034d0 <PCD_WritePMA>:
  * @param   wPMABufAddr: address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b08b      	sub	sp, #44	; 0x2c
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	4611      	mov	r1, r2
 80034dc:	461a      	mov	r2, r3
 80034de:	460b      	mov	r3, r1
 80034e0:	80fb      	strh	r3, [r7, #6]
 80034e2:	4613      	mov	r3, r2
 80034e4:	80bb      	strh	r3, [r7, #4]
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 80034e6:	88bb      	ldrh	r3, [r7, #4]
 80034e8:	3301      	adds	r3, #1
 80034ea:	085b      	lsrs	r3, r3, #1
 80034ec:	61fb      	str	r3, [r7, #28]
  
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)((uint32_t)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400U));
 80034ee:	88fb      	ldrh	r3, [r7, #6]
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	461a      	mov	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4413      	add	r3, r2
 80034f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034fc:	623b      	str	r3, [r7, #32]
  
  for (i = n; i != 0; i--)
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	627b      	str	r3, [r7, #36]	; 0x24
 8003502:	e01d      	b.n	8003540 <PCD_WritePMA+0x70>
  {
    temp1 = (uint16_t) * pbUsrBuf;
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	61bb      	str	r3, [r7, #24]
    pbUsrBuf++;
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	3301      	adds	r3, #1
 800350e:	60bb      	str	r3, [r7, #8]
    temp2 = temp1 | ((uint16_t)((uint16_t)  * pbUsrBuf << 8U)) ;
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	b29b      	uxth	r3, r3
 8003516:	021b      	lsls	r3, r3, #8
 8003518:	b29b      	uxth	r3, r3
 800351a:	461a      	mov	r2, r3
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	4313      	orrs	r3, r2
 8003520:	617b      	str	r3, [r7, #20]
    *pdwVal++ = temp2;
 8003522:	6a3b      	ldr	r3, [r7, #32]
 8003524:	1c9a      	adds	r2, r3, #2
 8003526:	623a      	str	r2, [r7, #32]
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	b292      	uxth	r2, r2
 800352c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800352e:	6a3b      	ldr	r3, [r7, #32]
 8003530:	3302      	adds	r3, #2
 8003532:	623b      	str	r3, [r7, #32]
    pbUsrBuf++;
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	3301      	adds	r3, #1
 8003538:	60bb      	str	r3, [r7, #8]
  for (i = n; i != 0; i--)
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	3b01      	subs	r3, #1
 800353e:	627b      	str	r3, [r7, #36]	; 0x24
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1de      	bne.n	8003504 <PCD_WritePMA+0x34>
  }
}
 8003546:	bf00      	nop
 8003548:	bf00      	nop
 800354a:	372c      	adds	r7, #44	; 0x2c
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <PCD_ReadPMA>:
  * @param   wPMABufAddr: address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003554:	b480      	push	{r7}
 8003556:	b089      	sub	sp, #36	; 0x24
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	4611      	mov	r1, r2
 8003560:	461a      	mov	r2, r3
 8003562:	460b      	mov	r3, r1
 8003564:	80fb      	strh	r3, [r7, #6]
 8003566:	4613      	mov	r3, r2
 8003568:	80bb      	strh	r3, [r7, #4]
  uint32_t n =  ((uint32_t)((uint32_t)wNBytes + 1U)) >> 1U;
 800356a:	88bb      	ldrh	r3, [r7, #4]
 800356c:	3301      	adds	r3, #1
 800356e:	085b      	lsrs	r3, r3, #1
 8003570:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t *pdwVal;

  pdwVal = (uint32_t *)((uint32_t)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400U));
 8003572:	88fb      	ldrh	r3, [r7, #6]
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	461a      	mov	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	4413      	add	r3, r2
 800357c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003580:	61bb      	str	r3, [r7, #24]
  uint32_t tmp = *pdwVal++;
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	1d1a      	adds	r2, r3, #4
 8003586:	61ba      	str	r2, [r7, #24]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	613b      	str	r3, [r7, #16]
  *pbUsrBuf++ = (uint16_t)((tmp >> 0) & 0xFF);
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	1c5a      	adds	r2, r3, #1
 8003590:	60ba      	str	r2, [r7, #8]
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	b2d2      	uxtb	r2, r2
 8003596:	701a      	strb	r2, [r3, #0]
  *pbUsrBuf++ = (uint16_t)((tmp >> 8) & 0xFF);
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	0a19      	lsrs	r1, r3, #8
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	1c5a      	adds	r2, r3, #1
 80035a0:	60ba      	str	r2, [r7, #8]
 80035a2:	b2ca      	uxtb	r2, r1
 80035a4:	701a      	strb	r2, [r3, #0]
  
  
  for (i = n; i != 0; i--)
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	61fb      	str	r3, [r7, #28]
 80035aa:	e00e      	b.n	80035ca <PCD_ReadPMA+0x76>
  {
    *(uint16_t*)((uint32_t)pbUsrBuf++) = *pdwVal++;
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	1d1a      	adds	r2, r3, #4
 80035b0:	61ba      	str	r2, [r7, #24]
 80035b2:	6819      	ldr	r1, [r3, #0]
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	60ba      	str	r2, [r7, #8]
 80035ba:	b28a      	uxth	r2, r1
 80035bc:	801a      	strh	r2, [r3, #0]
    pbUsrBuf++;
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	3301      	adds	r3, #1
 80035c2:	60bb      	str	r3, [r7, #8]
  for (i = n; i != 0; i--)
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	3b01      	subs	r3, #1
 80035c8:	61fb      	str	r3, [r7, #28]
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1ed      	bne.n	80035ac <PCD_ReadPMA+0x58>
  }
}
 80035d0:	bf00      	nop
 80035d2:	bf00      	nop
 80035d4:	3724      	adds	r7, #36	; 0x24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
	...

080035e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	1d3b      	adds	r3, r7, #4
 80035ea:	6018      	str	r0, [r3, #0]
   uint32_t tickstart = 0U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035f2:	1d3b      	adds	r3, r7, #4
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 816a 	beq.w	80038d6 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003602:	4bb3      	ldr	r3, [pc, #716]	; (80038d0 <HAL_RCC_OscConfig+0x2f0>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f003 030c 	and.w	r3, r3, #12
 800360a:	2b04      	cmp	r3, #4
 800360c:	d00c      	beq.n	8003628 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800360e:	4bb0      	ldr	r3, [pc, #704]	; (80038d0 <HAL_RCC_OscConfig+0x2f0>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f003 030c 	and.w	r3, r3, #12
 8003616:	2b08      	cmp	r3, #8
 8003618:	d159      	bne.n	80036ce <HAL_RCC_OscConfig+0xee>
 800361a:	4bad      	ldr	r3, [pc, #692]	; (80038d0 <HAL_RCC_OscConfig+0x2f0>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003626:	d152      	bne.n	80036ce <HAL_RCC_OscConfig+0xee>
 8003628:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800362c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003630:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003634:	fa93 f3a3 	rbit	r3, r3
 8003638:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800363c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003640:	fab3 f383 	clz	r3, r3
 8003644:	b2db      	uxtb	r3, r3
 8003646:	095b      	lsrs	r3, r3, #5
 8003648:	b2db      	uxtb	r3, r3
 800364a:	f043 0301 	orr.w	r3, r3, #1
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b01      	cmp	r3, #1
 8003652:	d102      	bne.n	800365a <HAL_RCC_OscConfig+0x7a>
 8003654:	4b9e      	ldr	r3, [pc, #632]	; (80038d0 <HAL_RCC_OscConfig+0x2f0>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	e015      	b.n	8003686 <HAL_RCC_OscConfig+0xa6>
 800365a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800365e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003662:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8003666:	fa93 f3a3 	rbit	r3, r3
 800366a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800366e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003672:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003676:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800367a:	fa93 f3a3 	rbit	r3, r3
 800367e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003682:	4b93      	ldr	r3, [pc, #588]	; (80038d0 <HAL_RCC_OscConfig+0x2f0>)
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800368a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800368e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8003692:	fa92 f2a2 	rbit	r2, r2
 8003696:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800369a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800369e:	fab2 f282 	clz	r2, r2
 80036a2:	b2d2      	uxtb	r2, r2
 80036a4:	f042 0220 	orr.w	r2, r2, #32
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	f002 021f 	and.w	r2, r2, #31
 80036ae:	2101      	movs	r1, #1
 80036b0:	fa01 f202 	lsl.w	r2, r1, r2
 80036b4:	4013      	ands	r3, r2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 810c 	beq.w	80038d4 <HAL_RCC_OscConfig+0x2f4>
 80036bc:	1d3b      	adds	r3, r7, #4
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f040 8106 	bne.w	80038d4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	f000 be67 	b.w	800439c <HAL_RCC_OscConfig+0xdbc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036ce:	1d3b      	adds	r3, r7, #4
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d8:	d106      	bne.n	80036e8 <HAL_RCC_OscConfig+0x108>
 80036da:	4b7d      	ldr	r3, [pc, #500]	; (80038d0 <HAL_RCC_OscConfig+0x2f0>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a7c      	ldr	r2, [pc, #496]	; (80038d0 <HAL_RCC_OscConfig+0x2f0>)
 80036e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e4:	6013      	str	r3, [r2, #0]
 80036e6:	e030      	b.n	800374a <HAL_RCC_OscConfig+0x16a>
 80036e8:	1d3b      	adds	r3, r7, #4
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10c      	bne.n	800370c <HAL_RCC_OscConfig+0x12c>
 80036f2:	4b77      	ldr	r3, [pc, #476]	; (80038d0 <HAL_RCC_OscConfig+0x2f0>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a76      	ldr	r2, [pc, #472]	; (80038d0 <HAL_RCC_OscConfig+0x2f0>)
 80036f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036fc:	6013      	str	r3, [r2, #0]
 80036fe:	4b74      	ldr	r3, [pc, #464]	; (80038d0 <HAL_RCC_OscConfig+0x2f0>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a73      	ldr	r2, [pc, #460]	; (80038d0 <HAL_RCC_OscConfig+0x2f0>)
 8003704:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003708:	6013      	str	r3, [r2, #0]
 800370a:	e01e      	b.n	800374a <HAL_RCC_OscConfig+0x16a>
 800370c:	1d3b      	adds	r3, r7, #4
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003716:	d10c      	bne.n	8003732 <HAL_RCC_OscConfig+0x152>
 8003718:	4b6d      	ldr	r3, [pc, #436]	; (80038d0 <HAL_RCC_OscConfig+0x2f0>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a6c      	ldr	r2, [pc, #432]	; (80038d0 <HAL_RCC_OscConfig+0x2f0>)
 800371e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003722:	6013      	str	r3, [r2, #0]
 8003724:	4b6a      	ldr	r3, [pc, #424]	; (80038d0 <HAL_RCC_OscConfig+0x2f0>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a69      	ldr	r2, [pc, #420]	; (80038d0 <HAL_RCC_OscConfig+0x2f0>)
 800372a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800372e:	6013      	str	r3, [r2, #0]
 8003730:	e00b      	b.n	800374a <HAL_RCC_OscConfig+0x16a>
 8003732:	4b67      	ldr	r3, [pc, #412]	; (80038d0 <HAL_RCC_OscConfig+0x2f0>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a66      	ldr	r2, [pc, #408]	; (80038d0 <HAL_RCC_OscConfig+0x2f0>)
 8003738:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800373c:	6013      	str	r3, [r2, #0]
 800373e:	4b64      	ldr	r3, [pc, #400]	; (80038d0 <HAL_RCC_OscConfig+0x2f0>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a63      	ldr	r2, [pc, #396]	; (80038d0 <HAL_RCC_OscConfig+0x2f0>)
 8003744:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003748:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800374a:	4b61      	ldr	r3, [pc, #388]	; (80038d0 <HAL_RCC_OscConfig+0x2f0>)
 800374c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374e:	f023 020f 	bic.w	r2, r3, #15
 8003752:	1d3b      	adds	r3, r7, #4
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	495d      	ldr	r1, [pc, #372]	; (80038d0 <HAL_RCC_OscConfig+0x2f0>)
 800375a:	4313      	orrs	r3, r2
 800375c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800375e:	1d3b      	adds	r3, r7, #4
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d059      	beq.n	800381c <HAL_RCC_OscConfig+0x23c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003768:	f7fe ff7a 	bl	8002660 <HAL_GetTick>
 800376c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003770:	e00a      	b.n	8003788 <HAL_RCC_OscConfig+0x1a8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003772:	f7fe ff75 	bl	8002660 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b64      	cmp	r3, #100	; 0x64
 8003780:	d902      	bls.n	8003788 <HAL_RCC_OscConfig+0x1a8>
          {
            return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	f000 be0a 	b.w	800439c <HAL_RCC_OscConfig+0xdbc>
 8003788:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800378c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003790:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003794:	fa93 f3a3 	rbit	r3, r3
 8003798:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800379c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a0:	fab3 f383 	clz	r3, r3
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	095b      	lsrs	r3, r3, #5
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	f043 0301 	orr.w	r3, r3, #1
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d102      	bne.n	80037ba <HAL_RCC_OscConfig+0x1da>
 80037b4:	4b46      	ldr	r3, [pc, #280]	; (80038d0 <HAL_RCC_OscConfig+0x2f0>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	e015      	b.n	80037e6 <HAL_RCC_OscConfig+0x206>
 80037ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037be:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80037c6:	fa93 f3a3 	rbit	r3, r3
 80037ca:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80037ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80037d2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80037d6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80037da:	fa93 f3a3 	rbit	r3, r3
 80037de:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80037e2:	4b3b      	ldr	r3, [pc, #236]	; (80038d0 <HAL_RCC_OscConfig+0x2f0>)
 80037e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037ea:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80037ee:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80037f2:	fa92 f2a2 	rbit	r2, r2
 80037f6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80037fa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80037fe:	fab2 f282 	clz	r2, r2
 8003802:	b2d2      	uxtb	r2, r2
 8003804:	f042 0220 	orr.w	r2, r2, #32
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	f002 021f 	and.w	r2, r2, #31
 800380e:	2101      	movs	r1, #1
 8003810:	fa01 f202 	lsl.w	r2, r1, r2
 8003814:	4013      	ands	r3, r2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d0ab      	beq.n	8003772 <HAL_RCC_OscConfig+0x192>
 800381a:	e05c      	b.n	80038d6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381c:	f7fe ff20 	bl	8002660 <HAL_GetTick>
 8003820:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003824:	e00a      	b.n	800383c <HAL_RCC_OscConfig+0x25c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003826:	f7fe ff1b 	bl	8002660 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b64      	cmp	r3, #100	; 0x64
 8003834:	d902      	bls.n	800383c <HAL_RCC_OscConfig+0x25c>
          {
            return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	f000 bdb0 	b.w	800439c <HAL_RCC_OscConfig+0xdbc>
 800383c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003840:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003844:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003848:	fa93 f3a3 	rbit	r3, r3
 800384c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003850:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003854:	fab3 f383 	clz	r3, r3
 8003858:	b2db      	uxtb	r3, r3
 800385a:	095b      	lsrs	r3, r3, #5
 800385c:	b2db      	uxtb	r3, r3
 800385e:	f043 0301 	orr.w	r3, r3, #1
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b01      	cmp	r3, #1
 8003866:	d102      	bne.n	800386e <HAL_RCC_OscConfig+0x28e>
 8003868:	4b19      	ldr	r3, [pc, #100]	; (80038d0 <HAL_RCC_OscConfig+0x2f0>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	e015      	b.n	800389a <HAL_RCC_OscConfig+0x2ba>
 800386e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003872:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003876:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800387a:	fa93 f3a3 	rbit	r3, r3
 800387e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003882:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003886:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800388a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800388e:	fa93 f3a3 	rbit	r3, r3
 8003892:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003896:	4b0e      	ldr	r3, [pc, #56]	; (80038d0 <HAL_RCC_OscConfig+0x2f0>)
 8003898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800389e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80038a2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80038a6:	fa92 f2a2 	rbit	r2, r2
 80038aa:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80038ae:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80038b2:	fab2 f282 	clz	r2, r2
 80038b6:	b2d2      	uxtb	r2, r2
 80038b8:	f042 0220 	orr.w	r2, r2, #32
 80038bc:	b2d2      	uxtb	r2, r2
 80038be:	f002 021f 	and.w	r2, r2, #31
 80038c2:	2101      	movs	r1, #1
 80038c4:	fa01 f202 	lsl.w	r2, r1, r2
 80038c8:	4013      	ands	r3, r2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1ab      	bne.n	8003826 <HAL_RCC_OscConfig+0x246>
 80038ce:	e002      	b.n	80038d6 <HAL_RCC_OscConfig+0x2f6>
 80038d0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038d6:	1d3b      	adds	r3, r7, #4
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 816f 	beq.w	8003bc4 <HAL_RCC_OscConfig+0x5e4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80038e6:	4bd0      	ldr	r3, [pc, #832]	; (8003c28 <HAL_RCC_OscConfig+0x648>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f003 030c 	and.w	r3, r3, #12
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00b      	beq.n	800390a <HAL_RCC_OscConfig+0x32a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80038f2:	4bcd      	ldr	r3, [pc, #820]	; (8003c28 <HAL_RCC_OscConfig+0x648>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f003 030c 	and.w	r3, r3, #12
 80038fa:	2b08      	cmp	r3, #8
 80038fc:	d16c      	bne.n	80039d8 <HAL_RCC_OscConfig+0x3f8>
 80038fe:	4bca      	ldr	r3, [pc, #808]	; (8003c28 <HAL_RCC_OscConfig+0x648>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d166      	bne.n	80039d8 <HAL_RCC_OscConfig+0x3f8>
 800390a:	2302      	movs	r3, #2
 800390c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003910:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003914:	fa93 f3a3 	rbit	r3, r3
 8003918:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800391c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003920:	fab3 f383 	clz	r3, r3
 8003924:	b2db      	uxtb	r3, r3
 8003926:	095b      	lsrs	r3, r3, #5
 8003928:	b2db      	uxtb	r3, r3
 800392a:	f043 0301 	orr.w	r3, r3, #1
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b01      	cmp	r3, #1
 8003932:	d102      	bne.n	800393a <HAL_RCC_OscConfig+0x35a>
 8003934:	4bbc      	ldr	r3, [pc, #752]	; (8003c28 <HAL_RCC_OscConfig+0x648>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	e013      	b.n	8003962 <HAL_RCC_OscConfig+0x382>
 800393a:	2302      	movs	r3, #2
 800393c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003940:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003944:	fa93 f3a3 	rbit	r3, r3
 8003948:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800394c:	2302      	movs	r3, #2
 800394e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003952:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003956:	fa93 f3a3 	rbit	r3, r3
 800395a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800395e:	4bb2      	ldr	r3, [pc, #712]	; (8003c28 <HAL_RCC_OscConfig+0x648>)
 8003960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003962:	2202      	movs	r2, #2
 8003964:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003968:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800396c:	fa92 f2a2 	rbit	r2, r2
 8003970:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003974:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003978:	fab2 f282 	clz	r2, r2
 800397c:	b2d2      	uxtb	r2, r2
 800397e:	f042 0220 	orr.w	r2, r2, #32
 8003982:	b2d2      	uxtb	r2, r2
 8003984:	f002 021f 	and.w	r2, r2, #31
 8003988:	2101      	movs	r1, #1
 800398a:	fa01 f202 	lsl.w	r2, r1, r2
 800398e:	4013      	ands	r3, r2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d007      	beq.n	80039a4 <HAL_RCC_OscConfig+0x3c4>
 8003994:	1d3b      	adds	r3, r7, #4
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d002      	beq.n	80039a4 <HAL_RCC_OscConfig+0x3c4>
      {
        return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	f000 bcfc 	b.w	800439c <HAL_RCC_OscConfig+0xdbc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039a4:	4ba0      	ldr	r3, [pc, #640]	; (8003c28 <HAL_RCC_OscConfig+0x648>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039ac:	1d3b      	adds	r3, r7, #4
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	21f8      	movs	r1, #248	; 0xf8
 80039b4:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b8:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80039bc:	fa91 f1a1 	rbit	r1, r1
 80039c0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80039c4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80039c8:	fab1 f181 	clz	r1, r1
 80039cc:	b2c9      	uxtb	r1, r1
 80039ce:	408b      	lsls	r3, r1
 80039d0:	4995      	ldr	r1, [pc, #596]	; (8003c28 <HAL_RCC_OscConfig+0x648>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039d6:	e0f5      	b.n	8003bc4 <HAL_RCC_OscConfig+0x5e4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039d8:	1d3b      	adds	r3, r7, #4
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 8085 	beq.w	8003aee <HAL_RCC_OscConfig+0x50e>
 80039e4:	2301      	movs	r3, #1
 80039e6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ea:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80039ee:	fa93 f3a3 	rbit	r3, r3
 80039f2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80039f6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039fa:	fab3 f383 	clz	r3, r3
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a10:	f7fe fe26 	bl	8002660 <HAL_GetTick>
 8003a14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a18:	e00a      	b.n	8003a30 <HAL_RCC_OscConfig+0x450>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a1a:	f7fe fe21 	bl	8002660 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d902      	bls.n	8003a30 <HAL_RCC_OscConfig+0x450>
          {
            return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	f000 bcb6 	b.w	800439c <HAL_RCC_OscConfig+0xdbc>
 8003a30:	2302      	movs	r3, #2
 8003a32:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a36:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003a3a:	fa93 f3a3 	rbit	r3, r3
 8003a3e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003a42:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a46:	fab3 f383 	clz	r3, r3
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	095b      	lsrs	r3, r3, #5
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	f043 0301 	orr.w	r3, r3, #1
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d102      	bne.n	8003a60 <HAL_RCC_OscConfig+0x480>
 8003a5a:	4b73      	ldr	r3, [pc, #460]	; (8003c28 <HAL_RCC_OscConfig+0x648>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	e013      	b.n	8003a88 <HAL_RCC_OscConfig+0x4a8>
 8003a60:	2302      	movs	r3, #2
 8003a62:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a66:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003a6a:	fa93 f3a3 	rbit	r3, r3
 8003a6e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003a72:	2302      	movs	r3, #2
 8003a74:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003a78:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003a7c:	fa93 f3a3 	rbit	r3, r3
 8003a80:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003a84:	4b68      	ldr	r3, [pc, #416]	; (8003c28 <HAL_RCC_OscConfig+0x648>)
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	2202      	movs	r2, #2
 8003a8a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003a8e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003a92:	fa92 f2a2 	rbit	r2, r2
 8003a96:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003a9a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003a9e:	fab2 f282 	clz	r2, r2
 8003aa2:	b2d2      	uxtb	r2, r2
 8003aa4:	f042 0220 	orr.w	r2, r2, #32
 8003aa8:	b2d2      	uxtb	r2, r2
 8003aaa:	f002 021f 	and.w	r2, r2, #31
 8003aae:	2101      	movs	r1, #1
 8003ab0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d0af      	beq.n	8003a1a <HAL_RCC_OscConfig+0x43a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aba:	4b5b      	ldr	r3, [pc, #364]	; (8003c28 <HAL_RCC_OscConfig+0x648>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ac2:	1d3b      	adds	r3, r7, #4
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	21f8      	movs	r1, #248	; 0xf8
 8003aca:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ace:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003ad2:	fa91 f1a1 	rbit	r1, r1
 8003ad6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003ada:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003ade:	fab1 f181 	clz	r1, r1
 8003ae2:	b2c9      	uxtb	r1, r1
 8003ae4:	408b      	lsls	r3, r1
 8003ae6:	4950      	ldr	r1, [pc, #320]	; (8003c28 <HAL_RCC_OscConfig+0x648>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	600b      	str	r3, [r1, #0]
 8003aec:	e06a      	b.n	8003bc4 <HAL_RCC_OscConfig+0x5e4>
 8003aee:	2301      	movs	r3, #1
 8003af0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003af8:	fa93 f3a3 	rbit	r3, r3
 8003afc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003b00:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b04:	fab3 f383 	clz	r3, r3
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b0e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	461a      	mov	r2, r3
 8003b16:	2300      	movs	r3, #0
 8003b18:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1a:	f7fe fda1 	bl	8002660 <HAL_GetTick>
 8003b1e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b22:	e00a      	b.n	8003b3a <HAL_RCC_OscConfig+0x55a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b24:	f7fe fd9c 	bl	8002660 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d902      	bls.n	8003b3a <HAL_RCC_OscConfig+0x55a>
          {
            return HAL_TIMEOUT;
 8003b34:	2303      	movs	r3, #3
 8003b36:	f000 bc31 	b.w	800439c <HAL_RCC_OscConfig+0xdbc>
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b40:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003b44:	fa93 f3a3 	rbit	r3, r3
 8003b48:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003b4c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b50:	fab3 f383 	clz	r3, r3
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	095b      	lsrs	r3, r3, #5
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	f043 0301 	orr.w	r3, r3, #1
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d102      	bne.n	8003b6a <HAL_RCC_OscConfig+0x58a>
 8003b64:	4b30      	ldr	r3, [pc, #192]	; (8003c28 <HAL_RCC_OscConfig+0x648>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	e013      	b.n	8003b92 <HAL_RCC_OscConfig+0x5b2>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003b74:	fa93 f3a3 	rbit	r3, r3
 8003b78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003b82:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003b86:	fa93 f3a3 	rbit	r3, r3
 8003b8a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003b8e:	4b26      	ldr	r3, [pc, #152]	; (8003c28 <HAL_RCC_OscConfig+0x648>)
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	2202      	movs	r2, #2
 8003b94:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003b98:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003b9c:	fa92 f2a2 	rbit	r2, r2
 8003ba0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8003ba4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003ba8:	fab2 f282 	clz	r2, r2
 8003bac:	b2d2      	uxtb	r2, r2
 8003bae:	f042 0220 	orr.w	r2, r2, #32
 8003bb2:	b2d2      	uxtb	r2, r2
 8003bb4:	f002 021f 	and.w	r2, r2, #31
 8003bb8:	2101      	movs	r1, #1
 8003bba:	fa01 f202 	lsl.w	r2, r1, r2
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1af      	bne.n	8003b24 <HAL_RCC_OscConfig+0x544>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bc4:	1d3b      	adds	r3, r7, #4
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f000 80d8 	beq.w	8003d84 <HAL_RCC_OscConfig+0x7a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bd4:	1d3b      	adds	r3, r7, #4
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d067      	beq.n	8003cae <HAL_RCC_OscConfig+0x6ce>
 8003bde:	2301      	movs	r3, #1
 8003be0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003be8:	fa93 f3a3 	rbit	r3, r3
 8003bec:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8003bf0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bf4:	fab3 f383 	clz	r3, r3
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <HAL_RCC_OscConfig+0x64c>)
 8003bfe:	4413      	add	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	461a      	mov	r2, r3
 8003c04:	2301      	movs	r3, #1
 8003c06:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c08:	f7fe fd2a 	bl	8002660 <HAL_GetTick>
 8003c0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c10:	e00e      	b.n	8003c30 <HAL_RCC_OscConfig+0x650>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c12:	f7fe fd25 	bl	8002660 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d906      	bls.n	8003c30 <HAL_RCC_OscConfig+0x650>
        {
          return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e3ba      	b.n	800439c <HAL_RCC_OscConfig+0xdbc>
 8003c26:	bf00      	nop
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	10908120 	.word	0x10908120
 8003c30:	2302      	movs	r3, #2
 8003c32:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c3a:	fa93 f3a3 	rbit	r3, r3
 8003c3e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003c42:	2302      	movs	r3, #2
 8003c44:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c4c:	fa93 f2a3 	rbit	r2, r3
 8003c50:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	601a      	str	r2, [r3, #0]
 8003c5e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	fa93 f2a3 	rbit	r2, r3
 8003c68:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003c6c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c6e:	4ba5      	ldr	r3, [pc, #660]	; (8003f04 <HAL_RCC_OscConfig+0x924>)
 8003c70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c72:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003c76:	2102      	movs	r1, #2
 8003c78:	6019      	str	r1, [r3, #0]
 8003c7a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	fa93 f1a3 	rbit	r1, r3
 8003c84:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003c88:	6019      	str	r1, [r3, #0]
  return result;
 8003c8a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	fab3 f383 	clz	r3, r3
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	f003 031f 	and.w	r3, r3, #31
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d0b2      	beq.n	8003c12 <HAL_RCC_OscConfig+0x632>
 8003cac:	e06a      	b.n	8003d84 <HAL_RCC_OscConfig+0x7a4>
 8003cae:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	fa93 f2a3 	rbit	r2, r3
 8003cc0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003cc4:	601a      	str	r2, [r3, #0]
  return result;
 8003cc6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003cca:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ccc:	fab3 f383 	clz	r3, r3
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	4b8c      	ldr	r3, [pc, #560]	; (8003f08 <HAL_RCC_OscConfig+0x928>)
 8003cd6:	4413      	add	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	461a      	mov	r2, r3
 8003cdc:	2300      	movs	r3, #0
 8003cde:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ce0:	f7fe fcbe 	bl	8002660 <HAL_GetTick>
 8003ce4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ce8:	e009      	b.n	8003cfe <HAL_RCC_OscConfig+0x71e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cea:	f7fe fcb9 	bl	8002660 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d901      	bls.n	8003cfe <HAL_RCC_OscConfig+0x71e>
        {
          return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e34e      	b.n	800439c <HAL_RCC_OscConfig+0xdbc>
 8003cfe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003d02:	2202      	movs	r2, #2
 8003d04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d06:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	fa93 f2a3 	rbit	r2, r3
 8003d10:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	fa93 f2a3 	rbit	r2, r3
 8003d28:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003d32:	2202      	movs	r2, #2
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	fa93 f2a3 	rbit	r2, r3
 8003d40:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003d44:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d46:	4b6f      	ldr	r3, [pc, #444]	; (8003f04 <HAL_RCC_OscConfig+0x924>)
 8003d48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d4a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003d4e:	2102      	movs	r1, #2
 8003d50:	6019      	str	r1, [r3, #0]
 8003d52:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	fa93 f1a3 	rbit	r1, r3
 8003d5c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003d60:	6019      	str	r1, [r3, #0]
  return result;
 8003d62:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	fab3 f383 	clz	r3, r3
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	f003 031f 	and.w	r3, r3, #31
 8003d78:	2101      	movs	r1, #1
 8003d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7e:	4013      	ands	r3, r2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1b2      	bne.n	8003cea <HAL_RCC_OscConfig+0x70a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d84:	1d3b      	adds	r3, r7, #4
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0304 	and.w	r3, r3, #4
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f000 8158 	beq.w	8004044 <HAL_RCC_OscConfig+0xa64>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d94:	2300      	movs	r3, #0
 8003d96:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d9a:	4b5a      	ldr	r3, [pc, #360]	; (8003f04 <HAL_RCC_OscConfig+0x924>)
 8003d9c:	69db      	ldr	r3, [r3, #28]
 8003d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d112      	bne.n	8003dcc <HAL_RCC_OscConfig+0x7ec>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003da6:	4b57      	ldr	r3, [pc, #348]	; (8003f04 <HAL_RCC_OscConfig+0x924>)
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	4a56      	ldr	r2, [pc, #344]	; (8003f04 <HAL_RCC_OscConfig+0x924>)
 8003dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003db0:	61d3      	str	r3, [r2, #28]
 8003db2:	4b54      	ldr	r3, [pc, #336]	; (8003f04 <HAL_RCC_OscConfig+0x924>)
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003dba:	f107 030c 	add.w	r3, r7, #12
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	f107 030c 	add.w	r3, r7, #12
 8003dc4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dcc:	4b4f      	ldr	r3, [pc, #316]	; (8003f0c <HAL_RCC_OscConfig+0x92c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d11a      	bne.n	8003e0e <HAL_RCC_OscConfig+0x82e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dd8:	4b4c      	ldr	r3, [pc, #304]	; (8003f0c <HAL_RCC_OscConfig+0x92c>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a4b      	ldr	r2, [pc, #300]	; (8003f0c <HAL_RCC_OscConfig+0x92c>)
 8003dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003de2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003de4:	f7fe fc3c 	bl	8002660 <HAL_GetTick>
 8003de8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dec:	e009      	b.n	8003e02 <HAL_RCC_OscConfig+0x822>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dee:	f7fe fc37 	bl	8002660 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b64      	cmp	r3, #100	; 0x64
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x822>
        {
          return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e2cc      	b.n	800439c <HAL_RCC_OscConfig+0xdbc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e02:	4b42      	ldr	r3, [pc, #264]	; (8003f0c <HAL_RCC_OscConfig+0x92c>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d0ef      	beq.n	8003dee <HAL_RCC_OscConfig+0x80e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e0e:	1d3b      	adds	r3, r7, #4
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d106      	bne.n	8003e26 <HAL_RCC_OscConfig+0x846>
 8003e18:	4b3a      	ldr	r3, [pc, #232]	; (8003f04 <HAL_RCC_OscConfig+0x924>)
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	4a39      	ldr	r2, [pc, #228]	; (8003f04 <HAL_RCC_OscConfig+0x924>)
 8003e1e:	f043 0301 	orr.w	r3, r3, #1
 8003e22:	6213      	str	r3, [r2, #32]
 8003e24:	e02f      	b.n	8003e86 <HAL_RCC_OscConfig+0x8a6>
 8003e26:	1d3b      	adds	r3, r7, #4
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d10c      	bne.n	8003e4a <HAL_RCC_OscConfig+0x86a>
 8003e30:	4b34      	ldr	r3, [pc, #208]	; (8003f04 <HAL_RCC_OscConfig+0x924>)
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	4a33      	ldr	r2, [pc, #204]	; (8003f04 <HAL_RCC_OscConfig+0x924>)
 8003e36:	f023 0301 	bic.w	r3, r3, #1
 8003e3a:	6213      	str	r3, [r2, #32]
 8003e3c:	4b31      	ldr	r3, [pc, #196]	; (8003f04 <HAL_RCC_OscConfig+0x924>)
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	4a30      	ldr	r2, [pc, #192]	; (8003f04 <HAL_RCC_OscConfig+0x924>)
 8003e42:	f023 0304 	bic.w	r3, r3, #4
 8003e46:	6213      	str	r3, [r2, #32]
 8003e48:	e01d      	b.n	8003e86 <HAL_RCC_OscConfig+0x8a6>
 8003e4a:	1d3b      	adds	r3, r7, #4
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	2b05      	cmp	r3, #5
 8003e52:	d10c      	bne.n	8003e6e <HAL_RCC_OscConfig+0x88e>
 8003e54:	4b2b      	ldr	r3, [pc, #172]	; (8003f04 <HAL_RCC_OscConfig+0x924>)
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	4a2a      	ldr	r2, [pc, #168]	; (8003f04 <HAL_RCC_OscConfig+0x924>)
 8003e5a:	f043 0304 	orr.w	r3, r3, #4
 8003e5e:	6213      	str	r3, [r2, #32]
 8003e60:	4b28      	ldr	r3, [pc, #160]	; (8003f04 <HAL_RCC_OscConfig+0x924>)
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	4a27      	ldr	r2, [pc, #156]	; (8003f04 <HAL_RCC_OscConfig+0x924>)
 8003e66:	f043 0301 	orr.w	r3, r3, #1
 8003e6a:	6213      	str	r3, [r2, #32]
 8003e6c:	e00b      	b.n	8003e86 <HAL_RCC_OscConfig+0x8a6>
 8003e6e:	4b25      	ldr	r3, [pc, #148]	; (8003f04 <HAL_RCC_OscConfig+0x924>)
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	4a24      	ldr	r2, [pc, #144]	; (8003f04 <HAL_RCC_OscConfig+0x924>)
 8003e74:	f023 0301 	bic.w	r3, r3, #1
 8003e78:	6213      	str	r3, [r2, #32]
 8003e7a:	4b22      	ldr	r3, [pc, #136]	; (8003f04 <HAL_RCC_OscConfig+0x924>)
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	4a21      	ldr	r2, [pc, #132]	; (8003f04 <HAL_RCC_OscConfig+0x924>)
 8003e80:	f023 0304 	bic.w	r3, r3, #4
 8003e84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e86:	1d3b      	adds	r3, r7, #4
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d06b      	beq.n	8003f68 <HAL_RCC_OscConfig+0x988>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e90:	f7fe fbe6 	bl	8002660 <HAL_GetTick>
 8003e94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e98:	e00b      	b.n	8003eb2 <HAL_RCC_OscConfig+0x8d2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e9a:	f7fe fbe1 	bl	8002660 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x8d2>
        {
          return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e274      	b.n	800439c <HAL_RCC_OscConfig+0xdbc>
 8003eb2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eba:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	fa93 f2a3 	rbit	r2, r3
 8003ec4:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003ece:	2202      	movs	r2, #2
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	fa93 f2a3 	rbit	r2, r3
 8003edc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003ee0:	601a      	str	r2, [r3, #0]
  return result;
 8003ee2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003ee6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee8:	fab3 f383 	clz	r3, r3
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	095b      	lsrs	r3, r3, #5
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	f043 0302 	orr.w	r3, r3, #2
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d109      	bne.n	8003f10 <HAL_RCC_OscConfig+0x930>
 8003efc:	4b01      	ldr	r3, [pc, #4]	; (8003f04 <HAL_RCC_OscConfig+0x924>)
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	e014      	b.n	8003f2c <HAL_RCC_OscConfig+0x94c>
 8003f02:	bf00      	nop
 8003f04:	40021000 	.word	0x40021000
 8003f08:	10908120 	.word	0x10908120
 8003f0c:	40007000 	.word	0x40007000
 8003f10:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003f14:	2202      	movs	r2, #2
 8003f16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f18:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	fa93 f2a3 	rbit	r2, r3
 8003f22:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	4bbb      	ldr	r3, [pc, #748]	; (8004218 <HAL_RCC_OscConfig+0xc38>)
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003f30:	2102      	movs	r1, #2
 8003f32:	6011      	str	r1, [r2, #0]
 8003f34:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003f38:	6812      	ldr	r2, [r2, #0]
 8003f3a:	fa92 f1a2 	rbit	r1, r2
 8003f3e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003f42:	6011      	str	r1, [r2, #0]
  return result;
 8003f44:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003f48:	6812      	ldr	r2, [r2, #0]
 8003f4a:	fab2 f282 	clz	r2, r2
 8003f4e:	b2d2      	uxtb	r2, r2
 8003f50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f54:	b2d2      	uxtb	r2, r2
 8003f56:	f002 021f 	and.w	r2, r2, #31
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f60:	4013      	ands	r3, r2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d099      	beq.n	8003e9a <HAL_RCC_OscConfig+0x8ba>
 8003f66:	e063      	b.n	8004030 <HAL_RCC_OscConfig+0xa50>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f68:	f7fe fb7a 	bl	8002660 <HAL_GetTick>
 8003f6c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f70:	e00b      	b.n	8003f8a <HAL_RCC_OscConfig+0x9aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f72:	f7fe fb75 	bl	8002660 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0x9aa>
        {
          return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e208      	b.n	800439c <HAL_RCC_OscConfig+0xdbc>
 8003f8a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003f8e:	2202      	movs	r2, #2
 8003f90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f92:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	fa93 f2a3 	rbit	r2, r3
 8003f9c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	fa93 f2a3 	rbit	r2, r3
 8003fb4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003fb8:	601a      	str	r2, [r3, #0]
  return result;
 8003fba:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003fbe:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fc0:	fab3 f383 	clz	r3, r3
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	095b      	lsrs	r3, r3, #5
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	f043 0302 	orr.w	r3, r3, #2
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d102      	bne.n	8003fda <HAL_RCC_OscConfig+0x9fa>
 8003fd4:	4b90      	ldr	r3, [pc, #576]	; (8004218 <HAL_RCC_OscConfig+0xc38>)
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	e00d      	b.n	8003ff6 <HAL_RCC_OscConfig+0xa16>
 8003fda:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003fde:	2202      	movs	r2, #2
 8003fe0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	fa93 f2a3 	rbit	r2, r3
 8003fec:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	4b89      	ldr	r3, [pc, #548]	; (8004218 <HAL_RCC_OscConfig+0xc38>)
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003ffa:	2102      	movs	r1, #2
 8003ffc:	6011      	str	r1, [r2, #0]
 8003ffe:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8004002:	6812      	ldr	r2, [r2, #0]
 8004004:	fa92 f1a2 	rbit	r1, r2
 8004008:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800400c:	6011      	str	r1, [r2, #0]
  return result;
 800400e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004012:	6812      	ldr	r2, [r2, #0]
 8004014:	fab2 f282 	clz	r2, r2
 8004018:	b2d2      	uxtb	r2, r2
 800401a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800401e:	b2d2      	uxtb	r2, r2
 8004020:	f002 021f 	and.w	r2, r2, #31
 8004024:	2101      	movs	r1, #1
 8004026:	fa01 f202 	lsl.w	r2, r1, r2
 800402a:	4013      	ands	r3, r2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1a0      	bne.n	8003f72 <HAL_RCC_OscConfig+0x992>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004030:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004034:	2b01      	cmp	r3, #1
 8004036:	d105      	bne.n	8004044 <HAL_RCC_OscConfig+0xa64>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004038:	4b77      	ldr	r3, [pc, #476]	; (8004218 <HAL_RCC_OscConfig+0xc38>)
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	4a76      	ldr	r2, [pc, #472]	; (8004218 <HAL_RCC_OscConfig+0xc38>)
 800403e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004042:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004044:	1d3b      	adds	r3, r7, #4
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 81a5 	beq.w	800439a <HAL_RCC_OscConfig+0xdba>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004050:	4b71      	ldr	r3, [pc, #452]	; (8004218 <HAL_RCC_OscConfig+0xc38>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f003 030c 	and.w	r3, r3, #12
 8004058:	2b08      	cmp	r3, #8
 800405a:	f000 819c 	beq.w	8004396 <HAL_RCC_OscConfig+0xdb6>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800405e:	1d3b      	adds	r3, r7, #4
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	69db      	ldr	r3, [r3, #28]
 8004064:	2b02      	cmp	r3, #2
 8004066:	f040 8114 	bne.w	8004292 <HAL_RCC_OscConfig+0xcb2>
 800406a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800406e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004072:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004074:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	fa93 f2a3 	rbit	r2, r3
 800407e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004082:	601a      	str	r2, [r3, #0]
  return result;
 8004084:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004088:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800408a:	fab3 f383 	clz	r3, r3
 800408e:	b2db      	uxtb	r3, r3
 8004090:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004094:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	461a      	mov	r2, r3
 800409c:	2300      	movs	r3, #0
 800409e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a0:	f7fe fade 	bl	8002660 <HAL_GetTick>
 80040a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040a8:	e009      	b.n	80040be <HAL_RCC_OscConfig+0xade>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040aa:	f7fe fad9 	bl	8002660 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0xade>
          {
            return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e16e      	b.n	800439c <HAL_RCC_OscConfig+0xdbc>
 80040be:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80040c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	fa93 f2a3 	rbit	r2, r3
 80040d2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80040d6:	601a      	str	r2, [r3, #0]
  return result;
 80040d8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80040dc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040de:	fab3 f383 	clz	r3, r3
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	095b      	lsrs	r3, r3, #5
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	f043 0301 	orr.w	r3, r3, #1
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d102      	bne.n	80040f8 <HAL_RCC_OscConfig+0xb18>
 80040f2:	4b49      	ldr	r3, [pc, #292]	; (8004218 <HAL_RCC_OscConfig+0xc38>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	e01b      	b.n	8004130 <HAL_RCC_OscConfig+0xb50>
 80040f8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80040fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004100:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004102:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	fa93 f2a3 	rbit	r2, r3
 800410c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004116:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	fa93 f2a3 	rbit	r2, r3
 8004126:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	4b3a      	ldr	r3, [pc, #232]	; (8004218 <HAL_RCC_OscConfig+0xc38>)
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004134:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004138:	6011      	str	r1, [r2, #0]
 800413a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800413e:	6812      	ldr	r2, [r2, #0]
 8004140:	fa92 f1a2 	rbit	r1, r2
 8004144:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004148:	6011      	str	r1, [r2, #0]
  return result;
 800414a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800414e:	6812      	ldr	r2, [r2, #0]
 8004150:	fab2 f282 	clz	r2, r2
 8004154:	b2d2      	uxtb	r2, r2
 8004156:	f042 0220 	orr.w	r2, r2, #32
 800415a:	b2d2      	uxtb	r2, r2
 800415c:	f002 021f 	and.w	r2, r2, #31
 8004160:	2101      	movs	r1, #1
 8004162:	fa01 f202 	lsl.w	r2, r1, r2
 8004166:	4013      	ands	r3, r2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d19e      	bne.n	80040aa <HAL_RCC_OscConfig+0xaca>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800416c:	4b2a      	ldr	r3, [pc, #168]	; (8004218 <HAL_RCC_OscConfig+0xc38>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004174:	1d3b      	adds	r3, r7, #4
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800417a:	1d3b      	adds	r3, r7, #4
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	430b      	orrs	r3, r1
 8004182:	4925      	ldr	r1, [pc, #148]	; (8004218 <HAL_RCC_OscConfig+0xc38>)
 8004184:	4313      	orrs	r3, r2
 8004186:	604b      	str	r3, [r1, #4]
 8004188:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800418c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004190:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004192:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	fa93 f2a3 	rbit	r2, r3
 800419c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80041a0:	601a      	str	r2, [r3, #0]
  return result;
 80041a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80041a6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041a8:	fab3 f383 	clz	r3, r3
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80041b2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	461a      	mov	r2, r3
 80041ba:	2301      	movs	r3, #1
 80041bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041be:	f7fe fa4f 	bl	8002660 <HAL_GetTick>
 80041c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041c6:	e009      	b.n	80041dc <HAL_RCC_OscConfig+0xbfc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041c8:	f7fe fa4a 	bl	8002660 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d901      	bls.n	80041dc <HAL_RCC_OscConfig+0xbfc>
          {
            return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e0df      	b.n	800439c <HAL_RCC_OscConfig+0xdbc>
 80041dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80041e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	fa93 f2a3 	rbit	r2, r3
 80041f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80041f4:	601a      	str	r2, [r3, #0]
  return result;
 80041f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80041fa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041fc:	fab3 f383 	clz	r3, r3
 8004200:	b2db      	uxtb	r3, r3
 8004202:	095b      	lsrs	r3, r3, #5
 8004204:	b2db      	uxtb	r3, r3
 8004206:	f043 0301 	orr.w	r3, r3, #1
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b01      	cmp	r3, #1
 800420e:	d105      	bne.n	800421c <HAL_RCC_OscConfig+0xc3c>
 8004210:	4b01      	ldr	r3, [pc, #4]	; (8004218 <HAL_RCC_OscConfig+0xc38>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	e01e      	b.n	8004254 <HAL_RCC_OscConfig+0xc74>
 8004216:	bf00      	nop
 8004218:	40021000 	.word	0x40021000
 800421c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004220:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004224:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004226:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	fa93 f2a3 	rbit	r2, r3
 8004230:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800423a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	fa93 f2a3 	rbit	r2, r3
 800424a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800424e:	601a      	str	r2, [r3, #0]
 8004250:	4b55      	ldr	r3, [pc, #340]	; (80043a8 <HAL_RCC_OscConfig+0xdc8>)
 8004252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004254:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004258:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800425c:	6011      	str	r1, [r2, #0]
 800425e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004262:	6812      	ldr	r2, [r2, #0]
 8004264:	fa92 f1a2 	rbit	r1, r2
 8004268:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800426c:	6011      	str	r1, [r2, #0]
  return result;
 800426e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004272:	6812      	ldr	r2, [r2, #0]
 8004274:	fab2 f282 	clz	r2, r2
 8004278:	b2d2      	uxtb	r2, r2
 800427a:	f042 0220 	orr.w	r2, r2, #32
 800427e:	b2d2      	uxtb	r2, r2
 8004280:	f002 021f 	and.w	r2, r2, #31
 8004284:	2101      	movs	r1, #1
 8004286:	fa01 f202 	lsl.w	r2, r1, r2
 800428a:	4013      	ands	r3, r2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d09b      	beq.n	80041c8 <HAL_RCC_OscConfig+0xbe8>
 8004290:	e083      	b.n	800439a <HAL_RCC_OscConfig+0xdba>
 8004292:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004296:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800429a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	fa93 f2a3 	rbit	r2, r3
 80042a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80042aa:	601a      	str	r2, [r3, #0]
  return result;
 80042ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80042b0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042b2:	fab3 f383 	clz	r3, r3
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80042bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	461a      	mov	r2, r3
 80042c4:	2300      	movs	r3, #0
 80042c6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c8:	f7fe f9ca 	bl	8002660 <HAL_GetTick>
 80042cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042d0:	e009      	b.n	80042e6 <HAL_RCC_OscConfig+0xd06>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042d2:	f7fe f9c5 	bl	8002660 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0xd06>
          {
            return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e05a      	b.n	800439c <HAL_RCC_OscConfig+0xdbc>
 80042e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80042ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	fa93 f2a3 	rbit	r2, r3
 80042fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042fe:	601a      	str	r2, [r3, #0]
  return result;
 8004300:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004304:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004306:	fab3 f383 	clz	r3, r3
 800430a:	b2db      	uxtb	r3, r3
 800430c:	095b      	lsrs	r3, r3, #5
 800430e:	b2db      	uxtb	r3, r3
 8004310:	f043 0301 	orr.w	r3, r3, #1
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b01      	cmp	r3, #1
 8004318:	d102      	bne.n	8004320 <HAL_RCC_OscConfig+0xd40>
 800431a:	4b23      	ldr	r3, [pc, #140]	; (80043a8 <HAL_RCC_OscConfig+0xdc8>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	e01b      	b.n	8004358 <HAL_RCC_OscConfig+0xd78>
 8004320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004324:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004328:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	fa93 f2a3 	rbit	r2, r3
 8004334:	f107 0320 	add.w	r3, r7, #32
 8004338:	601a      	str	r2, [r3, #0]
 800433a:	f107 031c 	add.w	r3, r7, #28
 800433e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	f107 031c 	add.w	r3, r7, #28
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	fa93 f2a3 	rbit	r2, r3
 800434e:	f107 0318 	add.w	r3, r7, #24
 8004352:	601a      	str	r2, [r3, #0]
 8004354:	4b14      	ldr	r3, [pc, #80]	; (80043a8 <HAL_RCC_OscConfig+0xdc8>)
 8004356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004358:	f107 0214 	add.w	r2, r7, #20
 800435c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004360:	6011      	str	r1, [r2, #0]
 8004362:	f107 0214 	add.w	r2, r7, #20
 8004366:	6812      	ldr	r2, [r2, #0]
 8004368:	fa92 f1a2 	rbit	r1, r2
 800436c:	f107 0210 	add.w	r2, r7, #16
 8004370:	6011      	str	r1, [r2, #0]
  return result;
 8004372:	f107 0210 	add.w	r2, r7, #16
 8004376:	6812      	ldr	r2, [r2, #0]
 8004378:	fab2 f282 	clz	r2, r2
 800437c:	b2d2      	uxtb	r2, r2
 800437e:	f042 0220 	orr.w	r2, r2, #32
 8004382:	b2d2      	uxtb	r2, r2
 8004384:	f002 021f 	and.w	r2, r2, #31
 8004388:	2101      	movs	r1, #1
 800438a:	fa01 f202 	lsl.w	r2, r1, r2
 800438e:	4013      	ands	r3, r2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d19e      	bne.n	80042d2 <HAL_RCC_OscConfig+0xcf2>
 8004394:	e001      	b.n	800439a <HAL_RCC_OscConfig+0xdba>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e000      	b.n	800439c <HAL_RCC_OscConfig+0xdbc>
    }
  }
  
  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	40021000 	.word	0x40021000

080043ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b09e      	sub	sp, #120	; 0x78
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80043b6:	2300      	movs	r3, #0
 80043b8:	677b      	str	r3, [r7, #116]	; 0x74
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80043ba:	4ba6      	ldr	r3, [pc, #664]	; (8004654 <HAL_RCC_ClockConfig+0x2a8>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0307 	and.w	r3, r3, #7
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d910      	bls.n	80043ea <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043c8:	4ba2      	ldr	r3, [pc, #648]	; (8004654 <HAL_RCC_ClockConfig+0x2a8>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f023 0207 	bic.w	r2, r3, #7
 80043d0:	49a0      	ldr	r1, [pc, #640]	; (8004654 <HAL_RCC_ClockConfig+0x2a8>)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80043d8:	4b9e      	ldr	r3, [pc, #632]	; (8004654 <HAL_RCC_ClockConfig+0x2a8>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0307 	and.w	r3, r3, #7
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d001      	beq.n	80043ea <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e173      	b.n	80046d2 <HAL_RCC_ClockConfig+0x326>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d008      	beq.n	8004408 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043f6:	4b98      	ldr	r3, [pc, #608]	; (8004658 <HAL_RCC_ClockConfig+0x2ac>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	4995      	ldr	r1, [pc, #596]	; (8004658 <HAL_RCC_ClockConfig+0x2ac>)
 8004404:	4313      	orrs	r3, r2
 8004406:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	2b00      	cmp	r3, #0
 8004412:	f000 8106 	beq.w	8004622 <HAL_RCC_ClockConfig+0x276>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d13c      	bne.n	8004498 <HAL_RCC_ClockConfig+0xec>
 800441e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004422:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004424:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004426:	fa93 f3a3 	rbit	r3, r3
 800442a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800442c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800442e:	fab3 f383 	clz	r3, r3
 8004432:	b2db      	uxtb	r3, r3
 8004434:	095b      	lsrs	r3, r3, #5
 8004436:	b2db      	uxtb	r3, r3
 8004438:	f043 0301 	orr.w	r3, r3, #1
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b01      	cmp	r3, #1
 8004440:	d102      	bne.n	8004448 <HAL_RCC_ClockConfig+0x9c>
 8004442:	4b85      	ldr	r3, [pc, #532]	; (8004658 <HAL_RCC_ClockConfig+0x2ac>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	e00f      	b.n	8004468 <HAL_RCC_ClockConfig+0xbc>
 8004448:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800444c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004450:	fa93 f3a3 	rbit	r3, r3
 8004454:	667b      	str	r3, [r7, #100]	; 0x64
 8004456:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800445a:	663b      	str	r3, [r7, #96]	; 0x60
 800445c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800445e:	fa93 f3a3 	rbit	r3, r3
 8004462:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004464:	4b7c      	ldr	r3, [pc, #496]	; (8004658 <HAL_RCC_ClockConfig+0x2ac>)
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800446c:	65ba      	str	r2, [r7, #88]	; 0x58
 800446e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004470:	fa92 f2a2 	rbit	r2, r2
 8004474:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004476:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004478:	fab2 f282 	clz	r2, r2
 800447c:	b2d2      	uxtb	r2, r2
 800447e:	f042 0220 	orr.w	r2, r2, #32
 8004482:	b2d2      	uxtb	r2, r2
 8004484:	f002 021f 	and.w	r2, r2, #31
 8004488:	2101      	movs	r1, #1
 800448a:	fa01 f202 	lsl.w	r2, r1, r2
 800448e:	4013      	ands	r3, r2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d17b      	bne.n	800458c <HAL_RCC_ClockConfig+0x1e0>
      {
        return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e11c      	b.n	80046d2 <HAL_RCC_ClockConfig+0x326>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	2b02      	cmp	r3, #2
 800449e:	d13c      	bne.n	800451a <HAL_RCC_ClockConfig+0x16e>
 80044a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044a4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044a8:	fa93 f3a3 	rbit	r3, r3
 80044ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80044ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044b0:	fab3 f383 	clz	r3, r3
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	095b      	lsrs	r3, r3, #5
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	f043 0301 	orr.w	r3, r3, #1
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d102      	bne.n	80044ca <HAL_RCC_ClockConfig+0x11e>
 80044c4:	4b64      	ldr	r3, [pc, #400]	; (8004658 <HAL_RCC_ClockConfig+0x2ac>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	e00f      	b.n	80044ea <HAL_RCC_ClockConfig+0x13e>
 80044ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044ce:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044d2:	fa93 f3a3 	rbit	r3, r3
 80044d6:	647b      	str	r3, [r7, #68]	; 0x44
 80044d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044dc:	643b      	str	r3, [r7, #64]	; 0x40
 80044de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044e0:	fa93 f3a3 	rbit	r3, r3
 80044e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044e6:	4b5c      	ldr	r3, [pc, #368]	; (8004658 <HAL_RCC_ClockConfig+0x2ac>)
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044ee:	63ba      	str	r2, [r7, #56]	; 0x38
 80044f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044f2:	fa92 f2a2 	rbit	r2, r2
 80044f6:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80044f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044fa:	fab2 f282 	clz	r2, r2
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	f042 0220 	orr.w	r2, r2, #32
 8004504:	b2d2      	uxtb	r2, r2
 8004506:	f002 021f 	and.w	r2, r2, #31
 800450a:	2101      	movs	r1, #1
 800450c:	fa01 f202 	lsl.w	r2, r1, r2
 8004510:	4013      	ands	r3, r2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d13a      	bne.n	800458c <HAL_RCC_ClockConfig+0x1e0>
      {
        return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e0db      	b.n	80046d2 <HAL_RCC_ClockConfig+0x326>
 800451a:	2302      	movs	r3, #2
 800451c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800451e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004520:	fa93 f3a3 	rbit	r3, r3
 8004524:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004528:	fab3 f383 	clz	r3, r3
 800452c:	b2db      	uxtb	r3, r3
 800452e:	095b      	lsrs	r3, r3, #5
 8004530:	b2db      	uxtb	r3, r3
 8004532:	f043 0301 	orr.w	r3, r3, #1
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b01      	cmp	r3, #1
 800453a:	d102      	bne.n	8004542 <HAL_RCC_ClockConfig+0x196>
 800453c:	4b46      	ldr	r3, [pc, #280]	; (8004658 <HAL_RCC_ClockConfig+0x2ac>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	e00d      	b.n	800455e <HAL_RCC_ClockConfig+0x1b2>
 8004542:	2302      	movs	r3, #2
 8004544:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004548:	fa93 f3a3 	rbit	r3, r3
 800454c:	627b      	str	r3, [r7, #36]	; 0x24
 800454e:	2302      	movs	r3, #2
 8004550:	623b      	str	r3, [r7, #32]
 8004552:	6a3b      	ldr	r3, [r7, #32]
 8004554:	fa93 f3a3 	rbit	r3, r3
 8004558:	61fb      	str	r3, [r7, #28]
 800455a:	4b3f      	ldr	r3, [pc, #252]	; (8004658 <HAL_RCC_ClockConfig+0x2ac>)
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	2202      	movs	r2, #2
 8004560:	61ba      	str	r2, [r7, #24]
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	fa92 f2a2 	rbit	r2, r2
 8004568:	617a      	str	r2, [r7, #20]
  return result;
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	fab2 f282 	clz	r2, r2
 8004570:	b2d2      	uxtb	r2, r2
 8004572:	f042 0220 	orr.w	r2, r2, #32
 8004576:	b2d2      	uxtb	r2, r2
 8004578:	f002 021f 	and.w	r2, r2, #31
 800457c:	2101      	movs	r1, #1
 800457e:	fa01 f202 	lsl.w	r2, r1, r2
 8004582:	4013      	ands	r3, r2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d101      	bne.n	800458c <HAL_RCC_ClockConfig+0x1e0>
      {
        return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e0a2      	b.n	80046d2 <HAL_RCC_ClockConfig+0x326>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800458c:	4b32      	ldr	r3, [pc, #200]	; (8004658 <HAL_RCC_ClockConfig+0x2ac>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	f023 0203 	bic.w	r2, r3, #3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	492f      	ldr	r1, [pc, #188]	; (8004658 <HAL_RCC_ClockConfig+0x2ac>)
 800459a:	4313      	orrs	r3, r2
 800459c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800459e:	f7fe f85f 	bl	8002660 <HAL_GetTick>
 80045a2:	6778      	str	r0, [r7, #116]	; 0x74
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d112      	bne.n	80045d2 <HAL_RCC_ClockConfig+0x226>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80045ac:	e00a      	b.n	80045c4 <HAL_RCC_ClockConfig+0x218>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045ae:	f7fe f857 	bl	8002660 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045bc:	4293      	cmp	r3, r2
 80045be:	d901      	bls.n	80045c4 <HAL_RCC_ClockConfig+0x218>
        {
          return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e086      	b.n	80046d2 <HAL_RCC_ClockConfig+0x326>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80045c4:	4b24      	ldr	r3, [pc, #144]	; (8004658 <HAL_RCC_ClockConfig+0x2ac>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f003 030c 	and.w	r3, r3, #12
 80045cc:	2b04      	cmp	r3, #4
 80045ce:	d1ee      	bne.n	80045ae <HAL_RCC_ClockConfig+0x202>
 80045d0:	e027      	b.n	8004622 <HAL_RCC_ClockConfig+0x276>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d11d      	bne.n	8004616 <HAL_RCC_ClockConfig+0x26a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045da:	e00a      	b.n	80045f2 <HAL_RCC_ClockConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045dc:	f7fe f840 	bl	8002660 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_ClockConfig+0x246>
        {
          return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e06f      	b.n	80046d2 <HAL_RCC_ClockConfig+0x326>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045f2:	4b19      	ldr	r3, [pc, #100]	; (8004658 <HAL_RCC_ClockConfig+0x2ac>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f003 030c 	and.w	r3, r3, #12
 80045fa:	2b08      	cmp	r3, #8
 80045fc:	d1ee      	bne.n	80045dc <HAL_RCC_ClockConfig+0x230>
 80045fe:	e010      	b.n	8004622 <HAL_RCC_ClockConfig+0x276>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004600:	f7fe f82e 	bl	8002660 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	f241 3288 	movw	r2, #5000	; 0x1388
 800460e:	4293      	cmp	r3, r2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_ClockConfig+0x26a>
        {
          return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e05d      	b.n	80046d2 <HAL_RCC_ClockConfig+0x326>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004616:	4b10      	ldr	r3, [pc, #64]	; (8004658 <HAL_RCC_ClockConfig+0x2ac>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f003 030c 	and.w	r3, r3, #12
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1ee      	bne.n	8004600 <HAL_RCC_ClockConfig+0x254>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8004622:	4b0c      	ldr	r3, [pc, #48]	; (8004654 <HAL_RCC_ClockConfig+0x2a8>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0307 	and.w	r3, r3, #7
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	429a      	cmp	r2, r3
 800462e:	d215      	bcs.n	800465c <HAL_RCC_ClockConfig+0x2b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004630:	4b08      	ldr	r3, [pc, #32]	; (8004654 <HAL_RCC_ClockConfig+0x2a8>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f023 0207 	bic.w	r2, r3, #7
 8004638:	4906      	ldr	r1, [pc, #24]	; (8004654 <HAL_RCC_ClockConfig+0x2a8>)
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	4313      	orrs	r3, r2
 800463e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004640:	4b04      	ldr	r3, [pc, #16]	; (8004654 <HAL_RCC_ClockConfig+0x2a8>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	429a      	cmp	r2, r3
 800464c:	d006      	beq.n	800465c <HAL_RCC_ClockConfig+0x2b0>
    {
      return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e03f      	b.n	80046d2 <HAL_RCC_ClockConfig+0x326>
 8004652:	bf00      	nop
 8004654:	40022000 	.word	0x40022000
 8004658:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0304 	and.w	r3, r3, #4
 8004664:	2b00      	cmp	r3, #0
 8004666:	d008      	beq.n	800467a <HAL_RCC_ClockConfig+0x2ce>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004668:	4b1c      	ldr	r3, [pc, #112]	; (80046dc <HAL_RCC_ClockConfig+0x330>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	4919      	ldr	r1, [pc, #100]	; (80046dc <HAL_RCC_ClockConfig+0x330>)
 8004676:	4313      	orrs	r3, r2
 8004678:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0308 	and.w	r3, r3, #8
 8004682:	2b00      	cmp	r3, #0
 8004684:	d009      	beq.n	800469a <HAL_RCC_ClockConfig+0x2ee>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004686:	4b15      	ldr	r3, [pc, #84]	; (80046dc <HAL_RCC_ClockConfig+0x330>)
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	4911      	ldr	r1, [pc, #68]	; (80046dc <HAL_RCC_ClockConfig+0x330>)
 8004696:	4313      	orrs	r3, r2
 8004698:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800469a:	f000 f825 	bl	80046e8 <HAL_RCC_GetSysClockFreq>
 800469e:	4601      	mov	r1, r0
 80046a0:	4b0e      	ldr	r3, [pc, #56]	; (80046dc <HAL_RCC_ClockConfig+0x330>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046a8:	22f0      	movs	r2, #240	; 0xf0
 80046aa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	fa92 f2a2 	rbit	r2, r2
 80046b2:	60fa      	str	r2, [r7, #12]
  return result;
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	fab2 f282 	clz	r2, r2
 80046ba:	b2d2      	uxtb	r2, r2
 80046bc:	40d3      	lsrs	r3, r2
 80046be:	4a08      	ldr	r2, [pc, #32]	; (80046e0 <HAL_RCC_ClockConfig+0x334>)
 80046c0:	5cd3      	ldrb	r3, [r2, r3]
 80046c2:	fa21 f303 	lsr.w	r3, r1, r3
 80046c6:	4a07      	ldr	r2, [pc, #28]	; (80046e4 <HAL_RCC_ClockConfig+0x338>)
 80046c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80046ca:	200f      	movs	r0, #15
 80046cc:	f000 fb28 	bl	8004d20 <HAL_InitTick>
  
  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3778      	adds	r7, #120	; 0x78
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	40021000 	.word	0x40021000
 80046e0:	08005d80 	.word	0x08005d80
 80046e4:	20000000 	.word	0x20000000

080046e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b08b      	sub	sp, #44	; 0x2c
 80046ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80046ee:	2300      	movs	r3, #0
 80046f0:	61fb      	str	r3, [r7, #28]
 80046f2:	2300      	movs	r3, #0
 80046f4:	61bb      	str	r3, [r7, #24]
 80046f6:	2300      	movs	r3, #0
 80046f8:	627b      	str	r3, [r7, #36]	; 0x24
 80046fa:	2300      	movs	r3, #0
 80046fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80046fe:	2300      	movs	r3, #0
 8004700:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004702:	4b29      	ldr	r3, [pc, #164]	; (80047a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	f003 030c 	and.w	r3, r3, #12
 800470e:	2b04      	cmp	r3, #4
 8004710:	d002      	beq.n	8004718 <HAL_RCC_GetSysClockFreq+0x30>
 8004712:	2b08      	cmp	r3, #8
 8004714:	d003      	beq.n	800471e <HAL_RCC_GetSysClockFreq+0x36>
 8004716:	e03c      	b.n	8004792 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004718:	4b24      	ldr	r3, [pc, #144]	; (80047ac <HAL_RCC_GetSysClockFreq+0xc4>)
 800471a:	623b      	str	r3, [r7, #32]
      break;
 800471c:	e03c      	b.n	8004798 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004724:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004728:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800472a:	68ba      	ldr	r2, [r7, #8]
 800472c:	fa92 f2a2 	rbit	r2, r2
 8004730:	607a      	str	r2, [r7, #4]
  return result;
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	fab2 f282 	clz	r2, r2
 8004738:	b2d2      	uxtb	r2, r2
 800473a:	40d3      	lsrs	r3, r2
 800473c:	4a1c      	ldr	r2, [pc, #112]	; (80047b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800473e:	5cd3      	ldrb	r3, [r2, r3]
 8004740:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004742:	4b19      	ldr	r3, [pc, #100]	; (80047a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004746:	f003 030f 	and.w	r3, r3, #15
 800474a:	220f      	movs	r2, #15
 800474c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	fa92 f2a2 	rbit	r2, r2
 8004754:	60fa      	str	r2, [r7, #12]
  return result;
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	fab2 f282 	clz	r2, r2
 800475c:	b2d2      	uxtb	r2, r2
 800475e:	40d3      	lsrs	r3, r2
 8004760:	4a14      	ldr	r2, [pc, #80]	; (80047b4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004762:	5cd3      	ldrb	r3, [r2, r3]
 8004764:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d008      	beq.n	8004782 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8004770:	4a0e      	ldr	r2, [pc, #56]	; (80047ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	fbb2 f2f3 	udiv	r2, r2, r3
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	fb02 f303 	mul.w	r3, r2, r3
 800477e:	627b      	str	r3, [r7, #36]	; 0x24
 8004780:	e004      	b.n	800478c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	4a0c      	ldr	r2, [pc, #48]	; (80047b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004786:	fb02 f303 	mul.w	r3, r2, r3
 800478a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	623b      	str	r3, [r7, #32]
      break;
 8004790:	e002      	b.n	8004798 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004792:	4b06      	ldr	r3, [pc, #24]	; (80047ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8004794:	623b      	str	r3, [r7, #32]
      break;
 8004796:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004798:	6a3b      	ldr	r3, [r7, #32]
}
 800479a:	4618      	mov	r0, r3
 800479c:	372c      	adds	r7, #44	; 0x2c
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	40021000 	.word	0x40021000
 80047ac:	007a1200 	.word	0x007a1200
 80047b0:	08005d90 	.word	0x08005d90
 80047b4:	08005da0 	.word	0x08005da0
 80047b8:	003d0900 	.word	0x003d0900

080047bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b092      	sub	sp, #72	; 0x48
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047c4:	2300      	movs	r3, #0
 80047c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f000 80d7 	beq.w	8004988 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80047da:	2300      	movs	r3, #0
 80047dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047e0:	4b4e      	ldr	r3, [pc, #312]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047e2:	69db      	ldr	r3, [r3, #28]
 80047e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10e      	bne.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ec:	4b4b      	ldr	r3, [pc, #300]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ee:	69db      	ldr	r3, [r3, #28]
 80047f0:	4a4a      	ldr	r2, [pc, #296]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047f6:	61d3      	str	r3, [r2, #28]
 80047f8:	4b48      	ldr	r3, [pc, #288]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004800:	60bb      	str	r3, [r7, #8]
 8004802:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004804:	2301      	movs	r3, #1
 8004806:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800480a:	4b45      	ldr	r3, [pc, #276]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004812:	2b00      	cmp	r3, #0
 8004814:	d118      	bne.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004816:	4b42      	ldr	r3, [pc, #264]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a41      	ldr	r2, [pc, #260]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800481c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004820:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004822:	f7fd ff1d 	bl	8002660 <HAL_GetTick>
 8004826:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004828:	e008      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800482a:	f7fd ff19 	bl	8002660 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	2b64      	cmp	r3, #100	; 0x64
 8004836:	d901      	bls.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e169      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800483c:	4b38      	ldr	r3, [pc, #224]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004844:	2b00      	cmp	r3, #0
 8004846:	d0f0      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004848:	4b34      	ldr	r3, [pc, #208]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800484a:	6a1b      	ldr	r3, [r3, #32]
 800484c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004850:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 8084 	beq.w	8004962 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004862:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004864:	429a      	cmp	r2, r3
 8004866:	d07c      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004868:	4b2c      	ldr	r3, [pc, #176]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004870:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004872:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004876:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487a:	fa93 f3a3 	rbit	r3, r3
 800487e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004882:	fab3 f383 	clz	r3, r3
 8004886:	b2db      	uxtb	r3, r3
 8004888:	461a      	mov	r2, r3
 800488a:	4b26      	ldr	r3, [pc, #152]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800488c:	4413      	add	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	461a      	mov	r2, r3
 8004892:	2301      	movs	r3, #1
 8004894:	6013      	str	r3, [r2, #0]
 8004896:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800489a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800489c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489e:	fa93 f3a3 	rbit	r3, r3
 80048a2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80048a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048a6:	fab3 f383 	clz	r3, r3
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	461a      	mov	r2, r3
 80048ae:	4b1d      	ldr	r3, [pc, #116]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80048b0:	4413      	add	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	461a      	mov	r2, r3
 80048b6:	2300      	movs	r3, #0
 80048b8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80048ba:	4a18      	ldr	r2, [pc, #96]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048be:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80048c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d04b      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ca:	f7fd fec9 	bl	8002660 <HAL_GetTick>
 80048ce:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048d0:	e00a      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048d2:	f7fd fec5 	bl	8002660 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d901      	bls.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e113      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80048e8:	2302      	movs	r3, #2
 80048ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ee:	fa93 f3a3 	rbit	r3, r3
 80048f2:	627b      	str	r3, [r7, #36]	; 0x24
 80048f4:	2302      	movs	r3, #2
 80048f6:	623b      	str	r3, [r7, #32]
 80048f8:	6a3b      	ldr	r3, [r7, #32]
 80048fa:	fa93 f3a3 	rbit	r3, r3
 80048fe:	61fb      	str	r3, [r7, #28]
  return result;
 8004900:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004902:	fab3 f383 	clz	r3, r3
 8004906:	b2db      	uxtb	r3, r3
 8004908:	095b      	lsrs	r3, r3, #5
 800490a:	b2db      	uxtb	r3, r3
 800490c:	f043 0302 	orr.w	r3, r3, #2
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b02      	cmp	r3, #2
 8004914:	d108      	bne.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004916:	4b01      	ldr	r3, [pc, #4]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	e00d      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800491c:	40021000 	.word	0x40021000
 8004920:	40007000 	.word	0x40007000
 8004924:	10908100 	.word	0x10908100
 8004928:	2302      	movs	r3, #2
 800492a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	fa93 f3a3 	rbit	r3, r3
 8004932:	617b      	str	r3, [r7, #20]
 8004934:	4b78      	ldr	r3, [pc, #480]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004938:	2202      	movs	r2, #2
 800493a:	613a      	str	r2, [r7, #16]
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	fa92 f2a2 	rbit	r2, r2
 8004942:	60fa      	str	r2, [r7, #12]
  return result;
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	fab2 f282 	clz	r2, r2
 800494a:	b2d2      	uxtb	r2, r2
 800494c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004950:	b2d2      	uxtb	r2, r2
 8004952:	f002 021f 	and.w	r2, r2, #31
 8004956:	2101      	movs	r1, #1
 8004958:	fa01 f202 	lsl.w	r2, r1, r2
 800495c:	4013      	ands	r3, r2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d0b7      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004962:	4b6d      	ldr	r3, [pc, #436]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	496a      	ldr	r1, [pc, #424]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004970:	4313      	orrs	r3, r2
 8004972:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004974:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004978:	2b01      	cmp	r3, #1
 800497a:	d105      	bne.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800497c:	4b66      	ldr	r3, [pc, #408]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	4a65      	ldr	r2, [pc, #404]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004982:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004986:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	2b00      	cmp	r3, #0
 8004992:	d008      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004994:	4b60      	ldr	r3, [pc, #384]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004998:	f023 0203 	bic.w	r2, r3, #3
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	495d      	ldr	r1, [pc, #372]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d008      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049b2:	4b59      	ldr	r3, [pc, #356]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	4956      	ldr	r1, [pc, #344]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0304 	and.w	r3, r3, #4
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d008      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049d0:	4b51      	ldr	r3, [pc, #324]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	494e      	ldr	r1, [pc, #312]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0320 	and.w	r3, r3, #32
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d008      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049ee:	4b4a      	ldr	r3, [pc, #296]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f2:	f023 0210 	bic.w	r2, r3, #16
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	4947      	ldr	r1, [pc, #284]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d008      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004a0c:	4b42      	ldr	r3, [pc, #264]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a18:	493f      	ldr	r1, [pc, #252]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d008      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a2a:	4b3b      	ldr	r3, [pc, #236]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2e:	f023 0220 	bic.w	r2, r3, #32
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	4938      	ldr	r1, [pc, #224]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0308 	and.w	r3, r3, #8
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d008      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a48:	4b33      	ldr	r3, [pc, #204]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	4930      	ldr	r1, [pc, #192]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0310 	and.w	r3, r3, #16
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d008      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a66:	4b2c      	ldr	r3, [pc, #176]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	4929      	ldr	r1, [pc, #164]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d008      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a84:	4b24      	ldr	r3, [pc, #144]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a90:	4921      	ldr	r1, [pc, #132]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d008      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004aa2:	4b1d      	ldr	r3, [pc, #116]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aae:	491a      	ldr	r1, [pc, #104]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d008      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004ac0:	4b15      	ldr	r3, [pc, #84]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004acc:	4912      	ldr	r1, [pc, #72]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d008      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004ade:	4b0e      	ldr	r3, [pc, #56]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aea:	490b      	ldr	r1, [pc, #44]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d008      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004afc:	4b06      	ldr	r3, [pc, #24]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b00:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b08:	4903      	ldr	r1, [pc, #12]	; (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3748      	adds	r7, #72	; 0x48
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	40021000 	.word	0x40021000

08004b1c <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e06d      	b.n	8004c0a <HAL_RTC_Init+0xee>
  assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	7f5b      	ldrb	r3, [r3, #29]
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d105      	bne.n	8004b44 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f867 	bl	8004c12 <HAL_RTC_MspInit>
  }
  
  /* Set RTC state */  
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2202      	movs	r2, #2
 8004b48:	775a      	strb	r2, [r3, #29]
       
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	22ca      	movs	r2, #202	; 0xca
 8004b50:	625a      	str	r2, [r3, #36]	; 0x24
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2253      	movs	r2, #83	; 0x53
 8004b58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f8aa 	bl	8004cb4 <RTC_EnterInitMode>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d008      	beq.n	8004b78 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	22ff      	movs	r2, #255	; 0xff
 8004b6c:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2204      	movs	r2, #4
 8004b72:	775a      	strb	r2, [r3, #29]
    
    return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e048      	b.n	8004c0a <HAL_RTC_Init+0xee>
  } 
  else
  { 
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	6812      	ldr	r2, [r2, #0]
 8004b82:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004b86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b8a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6899      	ldr	r1, [r3, #8]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685a      	ldr	r2, [r3, #4]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	431a      	orrs	r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	609a      	str	r2, [r3, #8]
    
    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	68d2      	ldr	r2, [r2, #12]
 8004bb2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6919      	ldr	r1, [r3, #16]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	041a      	lsls	r2, r3, #16
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	611a      	str	r2, [r3, #16]
    
    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68da      	ldr	r2, [r3, #12]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bd6:	60da      	str	r2, [r3, #12]
    
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004be6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	699a      	ldr	r2, [r3, #24]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	22ff      	movs	r2, #255	; 0xff
 8004c00:	625a      	str	r2, [r3, #36]	; 0x24
    
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	775a      	strb	r2, [r3, #29]
    
    return HAL_OK;
 8004c08:	2300      	movs	r3, #0
  }
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3708      	adds	r7, #8
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <HAL_RTC_MspInit>:
  * @brief  Initialize the RTC MSP.
  * @param  hrtc: RTC handle  
  * @retval None
  */
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004c12:	b480      	push	{r7}
 8004c14:	b083      	sub	sp, #12
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
	...

08004c28 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc: RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{  
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d012      	beq.n	8004c64 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00b      	beq.n	8004c64 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */ 
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 f959 	bl	8004f04 <HAL_RTC_AlarmAEventCallback>
      
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004c62:	60da      	str	r2, [r3, #12]
    }
  }
  
  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d012      	beq.n	8004c98 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00b      	beq.n	8004c98 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */ 
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 f843 	bl	8004d0c <HAL_RTCEx_AlarmBEventCallback>
      
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f462 7220 	orn	r2, r2, #640	; 0x280
 8004c96:	60da      	str	r2, [r3, #12]
    }
  }
  
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004c98:	4b05      	ldr	r3, [pc, #20]	; (8004cb0 <HAL_RTC_AlarmIRQHandler+0x88>)
 8004c9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c9e:	615a      	str	r2, [r3, #20]
  
  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY; 
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	775a      	strb	r2, [r3, #29]
}
 8004ca6:	bf00      	nop
 8004ca8:	3708      	adds	r7, #8
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	40010400 	.word	0x40010400

08004cb4 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout 
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	60fb      	str	r3, [r7, #12]
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d119      	bne.n	8004d02 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8004cd6:	60da      	str	r2, [r3, #12]
    
    tickstart = HAL_GetTick();
 8004cd8:	f7fd fcc2 	bl	8002660 <HAL_GetTick>
 8004cdc:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004cde:	e009      	b.n	8004cf4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8004ce0:	f7fd fcbe 	bl	8002660 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cee:	d901      	bls.n	8004cf4 <RTC_EnterInitMode+0x40>
      {       
        return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e007      	b.n	8004d04 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d0ee      	beq.n	8004ce0 <RTC_EnterInitMode+0x2c>
      } 
    }
  }
  
  return HAL_OK;  
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc: RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b09e      	sub	sp, #120	; 0x78
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
#elif defined (RTC_CLOCK_SOURCE_HSE)
  /* Configue HSE as RTC clock soucre */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004d30:	2300      	movs	r3, #0
 8004d32:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004d34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d38:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 8004d3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004d3e:	60fb      	str	r3, [r7, #12]
#else
#error Please select the RTC Clock source
#endif /* RTC_CLOCK_SOURCE_LSE */

  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) == HAL_OK)
 8004d40:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7fe fc4b 	bl	80035e0 <HAL_RCC_OscConfig>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f040 80c7 	bne.w	8004ee0 <HAL_InitTick+0x1c0>
  {
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004d52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d56:	60bb      	str	r3, [r7, #8]
    if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) == HAL_OK)
 8004d58:	f107 0308 	add.w	r3, r7, #8
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7ff fd2d 	bl	80047bc <HAL_RCCEx_PeriphCLKConfig>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f040 80bb 	bne.w	8004ee0 <HAL_InitTick+0x1c0>
 8004d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d6e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d72:	fa93 f3a3 	rbit	r3, r3
 8004d76:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004d78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    {
      /* Enable RTC Clock */
      __HAL_RCC_RTC_ENABLE();
 8004d7a:	fab3 f383 	clz	r3, r3
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	461a      	mov	r2, r3
 8004d82:	4b5a      	ldr	r3, [pc, #360]	; (8004eec <HAL_InitTick+0x1cc>)
 8004d84:	4413      	add	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	461a      	mov	r2, r3
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	6013      	str	r3, [r2, #0]
                     = ~1ms
         LSI as RTC clock 
           Time base = ((31U + 1U) * (0U + 1U)) / 32KHz
                     = 1ms
      */
      hRTC_Handle.Instance = RTC;
 8004d8e:	4b58      	ldr	r3, [pc, #352]	; (8004ef0 <HAL_InitTick+0x1d0>)
 8004d90:	4a58      	ldr	r2, [pc, #352]	; (8004ef4 <HAL_InitTick+0x1d4>)
 8004d92:	601a      	str	r2, [r3, #0]
      hRTC_Handle.Init.HourFormat = RTC_HOURFORMAT_24;
 8004d94:	4b56      	ldr	r3, [pc, #344]	; (8004ef0 <HAL_InitTick+0x1d0>)
 8004d96:	2200      	movs	r2, #0
 8004d98:	605a      	str	r2, [r3, #4]
      hRTC_Handle.Init.AsynchPrediv = RTC_ASYNCH_PREDIV;
 8004d9a:	4b55      	ldr	r3, [pc, #340]	; (8004ef0 <HAL_InitTick+0x1d0>)
 8004d9c:	2231      	movs	r2, #49	; 0x31
 8004d9e:	609a      	str	r2, [r3, #8]
      hRTC_Handle.Init.SynchPrediv = RTC_SYNCH_PREDIV;
 8004da0:	4b53      	ldr	r3, [pc, #332]	; (8004ef0 <HAL_InitTick+0x1d0>)
 8004da2:	2204      	movs	r2, #4
 8004da4:	60da      	str	r2, [r3, #12]
      hRTC_Handle.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004da6:	4b52      	ldr	r3, [pc, #328]	; (8004ef0 <HAL_InitTick+0x1d0>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	611a      	str	r2, [r3, #16]
      hRTC_Handle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004dac:	4b50      	ldr	r3, [pc, #320]	; (8004ef0 <HAL_InitTick+0x1d0>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	615a      	str	r2, [r3, #20]
      hRTC_Handle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004db2:	4b4f      	ldr	r3, [pc, #316]	; (8004ef0 <HAL_InitTick+0x1d0>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	619a      	str	r2, [r3, #24]
      HAL_RTC_Init(&hRTC_Handle);
 8004db8:	484d      	ldr	r0, [pc, #308]	; (8004ef0 <HAL_InitTick+0x1d0>)
 8004dba:	f7ff feaf 	bl	8004b1c <HAL_RTC_Init>

      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(&hRTC_Handle);
 8004dbe:	4b4c      	ldr	r3, [pc, #304]	; (8004ef0 <HAL_InitTick+0x1d0>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	22ca      	movs	r2, #202	; 0xca
 8004dc4:	625a      	str	r2, [r3, #36]	; 0x24
 8004dc6:	4b4a      	ldr	r3, [pc, #296]	; (8004ef0 <HAL_InitTick+0x1d0>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2253      	movs	r2, #83	; 0x53
 8004dcc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Disable the Alarm A interrupt */
      __HAL_RTC_ALARMA_DISABLE(&hRTC_Handle);
 8004dce:	4b48      	ldr	r3, [pc, #288]	; (8004ef0 <HAL_InitTick+0x1d0>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	689a      	ldr	r2, [r3, #8]
 8004dd4:	4b46      	ldr	r3, [pc, #280]	; (8004ef0 <HAL_InitTick+0x1d0>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ddc:	609a      	str	r2, [r3, #8]

      /* Clear flag alarm A */
      __HAL_RTC_ALARM_CLEAR_FLAG(&hRTC_Handle, RTC_FLAG_ALRAF);
 8004dde:	4b44      	ldr	r3, [pc, #272]	; (8004ef0 <HAL_InitTick+0x1d0>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	4b42      	ldr	r3, [pc, #264]	; (8004ef0 <HAL_InitTick+0x1d0>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8004dee:	60da      	str	r2, [r3, #12]

      counter = 0U;
 8004df0:	2300      	movs	r3, #0
 8004df2:	66fb      	str	r3, [r7, #108]	; 0x6c
      /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
      while(__HAL_RTC_ALARM_GET_FLAG(&hRTC_Handle, RTC_FLAG_ALRAWF) == RESET)
 8004df4:	e00c      	b.n	8004e10 <HAL_InitTick+0xf0>
      {
        if(counter++ == (SystemCoreClock /48U)) /* Timeout = ~ 1s */
 8004df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004df8:	1c5a      	adds	r2, r3, #1
 8004dfa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004dfc:	4a3e      	ldr	r2, [pc, #248]	; (8004ef8 <HAL_InitTick+0x1d8>)
 8004dfe:	6812      	ldr	r2, [r2, #0]
 8004e00:	493e      	ldr	r1, [pc, #248]	; (8004efc <HAL_InitTick+0x1dc>)
 8004e02:	fba1 1202 	umull	r1, r2, r1, r2
 8004e06:	0952      	lsrs	r2, r2, #5
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d101      	bne.n	8004e10 <HAL_InitTick+0xf0>
        {
          return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e068      	b.n	8004ee2 <HAL_InitTick+0x1c2>
      while(__HAL_RTC_ALARM_GET_FLAG(&hRTC_Handle, RTC_FLAG_ALRAWF) == RESET)
 8004e10:	4b37      	ldr	r3, [pc, #220]	; (8004ef0 <HAL_InitTick+0x1d0>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d0eb      	beq.n	8004df6 <HAL_InitTick+0xd6>
        }
      }

      hRTC_Handle.Instance->ALRMAR = 0x01U;
 8004e1e:	4b34      	ldr	r3, [pc, #208]	; (8004ef0 <HAL_InitTick+0x1d0>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2201      	movs	r2, #1
 8004e24:	61da      	str	r2, [r3, #28]

      /* Configure the Alarm state: Enable Alarm */
      __HAL_RTC_ALARMA_ENABLE(&hRTC_Handle);
 8004e26:	4b32      	ldr	r3, [pc, #200]	; (8004ef0 <HAL_InitTick+0x1d0>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	689a      	ldr	r2, [r3, #8]
 8004e2c:	4b30      	ldr	r3, [pc, #192]	; (8004ef0 <HAL_InitTick+0x1d0>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e34:	609a      	str	r2, [r3, #8]
      /* Configure the Alarm interrupt */
      __HAL_RTC_ALARM_ENABLE_IT(&hRTC_Handle, RTC_IT_ALRA);
 8004e36:	4b2e      	ldr	r3, [pc, #184]	; (8004ef0 <HAL_InitTick+0x1d0>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	4b2c      	ldr	r3, [pc, #176]	; (8004ef0 <HAL_InitTick+0x1d0>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e44:	609a      	str	r2, [r3, #8]

      /* RTC Alarm Interrupt Configuration: EXTI configuration */
      __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004e46:	4b2e      	ldr	r3, [pc, #184]	; (8004f00 <HAL_InitTick+0x1e0>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a2d      	ldr	r2, [pc, #180]	; (8004f00 <HAL_InitTick+0x1e0>)
 8004e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e50:	6013      	str	r3, [r2, #0]
      __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8004e52:	4b2b      	ldr	r3, [pc, #172]	; (8004f00 <HAL_InitTick+0x1e0>)
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	4a2a      	ldr	r2, [pc, #168]	; (8004f00 <HAL_InitTick+0x1e0>)
 8004e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e5c:	6093      	str	r3, [r2, #8]

      /* Check if the Initialization mode is set */
      if((hRTC_Handle.Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004e5e:	4b24      	ldr	r3, [pc, #144]	; (8004ef0 <HAL_InitTick+0x1d0>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d11b      	bne.n	8004ea4 <HAL_InitTick+0x184>
      {
        /* Set the Initialization mode */
        hRTC_Handle.Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004e6c:	4b20      	ldr	r3, [pc, #128]	; (8004ef0 <HAL_InitTick+0x1d0>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f04f 32ff 	mov.w	r2, #4294967295
 8004e74:	60da      	str	r2, [r3, #12]
        counter = 0U;
 8004e76:	2300      	movs	r3, #0
 8004e78:	66fb      	str	r3, [r7, #108]	; 0x6c
        while((hRTC_Handle.Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004e7a:	e00c      	b.n	8004e96 <HAL_InitTick+0x176>
        {
          if(counter++ == (SystemCoreClock /48U)) /* Timeout = ~ 1s */
 8004e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e7e:	1c5a      	adds	r2, r3, #1
 8004e80:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e82:	4a1d      	ldr	r2, [pc, #116]	; (8004ef8 <HAL_InitTick+0x1d8>)
 8004e84:	6812      	ldr	r2, [r2, #0]
 8004e86:	491d      	ldr	r1, [pc, #116]	; (8004efc <HAL_InitTick+0x1dc>)
 8004e88:	fba1 1202 	umull	r1, r2, r1, r2
 8004e8c:	0952      	lsrs	r2, r2, #5
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d101      	bne.n	8004e96 <HAL_InitTick+0x176>
          {
            return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e025      	b.n	8004ee2 <HAL_InitTick+0x1c2>
        while((hRTC_Handle.Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004e96:	4b16      	ldr	r3, [pc, #88]	; (8004ef0 <HAL_InitTick+0x1d0>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d0eb      	beq.n	8004e7c <HAL_InitTick+0x15c>
          }
        }
      }
      hRTC_Handle.Instance->DR = 0U;
 8004ea4:	4b12      	ldr	r3, [pc, #72]	; (8004ef0 <HAL_InitTick+0x1d0>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	605a      	str	r2, [r3, #4]
      hRTC_Handle.Instance->TR = 0U;
 8004eac:	4b10      	ldr	r3, [pc, #64]	; (8004ef0 <HAL_InitTick+0x1d0>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	601a      	str	r2, [r3, #0]

      hRTC_Handle.Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004eb4:	4b0e      	ldr	r3, [pc, #56]	; (8004ef0 <HAL_InitTick+0x1d0>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68da      	ldr	r2, [r3, #12]
 8004eba:	4b0d      	ldr	r3, [pc, #52]	; (8004ef0 <HAL_InitTick+0x1d0>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ec2:	60da      	str	r2, [r3, #12]

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(&hRTC_Handle);
 8004ec4:	4b0a      	ldr	r3, [pc, #40]	; (8004ef0 <HAL_InitTick+0x1d0>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	22ff      	movs	r2, #255	; 0xff
 8004eca:	625a      	str	r2, [r3, #36]	; 0x24

      HAL_NVIC_SetPriority(RTC_Alarm_IRQn, TickPriority, 0U);
 8004ecc:	2200      	movs	r2, #0
 8004ece:	6879      	ldr	r1, [r7, #4]
 8004ed0:	2029      	movs	r0, #41	; 0x29
 8004ed2:	f7fd fc89 	bl	80027e8 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8004ed6:	2029      	movs	r0, #41	; 0x29
 8004ed8:	f7fd fca2 	bl	8002820 <HAL_NVIC_EnableIRQ>
      return HAL_OK;
 8004edc:	2300      	movs	r3, #0
 8004ede:	e000      	b.n	8004ee2 <HAL_InitTick+0x1c2>
    }
  }
  return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3778      	adds	r7, #120	; 0x78
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	10908100 	.word	0x10908100
 8004ef0:	20000664 	.word	0x20000664
 8004ef4:	40002800 	.word	0x40002800
 8004ef8:	20000000 	.word	0x20000000
 8004efc:	aaaaaaab 	.word	0xaaaaaaab
 8004f00:	40010400 	.word	0x40010400

08004f04 <HAL_RTC_AlarmAEventCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  hrtc : RTC handle
  * @retval None
  */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	60fb      	str	r3, [r7, #12]

  HAL_IncTick();
 8004f10:	f7fd fb98 	bl	8002644 <HAL_IncTick>

  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	22ca      	movs	r2, #202	; 0xca
 8004f1a:	625a      	str	r2, [r3, #36]	; 0x24
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2253      	movs	r2, #83	; 0x53
 8004f22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the Initialization mode */
  hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f04f 32ff 	mov.w	r2, #4294967295
 8004f2c:	60da      	str	r2, [r3, #12]

  while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004f2e:	e00a      	b.n	8004f46 <HAL_RTC_AlarmAEventCallback+0x42>
  {
    if(counter++ == (SystemCoreClock /48U)) /* Timeout = ~ 1s */
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	1c5a      	adds	r2, r3, #1
 8004f34:	60fa      	str	r2, [r7, #12]
 8004f36:	4a14      	ldr	r2, [pc, #80]	; (8004f88 <HAL_RTC_AlarmAEventCallback+0x84>)
 8004f38:	6812      	ldr	r2, [r2, #0]
 8004f3a:	4914      	ldr	r1, [pc, #80]	; (8004f8c <HAL_RTC_AlarmAEventCallback+0x88>)
 8004f3c:	fba1 1202 	umull	r1, r2, r1, r2
 8004f40:	0952      	lsrs	r2, r2, #5
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d007      	beq.n	8004f56 <HAL_RTC_AlarmAEventCallback+0x52>
  while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d0ed      	beq.n	8004f30 <HAL_RTC_AlarmAEventCallback+0x2c>
 8004f54:	e000      	b.n	8004f58 <HAL_RTC_AlarmAEventCallback+0x54>
    {
      break;
 8004f56:	bf00      	nop
    }
  }

  hrtc->Instance->DR = 0U;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	605a      	str	r2, [r3, #4]
  hrtc->Instance->TR = 0U;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2200      	movs	r2, #0
 8004f66:	601a      	str	r2, [r3, #0]

  hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	68da      	ldr	r2, [r3, #12]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f76:	60da      	str	r2, [r3, #12]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	22ff      	movs	r2, #255	; 0xff
 8004f7e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004f80:	bf00      	nop
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	20000000 	.word	0x20000000
 8004f8c:	aaaaaaab 	.word	0xaaaaaaab

08004f90 <RTC_Alarm_IRQHandler>:
  * @brief  This function handles RTC ALARM interrupt request.
  * @param  None
  * @retval None
  */
void RTC_Alarm_IRQHandler(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	af00      	add	r7, sp, #0
  HAL_RTC_AlarmIRQHandler(&hRTC_Handle);
 8004f94:	4802      	ldr	r0, [pc, #8]	; (8004fa0 <RTC_Alarm_IRQHandler+0x10>)
 8004f96:	f7ff fe47 	bl	8004c28 <HAL_RTC_AlarmIRQHandler>
}
 8004f9a:	bf00      	nop
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	20000664 	.word	0x20000664

08004fa4 <__errno>:
 8004fa4:	4b01      	ldr	r3, [pc, #4]	; (8004fac <__errno+0x8>)
 8004fa6:	6818      	ldr	r0, [r3, #0]
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	20000004 	.word	0x20000004

08004fb0 <__libc_init_array>:
 8004fb0:	b570      	push	{r4, r5, r6, lr}
 8004fb2:	4d0d      	ldr	r5, [pc, #52]	; (8004fe8 <__libc_init_array+0x38>)
 8004fb4:	4c0d      	ldr	r4, [pc, #52]	; (8004fec <__libc_init_array+0x3c>)
 8004fb6:	1b64      	subs	r4, r4, r5
 8004fb8:	10a4      	asrs	r4, r4, #2
 8004fba:	2600      	movs	r6, #0
 8004fbc:	42a6      	cmp	r6, r4
 8004fbe:	d109      	bne.n	8004fd4 <__libc_init_array+0x24>
 8004fc0:	4d0b      	ldr	r5, [pc, #44]	; (8004ff0 <__libc_init_array+0x40>)
 8004fc2:	4c0c      	ldr	r4, [pc, #48]	; (8004ff4 <__libc_init_array+0x44>)
 8004fc4:	f000 fec6 	bl	8005d54 <_init>
 8004fc8:	1b64      	subs	r4, r4, r5
 8004fca:	10a4      	asrs	r4, r4, #2
 8004fcc:	2600      	movs	r6, #0
 8004fce:	42a6      	cmp	r6, r4
 8004fd0:	d105      	bne.n	8004fde <__libc_init_array+0x2e>
 8004fd2:	bd70      	pop	{r4, r5, r6, pc}
 8004fd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fd8:	4798      	blx	r3
 8004fda:	3601      	adds	r6, #1
 8004fdc:	e7ee      	b.n	8004fbc <__libc_init_array+0xc>
 8004fde:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fe2:	4798      	blx	r3
 8004fe4:	3601      	adds	r6, #1
 8004fe6:	e7f2      	b.n	8004fce <__libc_init_array+0x1e>
 8004fe8:	08005e58 	.word	0x08005e58
 8004fec:	08005e58 	.word	0x08005e58
 8004ff0:	08005e58 	.word	0x08005e58
 8004ff4:	08005e5c 	.word	0x08005e5c

08004ff8 <memset>:
 8004ff8:	4402      	add	r2, r0
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d100      	bne.n	8005002 <memset+0xa>
 8005000:	4770      	bx	lr
 8005002:	f803 1b01 	strb.w	r1, [r3], #1
 8005006:	e7f9      	b.n	8004ffc <memset+0x4>

08005008 <siprintf>:
 8005008:	b40e      	push	{r1, r2, r3}
 800500a:	b500      	push	{lr}
 800500c:	b09c      	sub	sp, #112	; 0x70
 800500e:	ab1d      	add	r3, sp, #116	; 0x74
 8005010:	9002      	str	r0, [sp, #8]
 8005012:	9006      	str	r0, [sp, #24]
 8005014:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005018:	4809      	ldr	r0, [pc, #36]	; (8005040 <siprintf+0x38>)
 800501a:	9107      	str	r1, [sp, #28]
 800501c:	9104      	str	r1, [sp, #16]
 800501e:	4909      	ldr	r1, [pc, #36]	; (8005044 <siprintf+0x3c>)
 8005020:	f853 2b04 	ldr.w	r2, [r3], #4
 8005024:	9105      	str	r1, [sp, #20]
 8005026:	6800      	ldr	r0, [r0, #0]
 8005028:	9301      	str	r3, [sp, #4]
 800502a:	a902      	add	r1, sp, #8
 800502c:	f000 f868 	bl	8005100 <_svfiprintf_r>
 8005030:	9b02      	ldr	r3, [sp, #8]
 8005032:	2200      	movs	r2, #0
 8005034:	701a      	strb	r2, [r3, #0]
 8005036:	b01c      	add	sp, #112	; 0x70
 8005038:	f85d eb04 	ldr.w	lr, [sp], #4
 800503c:	b003      	add	sp, #12
 800503e:	4770      	bx	lr
 8005040:	20000004 	.word	0x20000004
 8005044:	ffff0208 	.word	0xffff0208

08005048 <__ssputs_r>:
 8005048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800504c:	688e      	ldr	r6, [r1, #8]
 800504e:	429e      	cmp	r6, r3
 8005050:	4682      	mov	sl, r0
 8005052:	460c      	mov	r4, r1
 8005054:	4690      	mov	r8, r2
 8005056:	461f      	mov	r7, r3
 8005058:	d838      	bhi.n	80050cc <__ssputs_r+0x84>
 800505a:	898a      	ldrh	r2, [r1, #12]
 800505c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005060:	d032      	beq.n	80050c8 <__ssputs_r+0x80>
 8005062:	6825      	ldr	r5, [r4, #0]
 8005064:	6909      	ldr	r1, [r1, #16]
 8005066:	eba5 0901 	sub.w	r9, r5, r1
 800506a:	6965      	ldr	r5, [r4, #20]
 800506c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005070:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005074:	3301      	adds	r3, #1
 8005076:	444b      	add	r3, r9
 8005078:	106d      	asrs	r5, r5, #1
 800507a:	429d      	cmp	r5, r3
 800507c:	bf38      	it	cc
 800507e:	461d      	movcc	r5, r3
 8005080:	0553      	lsls	r3, r2, #21
 8005082:	d531      	bpl.n	80050e8 <__ssputs_r+0xa0>
 8005084:	4629      	mov	r1, r5
 8005086:	f000 fb47 	bl	8005718 <_malloc_r>
 800508a:	4606      	mov	r6, r0
 800508c:	b950      	cbnz	r0, 80050a4 <__ssputs_r+0x5c>
 800508e:	230c      	movs	r3, #12
 8005090:	f8ca 3000 	str.w	r3, [sl]
 8005094:	89a3      	ldrh	r3, [r4, #12]
 8005096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800509a:	81a3      	strh	r3, [r4, #12]
 800509c:	f04f 30ff 	mov.w	r0, #4294967295
 80050a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050a4:	6921      	ldr	r1, [r4, #16]
 80050a6:	464a      	mov	r2, r9
 80050a8:	f000 fabe 	bl	8005628 <memcpy>
 80050ac:	89a3      	ldrh	r3, [r4, #12]
 80050ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80050b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050b6:	81a3      	strh	r3, [r4, #12]
 80050b8:	6126      	str	r6, [r4, #16]
 80050ba:	6165      	str	r5, [r4, #20]
 80050bc:	444e      	add	r6, r9
 80050be:	eba5 0509 	sub.w	r5, r5, r9
 80050c2:	6026      	str	r6, [r4, #0]
 80050c4:	60a5      	str	r5, [r4, #8]
 80050c6:	463e      	mov	r6, r7
 80050c8:	42be      	cmp	r6, r7
 80050ca:	d900      	bls.n	80050ce <__ssputs_r+0x86>
 80050cc:	463e      	mov	r6, r7
 80050ce:	4632      	mov	r2, r6
 80050d0:	6820      	ldr	r0, [r4, #0]
 80050d2:	4641      	mov	r1, r8
 80050d4:	f000 fab6 	bl	8005644 <memmove>
 80050d8:	68a3      	ldr	r3, [r4, #8]
 80050da:	6822      	ldr	r2, [r4, #0]
 80050dc:	1b9b      	subs	r3, r3, r6
 80050de:	4432      	add	r2, r6
 80050e0:	60a3      	str	r3, [r4, #8]
 80050e2:	6022      	str	r2, [r4, #0]
 80050e4:	2000      	movs	r0, #0
 80050e6:	e7db      	b.n	80050a0 <__ssputs_r+0x58>
 80050e8:	462a      	mov	r2, r5
 80050ea:	f000 fb6f 	bl	80057cc <_realloc_r>
 80050ee:	4606      	mov	r6, r0
 80050f0:	2800      	cmp	r0, #0
 80050f2:	d1e1      	bne.n	80050b8 <__ssputs_r+0x70>
 80050f4:	6921      	ldr	r1, [r4, #16]
 80050f6:	4650      	mov	r0, sl
 80050f8:	f000 fabe 	bl	8005678 <_free_r>
 80050fc:	e7c7      	b.n	800508e <__ssputs_r+0x46>
	...

08005100 <_svfiprintf_r>:
 8005100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005104:	4698      	mov	r8, r3
 8005106:	898b      	ldrh	r3, [r1, #12]
 8005108:	061b      	lsls	r3, r3, #24
 800510a:	b09d      	sub	sp, #116	; 0x74
 800510c:	4607      	mov	r7, r0
 800510e:	460d      	mov	r5, r1
 8005110:	4614      	mov	r4, r2
 8005112:	d50e      	bpl.n	8005132 <_svfiprintf_r+0x32>
 8005114:	690b      	ldr	r3, [r1, #16]
 8005116:	b963      	cbnz	r3, 8005132 <_svfiprintf_r+0x32>
 8005118:	2140      	movs	r1, #64	; 0x40
 800511a:	f000 fafd 	bl	8005718 <_malloc_r>
 800511e:	6028      	str	r0, [r5, #0]
 8005120:	6128      	str	r0, [r5, #16]
 8005122:	b920      	cbnz	r0, 800512e <_svfiprintf_r+0x2e>
 8005124:	230c      	movs	r3, #12
 8005126:	603b      	str	r3, [r7, #0]
 8005128:	f04f 30ff 	mov.w	r0, #4294967295
 800512c:	e0d1      	b.n	80052d2 <_svfiprintf_r+0x1d2>
 800512e:	2340      	movs	r3, #64	; 0x40
 8005130:	616b      	str	r3, [r5, #20]
 8005132:	2300      	movs	r3, #0
 8005134:	9309      	str	r3, [sp, #36]	; 0x24
 8005136:	2320      	movs	r3, #32
 8005138:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800513c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005140:	2330      	movs	r3, #48	; 0x30
 8005142:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80052ec <_svfiprintf_r+0x1ec>
 8005146:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800514a:	f04f 0901 	mov.w	r9, #1
 800514e:	4623      	mov	r3, r4
 8005150:	469a      	mov	sl, r3
 8005152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005156:	b10a      	cbz	r2, 800515c <_svfiprintf_r+0x5c>
 8005158:	2a25      	cmp	r2, #37	; 0x25
 800515a:	d1f9      	bne.n	8005150 <_svfiprintf_r+0x50>
 800515c:	ebba 0b04 	subs.w	fp, sl, r4
 8005160:	d00b      	beq.n	800517a <_svfiprintf_r+0x7a>
 8005162:	465b      	mov	r3, fp
 8005164:	4622      	mov	r2, r4
 8005166:	4629      	mov	r1, r5
 8005168:	4638      	mov	r0, r7
 800516a:	f7ff ff6d 	bl	8005048 <__ssputs_r>
 800516e:	3001      	adds	r0, #1
 8005170:	f000 80aa 	beq.w	80052c8 <_svfiprintf_r+0x1c8>
 8005174:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005176:	445a      	add	r2, fp
 8005178:	9209      	str	r2, [sp, #36]	; 0x24
 800517a:	f89a 3000 	ldrb.w	r3, [sl]
 800517e:	2b00      	cmp	r3, #0
 8005180:	f000 80a2 	beq.w	80052c8 <_svfiprintf_r+0x1c8>
 8005184:	2300      	movs	r3, #0
 8005186:	f04f 32ff 	mov.w	r2, #4294967295
 800518a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800518e:	f10a 0a01 	add.w	sl, sl, #1
 8005192:	9304      	str	r3, [sp, #16]
 8005194:	9307      	str	r3, [sp, #28]
 8005196:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800519a:	931a      	str	r3, [sp, #104]	; 0x68
 800519c:	4654      	mov	r4, sl
 800519e:	2205      	movs	r2, #5
 80051a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051a4:	4851      	ldr	r0, [pc, #324]	; (80052ec <_svfiprintf_r+0x1ec>)
 80051a6:	f7fb f81b 	bl	80001e0 <memchr>
 80051aa:	9a04      	ldr	r2, [sp, #16]
 80051ac:	b9d8      	cbnz	r0, 80051e6 <_svfiprintf_r+0xe6>
 80051ae:	06d0      	lsls	r0, r2, #27
 80051b0:	bf44      	itt	mi
 80051b2:	2320      	movmi	r3, #32
 80051b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051b8:	0711      	lsls	r1, r2, #28
 80051ba:	bf44      	itt	mi
 80051bc:	232b      	movmi	r3, #43	; 0x2b
 80051be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051c2:	f89a 3000 	ldrb.w	r3, [sl]
 80051c6:	2b2a      	cmp	r3, #42	; 0x2a
 80051c8:	d015      	beq.n	80051f6 <_svfiprintf_r+0xf6>
 80051ca:	9a07      	ldr	r2, [sp, #28]
 80051cc:	4654      	mov	r4, sl
 80051ce:	2000      	movs	r0, #0
 80051d0:	f04f 0c0a 	mov.w	ip, #10
 80051d4:	4621      	mov	r1, r4
 80051d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051da:	3b30      	subs	r3, #48	; 0x30
 80051dc:	2b09      	cmp	r3, #9
 80051de:	d94e      	bls.n	800527e <_svfiprintf_r+0x17e>
 80051e0:	b1b0      	cbz	r0, 8005210 <_svfiprintf_r+0x110>
 80051e2:	9207      	str	r2, [sp, #28]
 80051e4:	e014      	b.n	8005210 <_svfiprintf_r+0x110>
 80051e6:	eba0 0308 	sub.w	r3, r0, r8
 80051ea:	fa09 f303 	lsl.w	r3, r9, r3
 80051ee:	4313      	orrs	r3, r2
 80051f0:	9304      	str	r3, [sp, #16]
 80051f2:	46a2      	mov	sl, r4
 80051f4:	e7d2      	b.n	800519c <_svfiprintf_r+0x9c>
 80051f6:	9b03      	ldr	r3, [sp, #12]
 80051f8:	1d19      	adds	r1, r3, #4
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	9103      	str	r1, [sp, #12]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	bfbb      	ittet	lt
 8005202:	425b      	neglt	r3, r3
 8005204:	f042 0202 	orrlt.w	r2, r2, #2
 8005208:	9307      	strge	r3, [sp, #28]
 800520a:	9307      	strlt	r3, [sp, #28]
 800520c:	bfb8      	it	lt
 800520e:	9204      	strlt	r2, [sp, #16]
 8005210:	7823      	ldrb	r3, [r4, #0]
 8005212:	2b2e      	cmp	r3, #46	; 0x2e
 8005214:	d10c      	bne.n	8005230 <_svfiprintf_r+0x130>
 8005216:	7863      	ldrb	r3, [r4, #1]
 8005218:	2b2a      	cmp	r3, #42	; 0x2a
 800521a:	d135      	bne.n	8005288 <_svfiprintf_r+0x188>
 800521c:	9b03      	ldr	r3, [sp, #12]
 800521e:	1d1a      	adds	r2, r3, #4
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	9203      	str	r2, [sp, #12]
 8005224:	2b00      	cmp	r3, #0
 8005226:	bfb8      	it	lt
 8005228:	f04f 33ff 	movlt.w	r3, #4294967295
 800522c:	3402      	adds	r4, #2
 800522e:	9305      	str	r3, [sp, #20]
 8005230:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80052fc <_svfiprintf_r+0x1fc>
 8005234:	7821      	ldrb	r1, [r4, #0]
 8005236:	2203      	movs	r2, #3
 8005238:	4650      	mov	r0, sl
 800523a:	f7fa ffd1 	bl	80001e0 <memchr>
 800523e:	b140      	cbz	r0, 8005252 <_svfiprintf_r+0x152>
 8005240:	2340      	movs	r3, #64	; 0x40
 8005242:	eba0 000a 	sub.w	r0, r0, sl
 8005246:	fa03 f000 	lsl.w	r0, r3, r0
 800524a:	9b04      	ldr	r3, [sp, #16]
 800524c:	4303      	orrs	r3, r0
 800524e:	3401      	adds	r4, #1
 8005250:	9304      	str	r3, [sp, #16]
 8005252:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005256:	4826      	ldr	r0, [pc, #152]	; (80052f0 <_svfiprintf_r+0x1f0>)
 8005258:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800525c:	2206      	movs	r2, #6
 800525e:	f7fa ffbf 	bl	80001e0 <memchr>
 8005262:	2800      	cmp	r0, #0
 8005264:	d038      	beq.n	80052d8 <_svfiprintf_r+0x1d8>
 8005266:	4b23      	ldr	r3, [pc, #140]	; (80052f4 <_svfiprintf_r+0x1f4>)
 8005268:	bb1b      	cbnz	r3, 80052b2 <_svfiprintf_r+0x1b2>
 800526a:	9b03      	ldr	r3, [sp, #12]
 800526c:	3307      	adds	r3, #7
 800526e:	f023 0307 	bic.w	r3, r3, #7
 8005272:	3308      	adds	r3, #8
 8005274:	9303      	str	r3, [sp, #12]
 8005276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005278:	4433      	add	r3, r6
 800527a:	9309      	str	r3, [sp, #36]	; 0x24
 800527c:	e767      	b.n	800514e <_svfiprintf_r+0x4e>
 800527e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005282:	460c      	mov	r4, r1
 8005284:	2001      	movs	r0, #1
 8005286:	e7a5      	b.n	80051d4 <_svfiprintf_r+0xd4>
 8005288:	2300      	movs	r3, #0
 800528a:	3401      	adds	r4, #1
 800528c:	9305      	str	r3, [sp, #20]
 800528e:	4619      	mov	r1, r3
 8005290:	f04f 0c0a 	mov.w	ip, #10
 8005294:	4620      	mov	r0, r4
 8005296:	f810 2b01 	ldrb.w	r2, [r0], #1
 800529a:	3a30      	subs	r2, #48	; 0x30
 800529c:	2a09      	cmp	r2, #9
 800529e:	d903      	bls.n	80052a8 <_svfiprintf_r+0x1a8>
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d0c5      	beq.n	8005230 <_svfiprintf_r+0x130>
 80052a4:	9105      	str	r1, [sp, #20]
 80052a6:	e7c3      	b.n	8005230 <_svfiprintf_r+0x130>
 80052a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80052ac:	4604      	mov	r4, r0
 80052ae:	2301      	movs	r3, #1
 80052b0:	e7f0      	b.n	8005294 <_svfiprintf_r+0x194>
 80052b2:	ab03      	add	r3, sp, #12
 80052b4:	9300      	str	r3, [sp, #0]
 80052b6:	462a      	mov	r2, r5
 80052b8:	4b0f      	ldr	r3, [pc, #60]	; (80052f8 <_svfiprintf_r+0x1f8>)
 80052ba:	a904      	add	r1, sp, #16
 80052bc:	4638      	mov	r0, r7
 80052be:	f3af 8000 	nop.w
 80052c2:	1c42      	adds	r2, r0, #1
 80052c4:	4606      	mov	r6, r0
 80052c6:	d1d6      	bne.n	8005276 <_svfiprintf_r+0x176>
 80052c8:	89ab      	ldrh	r3, [r5, #12]
 80052ca:	065b      	lsls	r3, r3, #25
 80052cc:	f53f af2c 	bmi.w	8005128 <_svfiprintf_r+0x28>
 80052d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052d2:	b01d      	add	sp, #116	; 0x74
 80052d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052d8:	ab03      	add	r3, sp, #12
 80052da:	9300      	str	r3, [sp, #0]
 80052dc:	462a      	mov	r2, r5
 80052de:	4b06      	ldr	r3, [pc, #24]	; (80052f8 <_svfiprintf_r+0x1f8>)
 80052e0:	a904      	add	r1, sp, #16
 80052e2:	4638      	mov	r0, r7
 80052e4:	f000 f87a 	bl	80053dc <_printf_i>
 80052e8:	e7eb      	b.n	80052c2 <_svfiprintf_r+0x1c2>
 80052ea:	bf00      	nop
 80052ec:	08005db0 	.word	0x08005db0
 80052f0:	08005dba 	.word	0x08005dba
 80052f4:	00000000 	.word	0x00000000
 80052f8:	08005049 	.word	0x08005049
 80052fc:	08005db6 	.word	0x08005db6

08005300 <_printf_common>:
 8005300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005304:	4616      	mov	r6, r2
 8005306:	4699      	mov	r9, r3
 8005308:	688a      	ldr	r2, [r1, #8]
 800530a:	690b      	ldr	r3, [r1, #16]
 800530c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005310:	4293      	cmp	r3, r2
 8005312:	bfb8      	it	lt
 8005314:	4613      	movlt	r3, r2
 8005316:	6033      	str	r3, [r6, #0]
 8005318:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800531c:	4607      	mov	r7, r0
 800531e:	460c      	mov	r4, r1
 8005320:	b10a      	cbz	r2, 8005326 <_printf_common+0x26>
 8005322:	3301      	adds	r3, #1
 8005324:	6033      	str	r3, [r6, #0]
 8005326:	6823      	ldr	r3, [r4, #0]
 8005328:	0699      	lsls	r1, r3, #26
 800532a:	bf42      	ittt	mi
 800532c:	6833      	ldrmi	r3, [r6, #0]
 800532e:	3302      	addmi	r3, #2
 8005330:	6033      	strmi	r3, [r6, #0]
 8005332:	6825      	ldr	r5, [r4, #0]
 8005334:	f015 0506 	ands.w	r5, r5, #6
 8005338:	d106      	bne.n	8005348 <_printf_common+0x48>
 800533a:	f104 0a19 	add.w	sl, r4, #25
 800533e:	68e3      	ldr	r3, [r4, #12]
 8005340:	6832      	ldr	r2, [r6, #0]
 8005342:	1a9b      	subs	r3, r3, r2
 8005344:	42ab      	cmp	r3, r5
 8005346:	dc26      	bgt.n	8005396 <_printf_common+0x96>
 8005348:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800534c:	1e13      	subs	r3, r2, #0
 800534e:	6822      	ldr	r2, [r4, #0]
 8005350:	bf18      	it	ne
 8005352:	2301      	movne	r3, #1
 8005354:	0692      	lsls	r2, r2, #26
 8005356:	d42b      	bmi.n	80053b0 <_printf_common+0xb0>
 8005358:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800535c:	4649      	mov	r1, r9
 800535e:	4638      	mov	r0, r7
 8005360:	47c0      	blx	r8
 8005362:	3001      	adds	r0, #1
 8005364:	d01e      	beq.n	80053a4 <_printf_common+0xa4>
 8005366:	6823      	ldr	r3, [r4, #0]
 8005368:	68e5      	ldr	r5, [r4, #12]
 800536a:	6832      	ldr	r2, [r6, #0]
 800536c:	f003 0306 	and.w	r3, r3, #6
 8005370:	2b04      	cmp	r3, #4
 8005372:	bf08      	it	eq
 8005374:	1aad      	subeq	r5, r5, r2
 8005376:	68a3      	ldr	r3, [r4, #8]
 8005378:	6922      	ldr	r2, [r4, #16]
 800537a:	bf0c      	ite	eq
 800537c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005380:	2500      	movne	r5, #0
 8005382:	4293      	cmp	r3, r2
 8005384:	bfc4      	itt	gt
 8005386:	1a9b      	subgt	r3, r3, r2
 8005388:	18ed      	addgt	r5, r5, r3
 800538a:	2600      	movs	r6, #0
 800538c:	341a      	adds	r4, #26
 800538e:	42b5      	cmp	r5, r6
 8005390:	d11a      	bne.n	80053c8 <_printf_common+0xc8>
 8005392:	2000      	movs	r0, #0
 8005394:	e008      	b.n	80053a8 <_printf_common+0xa8>
 8005396:	2301      	movs	r3, #1
 8005398:	4652      	mov	r2, sl
 800539a:	4649      	mov	r1, r9
 800539c:	4638      	mov	r0, r7
 800539e:	47c0      	blx	r8
 80053a0:	3001      	adds	r0, #1
 80053a2:	d103      	bne.n	80053ac <_printf_common+0xac>
 80053a4:	f04f 30ff 	mov.w	r0, #4294967295
 80053a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053ac:	3501      	adds	r5, #1
 80053ae:	e7c6      	b.n	800533e <_printf_common+0x3e>
 80053b0:	18e1      	adds	r1, r4, r3
 80053b2:	1c5a      	adds	r2, r3, #1
 80053b4:	2030      	movs	r0, #48	; 0x30
 80053b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053ba:	4422      	add	r2, r4
 80053bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053c4:	3302      	adds	r3, #2
 80053c6:	e7c7      	b.n	8005358 <_printf_common+0x58>
 80053c8:	2301      	movs	r3, #1
 80053ca:	4622      	mov	r2, r4
 80053cc:	4649      	mov	r1, r9
 80053ce:	4638      	mov	r0, r7
 80053d0:	47c0      	blx	r8
 80053d2:	3001      	adds	r0, #1
 80053d4:	d0e6      	beq.n	80053a4 <_printf_common+0xa4>
 80053d6:	3601      	adds	r6, #1
 80053d8:	e7d9      	b.n	800538e <_printf_common+0x8e>
	...

080053dc <_printf_i>:
 80053dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053e0:	460c      	mov	r4, r1
 80053e2:	4691      	mov	r9, r2
 80053e4:	7e27      	ldrb	r7, [r4, #24]
 80053e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80053e8:	2f78      	cmp	r7, #120	; 0x78
 80053ea:	4680      	mov	r8, r0
 80053ec:	469a      	mov	sl, r3
 80053ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053f2:	d807      	bhi.n	8005404 <_printf_i+0x28>
 80053f4:	2f62      	cmp	r7, #98	; 0x62
 80053f6:	d80a      	bhi.n	800540e <_printf_i+0x32>
 80053f8:	2f00      	cmp	r7, #0
 80053fa:	f000 80d8 	beq.w	80055ae <_printf_i+0x1d2>
 80053fe:	2f58      	cmp	r7, #88	; 0x58
 8005400:	f000 80a3 	beq.w	800554a <_printf_i+0x16e>
 8005404:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005408:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800540c:	e03a      	b.n	8005484 <_printf_i+0xa8>
 800540e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005412:	2b15      	cmp	r3, #21
 8005414:	d8f6      	bhi.n	8005404 <_printf_i+0x28>
 8005416:	a001      	add	r0, pc, #4	; (adr r0, 800541c <_printf_i+0x40>)
 8005418:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800541c:	08005475 	.word	0x08005475
 8005420:	08005489 	.word	0x08005489
 8005424:	08005405 	.word	0x08005405
 8005428:	08005405 	.word	0x08005405
 800542c:	08005405 	.word	0x08005405
 8005430:	08005405 	.word	0x08005405
 8005434:	08005489 	.word	0x08005489
 8005438:	08005405 	.word	0x08005405
 800543c:	08005405 	.word	0x08005405
 8005440:	08005405 	.word	0x08005405
 8005444:	08005405 	.word	0x08005405
 8005448:	08005595 	.word	0x08005595
 800544c:	080054b9 	.word	0x080054b9
 8005450:	08005577 	.word	0x08005577
 8005454:	08005405 	.word	0x08005405
 8005458:	08005405 	.word	0x08005405
 800545c:	080055b7 	.word	0x080055b7
 8005460:	08005405 	.word	0x08005405
 8005464:	080054b9 	.word	0x080054b9
 8005468:	08005405 	.word	0x08005405
 800546c:	08005405 	.word	0x08005405
 8005470:	0800557f 	.word	0x0800557f
 8005474:	680b      	ldr	r3, [r1, #0]
 8005476:	1d1a      	adds	r2, r3, #4
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	600a      	str	r2, [r1, #0]
 800547c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005480:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005484:	2301      	movs	r3, #1
 8005486:	e0a3      	b.n	80055d0 <_printf_i+0x1f4>
 8005488:	6825      	ldr	r5, [r4, #0]
 800548a:	6808      	ldr	r0, [r1, #0]
 800548c:	062e      	lsls	r6, r5, #24
 800548e:	f100 0304 	add.w	r3, r0, #4
 8005492:	d50a      	bpl.n	80054aa <_printf_i+0xce>
 8005494:	6805      	ldr	r5, [r0, #0]
 8005496:	600b      	str	r3, [r1, #0]
 8005498:	2d00      	cmp	r5, #0
 800549a:	da03      	bge.n	80054a4 <_printf_i+0xc8>
 800549c:	232d      	movs	r3, #45	; 0x2d
 800549e:	426d      	negs	r5, r5
 80054a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054a4:	485e      	ldr	r0, [pc, #376]	; (8005620 <_printf_i+0x244>)
 80054a6:	230a      	movs	r3, #10
 80054a8:	e019      	b.n	80054de <_printf_i+0x102>
 80054aa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80054ae:	6805      	ldr	r5, [r0, #0]
 80054b0:	600b      	str	r3, [r1, #0]
 80054b2:	bf18      	it	ne
 80054b4:	b22d      	sxthne	r5, r5
 80054b6:	e7ef      	b.n	8005498 <_printf_i+0xbc>
 80054b8:	680b      	ldr	r3, [r1, #0]
 80054ba:	6825      	ldr	r5, [r4, #0]
 80054bc:	1d18      	adds	r0, r3, #4
 80054be:	6008      	str	r0, [r1, #0]
 80054c0:	0628      	lsls	r0, r5, #24
 80054c2:	d501      	bpl.n	80054c8 <_printf_i+0xec>
 80054c4:	681d      	ldr	r5, [r3, #0]
 80054c6:	e002      	b.n	80054ce <_printf_i+0xf2>
 80054c8:	0669      	lsls	r1, r5, #25
 80054ca:	d5fb      	bpl.n	80054c4 <_printf_i+0xe8>
 80054cc:	881d      	ldrh	r5, [r3, #0]
 80054ce:	4854      	ldr	r0, [pc, #336]	; (8005620 <_printf_i+0x244>)
 80054d0:	2f6f      	cmp	r7, #111	; 0x6f
 80054d2:	bf0c      	ite	eq
 80054d4:	2308      	moveq	r3, #8
 80054d6:	230a      	movne	r3, #10
 80054d8:	2100      	movs	r1, #0
 80054da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054de:	6866      	ldr	r6, [r4, #4]
 80054e0:	60a6      	str	r6, [r4, #8]
 80054e2:	2e00      	cmp	r6, #0
 80054e4:	bfa2      	ittt	ge
 80054e6:	6821      	ldrge	r1, [r4, #0]
 80054e8:	f021 0104 	bicge.w	r1, r1, #4
 80054ec:	6021      	strge	r1, [r4, #0]
 80054ee:	b90d      	cbnz	r5, 80054f4 <_printf_i+0x118>
 80054f0:	2e00      	cmp	r6, #0
 80054f2:	d04d      	beq.n	8005590 <_printf_i+0x1b4>
 80054f4:	4616      	mov	r6, r2
 80054f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80054fa:	fb03 5711 	mls	r7, r3, r1, r5
 80054fe:	5dc7      	ldrb	r7, [r0, r7]
 8005500:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005504:	462f      	mov	r7, r5
 8005506:	42bb      	cmp	r3, r7
 8005508:	460d      	mov	r5, r1
 800550a:	d9f4      	bls.n	80054f6 <_printf_i+0x11a>
 800550c:	2b08      	cmp	r3, #8
 800550e:	d10b      	bne.n	8005528 <_printf_i+0x14c>
 8005510:	6823      	ldr	r3, [r4, #0]
 8005512:	07df      	lsls	r7, r3, #31
 8005514:	d508      	bpl.n	8005528 <_printf_i+0x14c>
 8005516:	6923      	ldr	r3, [r4, #16]
 8005518:	6861      	ldr	r1, [r4, #4]
 800551a:	4299      	cmp	r1, r3
 800551c:	bfde      	ittt	le
 800551e:	2330      	movle	r3, #48	; 0x30
 8005520:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005524:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005528:	1b92      	subs	r2, r2, r6
 800552a:	6122      	str	r2, [r4, #16]
 800552c:	f8cd a000 	str.w	sl, [sp]
 8005530:	464b      	mov	r3, r9
 8005532:	aa03      	add	r2, sp, #12
 8005534:	4621      	mov	r1, r4
 8005536:	4640      	mov	r0, r8
 8005538:	f7ff fee2 	bl	8005300 <_printf_common>
 800553c:	3001      	adds	r0, #1
 800553e:	d14c      	bne.n	80055da <_printf_i+0x1fe>
 8005540:	f04f 30ff 	mov.w	r0, #4294967295
 8005544:	b004      	add	sp, #16
 8005546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800554a:	4835      	ldr	r0, [pc, #212]	; (8005620 <_printf_i+0x244>)
 800554c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005550:	6823      	ldr	r3, [r4, #0]
 8005552:	680e      	ldr	r6, [r1, #0]
 8005554:	061f      	lsls	r7, r3, #24
 8005556:	f856 5b04 	ldr.w	r5, [r6], #4
 800555a:	600e      	str	r6, [r1, #0]
 800555c:	d514      	bpl.n	8005588 <_printf_i+0x1ac>
 800555e:	07d9      	lsls	r1, r3, #31
 8005560:	bf44      	itt	mi
 8005562:	f043 0320 	orrmi.w	r3, r3, #32
 8005566:	6023      	strmi	r3, [r4, #0]
 8005568:	b91d      	cbnz	r5, 8005572 <_printf_i+0x196>
 800556a:	6823      	ldr	r3, [r4, #0]
 800556c:	f023 0320 	bic.w	r3, r3, #32
 8005570:	6023      	str	r3, [r4, #0]
 8005572:	2310      	movs	r3, #16
 8005574:	e7b0      	b.n	80054d8 <_printf_i+0xfc>
 8005576:	6823      	ldr	r3, [r4, #0]
 8005578:	f043 0320 	orr.w	r3, r3, #32
 800557c:	6023      	str	r3, [r4, #0]
 800557e:	2378      	movs	r3, #120	; 0x78
 8005580:	4828      	ldr	r0, [pc, #160]	; (8005624 <_printf_i+0x248>)
 8005582:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005586:	e7e3      	b.n	8005550 <_printf_i+0x174>
 8005588:	065e      	lsls	r6, r3, #25
 800558a:	bf48      	it	mi
 800558c:	b2ad      	uxthmi	r5, r5
 800558e:	e7e6      	b.n	800555e <_printf_i+0x182>
 8005590:	4616      	mov	r6, r2
 8005592:	e7bb      	b.n	800550c <_printf_i+0x130>
 8005594:	680b      	ldr	r3, [r1, #0]
 8005596:	6826      	ldr	r6, [r4, #0]
 8005598:	6960      	ldr	r0, [r4, #20]
 800559a:	1d1d      	adds	r5, r3, #4
 800559c:	600d      	str	r5, [r1, #0]
 800559e:	0635      	lsls	r5, r6, #24
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	d501      	bpl.n	80055a8 <_printf_i+0x1cc>
 80055a4:	6018      	str	r0, [r3, #0]
 80055a6:	e002      	b.n	80055ae <_printf_i+0x1d2>
 80055a8:	0671      	lsls	r1, r6, #25
 80055aa:	d5fb      	bpl.n	80055a4 <_printf_i+0x1c8>
 80055ac:	8018      	strh	r0, [r3, #0]
 80055ae:	2300      	movs	r3, #0
 80055b0:	6123      	str	r3, [r4, #16]
 80055b2:	4616      	mov	r6, r2
 80055b4:	e7ba      	b.n	800552c <_printf_i+0x150>
 80055b6:	680b      	ldr	r3, [r1, #0]
 80055b8:	1d1a      	adds	r2, r3, #4
 80055ba:	600a      	str	r2, [r1, #0]
 80055bc:	681e      	ldr	r6, [r3, #0]
 80055be:	6862      	ldr	r2, [r4, #4]
 80055c0:	2100      	movs	r1, #0
 80055c2:	4630      	mov	r0, r6
 80055c4:	f7fa fe0c 	bl	80001e0 <memchr>
 80055c8:	b108      	cbz	r0, 80055ce <_printf_i+0x1f2>
 80055ca:	1b80      	subs	r0, r0, r6
 80055cc:	6060      	str	r0, [r4, #4]
 80055ce:	6863      	ldr	r3, [r4, #4]
 80055d0:	6123      	str	r3, [r4, #16]
 80055d2:	2300      	movs	r3, #0
 80055d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055d8:	e7a8      	b.n	800552c <_printf_i+0x150>
 80055da:	6923      	ldr	r3, [r4, #16]
 80055dc:	4632      	mov	r2, r6
 80055de:	4649      	mov	r1, r9
 80055e0:	4640      	mov	r0, r8
 80055e2:	47d0      	blx	sl
 80055e4:	3001      	adds	r0, #1
 80055e6:	d0ab      	beq.n	8005540 <_printf_i+0x164>
 80055e8:	6823      	ldr	r3, [r4, #0]
 80055ea:	079b      	lsls	r3, r3, #30
 80055ec:	d413      	bmi.n	8005616 <_printf_i+0x23a>
 80055ee:	68e0      	ldr	r0, [r4, #12]
 80055f0:	9b03      	ldr	r3, [sp, #12]
 80055f2:	4298      	cmp	r0, r3
 80055f4:	bfb8      	it	lt
 80055f6:	4618      	movlt	r0, r3
 80055f8:	e7a4      	b.n	8005544 <_printf_i+0x168>
 80055fa:	2301      	movs	r3, #1
 80055fc:	4632      	mov	r2, r6
 80055fe:	4649      	mov	r1, r9
 8005600:	4640      	mov	r0, r8
 8005602:	47d0      	blx	sl
 8005604:	3001      	adds	r0, #1
 8005606:	d09b      	beq.n	8005540 <_printf_i+0x164>
 8005608:	3501      	adds	r5, #1
 800560a:	68e3      	ldr	r3, [r4, #12]
 800560c:	9903      	ldr	r1, [sp, #12]
 800560e:	1a5b      	subs	r3, r3, r1
 8005610:	42ab      	cmp	r3, r5
 8005612:	dcf2      	bgt.n	80055fa <_printf_i+0x21e>
 8005614:	e7eb      	b.n	80055ee <_printf_i+0x212>
 8005616:	2500      	movs	r5, #0
 8005618:	f104 0619 	add.w	r6, r4, #25
 800561c:	e7f5      	b.n	800560a <_printf_i+0x22e>
 800561e:	bf00      	nop
 8005620:	08005dc1 	.word	0x08005dc1
 8005624:	08005dd2 	.word	0x08005dd2

08005628 <memcpy>:
 8005628:	440a      	add	r2, r1
 800562a:	4291      	cmp	r1, r2
 800562c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005630:	d100      	bne.n	8005634 <memcpy+0xc>
 8005632:	4770      	bx	lr
 8005634:	b510      	push	{r4, lr}
 8005636:	f811 4b01 	ldrb.w	r4, [r1], #1
 800563a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800563e:	4291      	cmp	r1, r2
 8005640:	d1f9      	bne.n	8005636 <memcpy+0xe>
 8005642:	bd10      	pop	{r4, pc}

08005644 <memmove>:
 8005644:	4288      	cmp	r0, r1
 8005646:	b510      	push	{r4, lr}
 8005648:	eb01 0402 	add.w	r4, r1, r2
 800564c:	d902      	bls.n	8005654 <memmove+0x10>
 800564e:	4284      	cmp	r4, r0
 8005650:	4623      	mov	r3, r4
 8005652:	d807      	bhi.n	8005664 <memmove+0x20>
 8005654:	1e43      	subs	r3, r0, #1
 8005656:	42a1      	cmp	r1, r4
 8005658:	d008      	beq.n	800566c <memmove+0x28>
 800565a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800565e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005662:	e7f8      	b.n	8005656 <memmove+0x12>
 8005664:	4402      	add	r2, r0
 8005666:	4601      	mov	r1, r0
 8005668:	428a      	cmp	r2, r1
 800566a:	d100      	bne.n	800566e <memmove+0x2a>
 800566c:	bd10      	pop	{r4, pc}
 800566e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005672:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005676:	e7f7      	b.n	8005668 <memmove+0x24>

08005678 <_free_r>:
 8005678:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800567a:	2900      	cmp	r1, #0
 800567c:	d048      	beq.n	8005710 <_free_r+0x98>
 800567e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005682:	9001      	str	r0, [sp, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	f1a1 0404 	sub.w	r4, r1, #4
 800568a:	bfb8      	it	lt
 800568c:	18e4      	addlt	r4, r4, r3
 800568e:	f000 f8d3 	bl	8005838 <__malloc_lock>
 8005692:	4a20      	ldr	r2, [pc, #128]	; (8005714 <_free_r+0x9c>)
 8005694:	9801      	ldr	r0, [sp, #4]
 8005696:	6813      	ldr	r3, [r2, #0]
 8005698:	4615      	mov	r5, r2
 800569a:	b933      	cbnz	r3, 80056aa <_free_r+0x32>
 800569c:	6063      	str	r3, [r4, #4]
 800569e:	6014      	str	r4, [r2, #0]
 80056a0:	b003      	add	sp, #12
 80056a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056a6:	f000 b8cd 	b.w	8005844 <__malloc_unlock>
 80056aa:	42a3      	cmp	r3, r4
 80056ac:	d90b      	bls.n	80056c6 <_free_r+0x4e>
 80056ae:	6821      	ldr	r1, [r4, #0]
 80056b0:	1862      	adds	r2, r4, r1
 80056b2:	4293      	cmp	r3, r2
 80056b4:	bf04      	itt	eq
 80056b6:	681a      	ldreq	r2, [r3, #0]
 80056b8:	685b      	ldreq	r3, [r3, #4]
 80056ba:	6063      	str	r3, [r4, #4]
 80056bc:	bf04      	itt	eq
 80056be:	1852      	addeq	r2, r2, r1
 80056c0:	6022      	streq	r2, [r4, #0]
 80056c2:	602c      	str	r4, [r5, #0]
 80056c4:	e7ec      	b.n	80056a0 <_free_r+0x28>
 80056c6:	461a      	mov	r2, r3
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	b10b      	cbz	r3, 80056d0 <_free_r+0x58>
 80056cc:	42a3      	cmp	r3, r4
 80056ce:	d9fa      	bls.n	80056c6 <_free_r+0x4e>
 80056d0:	6811      	ldr	r1, [r2, #0]
 80056d2:	1855      	adds	r5, r2, r1
 80056d4:	42a5      	cmp	r5, r4
 80056d6:	d10b      	bne.n	80056f0 <_free_r+0x78>
 80056d8:	6824      	ldr	r4, [r4, #0]
 80056da:	4421      	add	r1, r4
 80056dc:	1854      	adds	r4, r2, r1
 80056de:	42a3      	cmp	r3, r4
 80056e0:	6011      	str	r1, [r2, #0]
 80056e2:	d1dd      	bne.n	80056a0 <_free_r+0x28>
 80056e4:	681c      	ldr	r4, [r3, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	6053      	str	r3, [r2, #4]
 80056ea:	4421      	add	r1, r4
 80056ec:	6011      	str	r1, [r2, #0]
 80056ee:	e7d7      	b.n	80056a0 <_free_r+0x28>
 80056f0:	d902      	bls.n	80056f8 <_free_r+0x80>
 80056f2:	230c      	movs	r3, #12
 80056f4:	6003      	str	r3, [r0, #0]
 80056f6:	e7d3      	b.n	80056a0 <_free_r+0x28>
 80056f8:	6825      	ldr	r5, [r4, #0]
 80056fa:	1961      	adds	r1, r4, r5
 80056fc:	428b      	cmp	r3, r1
 80056fe:	bf04      	itt	eq
 8005700:	6819      	ldreq	r1, [r3, #0]
 8005702:	685b      	ldreq	r3, [r3, #4]
 8005704:	6063      	str	r3, [r4, #4]
 8005706:	bf04      	itt	eq
 8005708:	1949      	addeq	r1, r1, r5
 800570a:	6021      	streq	r1, [r4, #0]
 800570c:	6054      	str	r4, [r2, #4]
 800570e:	e7c7      	b.n	80056a0 <_free_r+0x28>
 8005710:	b003      	add	sp, #12
 8005712:	bd30      	pop	{r4, r5, pc}
 8005714:	2000008c 	.word	0x2000008c

08005718 <_malloc_r>:
 8005718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800571a:	1ccd      	adds	r5, r1, #3
 800571c:	f025 0503 	bic.w	r5, r5, #3
 8005720:	3508      	adds	r5, #8
 8005722:	2d0c      	cmp	r5, #12
 8005724:	bf38      	it	cc
 8005726:	250c      	movcc	r5, #12
 8005728:	2d00      	cmp	r5, #0
 800572a:	4606      	mov	r6, r0
 800572c:	db01      	blt.n	8005732 <_malloc_r+0x1a>
 800572e:	42a9      	cmp	r1, r5
 8005730:	d903      	bls.n	800573a <_malloc_r+0x22>
 8005732:	230c      	movs	r3, #12
 8005734:	6033      	str	r3, [r6, #0]
 8005736:	2000      	movs	r0, #0
 8005738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800573a:	f000 f87d 	bl	8005838 <__malloc_lock>
 800573e:	4921      	ldr	r1, [pc, #132]	; (80057c4 <_malloc_r+0xac>)
 8005740:	680a      	ldr	r2, [r1, #0]
 8005742:	4614      	mov	r4, r2
 8005744:	b99c      	cbnz	r4, 800576e <_malloc_r+0x56>
 8005746:	4f20      	ldr	r7, [pc, #128]	; (80057c8 <_malloc_r+0xb0>)
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	b923      	cbnz	r3, 8005756 <_malloc_r+0x3e>
 800574c:	4621      	mov	r1, r4
 800574e:	4630      	mov	r0, r6
 8005750:	f000 f862 	bl	8005818 <_sbrk_r>
 8005754:	6038      	str	r0, [r7, #0]
 8005756:	4629      	mov	r1, r5
 8005758:	4630      	mov	r0, r6
 800575a:	f000 f85d 	bl	8005818 <_sbrk_r>
 800575e:	1c43      	adds	r3, r0, #1
 8005760:	d123      	bne.n	80057aa <_malloc_r+0x92>
 8005762:	230c      	movs	r3, #12
 8005764:	6033      	str	r3, [r6, #0]
 8005766:	4630      	mov	r0, r6
 8005768:	f000 f86c 	bl	8005844 <__malloc_unlock>
 800576c:	e7e3      	b.n	8005736 <_malloc_r+0x1e>
 800576e:	6823      	ldr	r3, [r4, #0]
 8005770:	1b5b      	subs	r3, r3, r5
 8005772:	d417      	bmi.n	80057a4 <_malloc_r+0x8c>
 8005774:	2b0b      	cmp	r3, #11
 8005776:	d903      	bls.n	8005780 <_malloc_r+0x68>
 8005778:	6023      	str	r3, [r4, #0]
 800577a:	441c      	add	r4, r3
 800577c:	6025      	str	r5, [r4, #0]
 800577e:	e004      	b.n	800578a <_malloc_r+0x72>
 8005780:	6863      	ldr	r3, [r4, #4]
 8005782:	42a2      	cmp	r2, r4
 8005784:	bf0c      	ite	eq
 8005786:	600b      	streq	r3, [r1, #0]
 8005788:	6053      	strne	r3, [r2, #4]
 800578a:	4630      	mov	r0, r6
 800578c:	f000 f85a 	bl	8005844 <__malloc_unlock>
 8005790:	f104 000b 	add.w	r0, r4, #11
 8005794:	1d23      	adds	r3, r4, #4
 8005796:	f020 0007 	bic.w	r0, r0, #7
 800579a:	1ac2      	subs	r2, r0, r3
 800579c:	d0cc      	beq.n	8005738 <_malloc_r+0x20>
 800579e:	1a1b      	subs	r3, r3, r0
 80057a0:	50a3      	str	r3, [r4, r2]
 80057a2:	e7c9      	b.n	8005738 <_malloc_r+0x20>
 80057a4:	4622      	mov	r2, r4
 80057a6:	6864      	ldr	r4, [r4, #4]
 80057a8:	e7cc      	b.n	8005744 <_malloc_r+0x2c>
 80057aa:	1cc4      	adds	r4, r0, #3
 80057ac:	f024 0403 	bic.w	r4, r4, #3
 80057b0:	42a0      	cmp	r0, r4
 80057b2:	d0e3      	beq.n	800577c <_malloc_r+0x64>
 80057b4:	1a21      	subs	r1, r4, r0
 80057b6:	4630      	mov	r0, r6
 80057b8:	f000 f82e 	bl	8005818 <_sbrk_r>
 80057bc:	3001      	adds	r0, #1
 80057be:	d1dd      	bne.n	800577c <_malloc_r+0x64>
 80057c0:	e7cf      	b.n	8005762 <_malloc_r+0x4a>
 80057c2:	bf00      	nop
 80057c4:	2000008c 	.word	0x2000008c
 80057c8:	20000090 	.word	0x20000090

080057cc <_realloc_r>:
 80057cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ce:	4607      	mov	r7, r0
 80057d0:	4614      	mov	r4, r2
 80057d2:	460e      	mov	r6, r1
 80057d4:	b921      	cbnz	r1, 80057e0 <_realloc_r+0x14>
 80057d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80057da:	4611      	mov	r1, r2
 80057dc:	f7ff bf9c 	b.w	8005718 <_malloc_r>
 80057e0:	b922      	cbnz	r2, 80057ec <_realloc_r+0x20>
 80057e2:	f7ff ff49 	bl	8005678 <_free_r>
 80057e6:	4625      	mov	r5, r4
 80057e8:	4628      	mov	r0, r5
 80057ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057ec:	f000 f830 	bl	8005850 <_malloc_usable_size_r>
 80057f0:	42a0      	cmp	r0, r4
 80057f2:	d20f      	bcs.n	8005814 <_realloc_r+0x48>
 80057f4:	4621      	mov	r1, r4
 80057f6:	4638      	mov	r0, r7
 80057f8:	f7ff ff8e 	bl	8005718 <_malloc_r>
 80057fc:	4605      	mov	r5, r0
 80057fe:	2800      	cmp	r0, #0
 8005800:	d0f2      	beq.n	80057e8 <_realloc_r+0x1c>
 8005802:	4631      	mov	r1, r6
 8005804:	4622      	mov	r2, r4
 8005806:	f7ff ff0f 	bl	8005628 <memcpy>
 800580a:	4631      	mov	r1, r6
 800580c:	4638      	mov	r0, r7
 800580e:	f7ff ff33 	bl	8005678 <_free_r>
 8005812:	e7e9      	b.n	80057e8 <_realloc_r+0x1c>
 8005814:	4635      	mov	r5, r6
 8005816:	e7e7      	b.n	80057e8 <_realloc_r+0x1c>

08005818 <_sbrk_r>:
 8005818:	b538      	push	{r3, r4, r5, lr}
 800581a:	4d06      	ldr	r5, [pc, #24]	; (8005834 <_sbrk_r+0x1c>)
 800581c:	2300      	movs	r3, #0
 800581e:	4604      	mov	r4, r0
 8005820:	4608      	mov	r0, r1
 8005822:	602b      	str	r3, [r5, #0]
 8005824:	f7fc fdc0 	bl	80023a8 <_sbrk>
 8005828:	1c43      	adds	r3, r0, #1
 800582a:	d102      	bne.n	8005832 <_sbrk_r+0x1a>
 800582c:	682b      	ldr	r3, [r5, #0]
 800582e:	b103      	cbz	r3, 8005832 <_sbrk_r+0x1a>
 8005830:	6023      	str	r3, [r4, #0]
 8005832:	bd38      	pop	{r3, r4, r5, pc}
 8005834:	20000684 	.word	0x20000684

08005838 <__malloc_lock>:
 8005838:	4801      	ldr	r0, [pc, #4]	; (8005840 <__malloc_lock+0x8>)
 800583a:	f000 b811 	b.w	8005860 <__retarget_lock_acquire_recursive>
 800583e:	bf00      	nop
 8005840:	2000068c 	.word	0x2000068c

08005844 <__malloc_unlock>:
 8005844:	4801      	ldr	r0, [pc, #4]	; (800584c <__malloc_unlock+0x8>)
 8005846:	f000 b80c 	b.w	8005862 <__retarget_lock_release_recursive>
 800584a:	bf00      	nop
 800584c:	2000068c 	.word	0x2000068c

08005850 <_malloc_usable_size_r>:
 8005850:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005854:	1f18      	subs	r0, r3, #4
 8005856:	2b00      	cmp	r3, #0
 8005858:	bfbc      	itt	lt
 800585a:	580b      	ldrlt	r3, [r1, r0]
 800585c:	18c0      	addlt	r0, r0, r3
 800585e:	4770      	bx	lr

08005860 <__retarget_lock_acquire_recursive>:
 8005860:	4770      	bx	lr

08005862 <__retarget_lock_release_recursive>:
 8005862:	4770      	bx	lr

08005864 <atan2>:
 8005864:	f000 b800 	b.w	8005868 <__ieee754_atan2>

08005868 <__ieee754_atan2>:
 8005868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800586c:	ec57 6b11 	vmov	r6, r7, d1
 8005870:	4273      	negs	r3, r6
 8005872:	f8df e184 	ldr.w	lr, [pc, #388]	; 80059f8 <__ieee754_atan2+0x190>
 8005876:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800587a:	4333      	orrs	r3, r6
 800587c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8005880:	4573      	cmp	r3, lr
 8005882:	ec51 0b10 	vmov	r0, r1, d0
 8005886:	ee11 8a10 	vmov	r8, s2
 800588a:	d80a      	bhi.n	80058a2 <__ieee754_atan2+0x3a>
 800588c:	4244      	negs	r4, r0
 800588e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005892:	4304      	orrs	r4, r0
 8005894:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8005898:	4574      	cmp	r4, lr
 800589a:	ee10 9a10 	vmov	r9, s0
 800589e:	468c      	mov	ip, r1
 80058a0:	d907      	bls.n	80058b2 <__ieee754_atan2+0x4a>
 80058a2:	4632      	mov	r2, r6
 80058a4:	463b      	mov	r3, r7
 80058a6:	f7fa fcf1 	bl	800028c <__adddf3>
 80058aa:	ec41 0b10 	vmov	d0, r0, r1
 80058ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058b2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80058b6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80058ba:	4334      	orrs	r4, r6
 80058bc:	d103      	bne.n	80058c6 <__ieee754_atan2+0x5e>
 80058be:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058c2:	f000 b89d 	b.w	8005a00 <atan>
 80058c6:	17bc      	asrs	r4, r7, #30
 80058c8:	f004 0402 	and.w	r4, r4, #2
 80058cc:	ea53 0909 	orrs.w	r9, r3, r9
 80058d0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80058d4:	d107      	bne.n	80058e6 <__ieee754_atan2+0x7e>
 80058d6:	2c02      	cmp	r4, #2
 80058d8:	d060      	beq.n	800599c <__ieee754_atan2+0x134>
 80058da:	2c03      	cmp	r4, #3
 80058dc:	d1e5      	bne.n	80058aa <__ieee754_atan2+0x42>
 80058de:	a142      	add	r1, pc, #264	; (adr r1, 80059e8 <__ieee754_atan2+0x180>)
 80058e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058e4:	e7e1      	b.n	80058aa <__ieee754_atan2+0x42>
 80058e6:	ea52 0808 	orrs.w	r8, r2, r8
 80058ea:	d106      	bne.n	80058fa <__ieee754_atan2+0x92>
 80058ec:	f1bc 0f00 	cmp.w	ip, #0
 80058f0:	da5f      	bge.n	80059b2 <__ieee754_atan2+0x14a>
 80058f2:	a13f      	add	r1, pc, #252	; (adr r1, 80059f0 <__ieee754_atan2+0x188>)
 80058f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058f8:	e7d7      	b.n	80058aa <__ieee754_atan2+0x42>
 80058fa:	4572      	cmp	r2, lr
 80058fc:	d10f      	bne.n	800591e <__ieee754_atan2+0xb6>
 80058fe:	4293      	cmp	r3, r2
 8005900:	f104 34ff 	add.w	r4, r4, #4294967295
 8005904:	d107      	bne.n	8005916 <__ieee754_atan2+0xae>
 8005906:	2c02      	cmp	r4, #2
 8005908:	d84c      	bhi.n	80059a4 <__ieee754_atan2+0x13c>
 800590a:	4b35      	ldr	r3, [pc, #212]	; (80059e0 <__ieee754_atan2+0x178>)
 800590c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8005910:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005914:	e7c9      	b.n	80058aa <__ieee754_atan2+0x42>
 8005916:	2c02      	cmp	r4, #2
 8005918:	d848      	bhi.n	80059ac <__ieee754_atan2+0x144>
 800591a:	4b32      	ldr	r3, [pc, #200]	; (80059e4 <__ieee754_atan2+0x17c>)
 800591c:	e7f6      	b.n	800590c <__ieee754_atan2+0xa4>
 800591e:	4573      	cmp	r3, lr
 8005920:	d0e4      	beq.n	80058ec <__ieee754_atan2+0x84>
 8005922:	1a9b      	subs	r3, r3, r2
 8005924:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8005928:	ea4f 5223 	mov.w	r2, r3, asr #20
 800592c:	da1e      	bge.n	800596c <__ieee754_atan2+0x104>
 800592e:	2f00      	cmp	r7, #0
 8005930:	da01      	bge.n	8005936 <__ieee754_atan2+0xce>
 8005932:	323c      	adds	r2, #60	; 0x3c
 8005934:	db1e      	blt.n	8005974 <__ieee754_atan2+0x10c>
 8005936:	4632      	mov	r2, r6
 8005938:	463b      	mov	r3, r7
 800593a:	f7fa ff87 	bl	800084c <__aeabi_ddiv>
 800593e:	ec41 0b10 	vmov	d0, r0, r1
 8005942:	f000 f9fd 	bl	8005d40 <fabs>
 8005946:	f000 f85b 	bl	8005a00 <atan>
 800594a:	ec51 0b10 	vmov	r0, r1, d0
 800594e:	2c01      	cmp	r4, #1
 8005950:	d013      	beq.n	800597a <__ieee754_atan2+0x112>
 8005952:	2c02      	cmp	r4, #2
 8005954:	d015      	beq.n	8005982 <__ieee754_atan2+0x11a>
 8005956:	2c00      	cmp	r4, #0
 8005958:	d0a7      	beq.n	80058aa <__ieee754_atan2+0x42>
 800595a:	a319      	add	r3, pc, #100	; (adr r3, 80059c0 <__ieee754_atan2+0x158>)
 800595c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005960:	f7fa fc92 	bl	8000288 <__aeabi_dsub>
 8005964:	a318      	add	r3, pc, #96	; (adr r3, 80059c8 <__ieee754_atan2+0x160>)
 8005966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596a:	e014      	b.n	8005996 <__ieee754_atan2+0x12e>
 800596c:	a118      	add	r1, pc, #96	; (adr r1, 80059d0 <__ieee754_atan2+0x168>)
 800596e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005972:	e7ec      	b.n	800594e <__ieee754_atan2+0xe6>
 8005974:	2000      	movs	r0, #0
 8005976:	2100      	movs	r1, #0
 8005978:	e7e9      	b.n	800594e <__ieee754_atan2+0xe6>
 800597a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800597e:	4619      	mov	r1, r3
 8005980:	e793      	b.n	80058aa <__ieee754_atan2+0x42>
 8005982:	a30f      	add	r3, pc, #60	; (adr r3, 80059c0 <__ieee754_atan2+0x158>)
 8005984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005988:	f7fa fc7e 	bl	8000288 <__aeabi_dsub>
 800598c:	4602      	mov	r2, r0
 800598e:	460b      	mov	r3, r1
 8005990:	a10d      	add	r1, pc, #52	; (adr r1, 80059c8 <__ieee754_atan2+0x160>)
 8005992:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005996:	f7fa fc77 	bl	8000288 <__aeabi_dsub>
 800599a:	e786      	b.n	80058aa <__ieee754_atan2+0x42>
 800599c:	a10a      	add	r1, pc, #40	; (adr r1, 80059c8 <__ieee754_atan2+0x160>)
 800599e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059a2:	e782      	b.n	80058aa <__ieee754_atan2+0x42>
 80059a4:	a10c      	add	r1, pc, #48	; (adr r1, 80059d8 <__ieee754_atan2+0x170>)
 80059a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059aa:	e77e      	b.n	80058aa <__ieee754_atan2+0x42>
 80059ac:	2000      	movs	r0, #0
 80059ae:	2100      	movs	r1, #0
 80059b0:	e77b      	b.n	80058aa <__ieee754_atan2+0x42>
 80059b2:	a107      	add	r1, pc, #28	; (adr r1, 80059d0 <__ieee754_atan2+0x168>)
 80059b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80059b8:	e777      	b.n	80058aa <__ieee754_atan2+0x42>
 80059ba:	bf00      	nop
 80059bc:	f3af 8000 	nop.w
 80059c0:	33145c07 	.word	0x33145c07
 80059c4:	3ca1a626 	.word	0x3ca1a626
 80059c8:	54442d18 	.word	0x54442d18
 80059cc:	400921fb 	.word	0x400921fb
 80059d0:	54442d18 	.word	0x54442d18
 80059d4:	3ff921fb 	.word	0x3ff921fb
 80059d8:	54442d18 	.word	0x54442d18
 80059dc:	3fe921fb 	.word	0x3fe921fb
 80059e0:	08005de8 	.word	0x08005de8
 80059e4:	08005e00 	.word	0x08005e00
 80059e8:	54442d18 	.word	0x54442d18
 80059ec:	c00921fb 	.word	0xc00921fb
 80059f0:	54442d18 	.word	0x54442d18
 80059f4:	bff921fb 	.word	0xbff921fb
 80059f8:	7ff00000 	.word	0x7ff00000
 80059fc:	00000000 	.word	0x00000000

08005a00 <atan>:
 8005a00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a04:	ec55 4b10 	vmov	r4, r5, d0
 8005a08:	4bc3      	ldr	r3, [pc, #780]	; (8005d18 <atan+0x318>)
 8005a0a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005a0e:	429e      	cmp	r6, r3
 8005a10:	46ab      	mov	fp, r5
 8005a12:	dd18      	ble.n	8005a46 <atan+0x46>
 8005a14:	4bc1      	ldr	r3, [pc, #772]	; (8005d1c <atan+0x31c>)
 8005a16:	429e      	cmp	r6, r3
 8005a18:	dc01      	bgt.n	8005a1e <atan+0x1e>
 8005a1a:	d109      	bne.n	8005a30 <atan+0x30>
 8005a1c:	b144      	cbz	r4, 8005a30 <atan+0x30>
 8005a1e:	4622      	mov	r2, r4
 8005a20:	462b      	mov	r3, r5
 8005a22:	4620      	mov	r0, r4
 8005a24:	4629      	mov	r1, r5
 8005a26:	f7fa fc31 	bl	800028c <__adddf3>
 8005a2a:	4604      	mov	r4, r0
 8005a2c:	460d      	mov	r5, r1
 8005a2e:	e006      	b.n	8005a3e <atan+0x3e>
 8005a30:	f1bb 0f00 	cmp.w	fp, #0
 8005a34:	f300 8131 	bgt.w	8005c9a <atan+0x29a>
 8005a38:	a59b      	add	r5, pc, #620	; (adr r5, 8005ca8 <atan+0x2a8>)
 8005a3a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005a3e:	ec45 4b10 	vmov	d0, r4, r5
 8005a42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a46:	4bb6      	ldr	r3, [pc, #728]	; (8005d20 <atan+0x320>)
 8005a48:	429e      	cmp	r6, r3
 8005a4a:	dc14      	bgt.n	8005a76 <atan+0x76>
 8005a4c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8005a50:	429e      	cmp	r6, r3
 8005a52:	dc0d      	bgt.n	8005a70 <atan+0x70>
 8005a54:	a396      	add	r3, pc, #600	; (adr r3, 8005cb0 <atan+0x2b0>)
 8005a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5a:	ee10 0a10 	vmov	r0, s0
 8005a5e:	4629      	mov	r1, r5
 8005a60:	f7fa fc14 	bl	800028c <__adddf3>
 8005a64:	4baf      	ldr	r3, [pc, #700]	; (8005d24 <atan+0x324>)
 8005a66:	2200      	movs	r2, #0
 8005a68:	f7fb f856 	bl	8000b18 <__aeabi_dcmpgt>
 8005a6c:	2800      	cmp	r0, #0
 8005a6e:	d1e6      	bne.n	8005a3e <atan+0x3e>
 8005a70:	f04f 3aff 	mov.w	sl, #4294967295
 8005a74:	e02b      	b.n	8005ace <atan+0xce>
 8005a76:	f000 f963 	bl	8005d40 <fabs>
 8005a7a:	4bab      	ldr	r3, [pc, #684]	; (8005d28 <atan+0x328>)
 8005a7c:	429e      	cmp	r6, r3
 8005a7e:	ec55 4b10 	vmov	r4, r5, d0
 8005a82:	f300 80bf 	bgt.w	8005c04 <atan+0x204>
 8005a86:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8005a8a:	429e      	cmp	r6, r3
 8005a8c:	f300 80a0 	bgt.w	8005bd0 <atan+0x1d0>
 8005a90:	ee10 2a10 	vmov	r2, s0
 8005a94:	ee10 0a10 	vmov	r0, s0
 8005a98:	462b      	mov	r3, r5
 8005a9a:	4629      	mov	r1, r5
 8005a9c:	f7fa fbf6 	bl	800028c <__adddf3>
 8005aa0:	4ba0      	ldr	r3, [pc, #640]	; (8005d24 <atan+0x324>)
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f7fa fbf0 	bl	8000288 <__aeabi_dsub>
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	4606      	mov	r6, r0
 8005aac:	460f      	mov	r7, r1
 8005aae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	4629      	mov	r1, r5
 8005ab6:	f7fa fbe9 	bl	800028c <__adddf3>
 8005aba:	4602      	mov	r2, r0
 8005abc:	460b      	mov	r3, r1
 8005abe:	4630      	mov	r0, r6
 8005ac0:	4639      	mov	r1, r7
 8005ac2:	f7fa fec3 	bl	800084c <__aeabi_ddiv>
 8005ac6:	f04f 0a00 	mov.w	sl, #0
 8005aca:	4604      	mov	r4, r0
 8005acc:	460d      	mov	r5, r1
 8005ace:	4622      	mov	r2, r4
 8005ad0:	462b      	mov	r3, r5
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	4629      	mov	r1, r5
 8005ad6:	f7fa fd8f 	bl	80005f8 <__aeabi_dmul>
 8005ada:	4602      	mov	r2, r0
 8005adc:	460b      	mov	r3, r1
 8005ade:	4680      	mov	r8, r0
 8005ae0:	4689      	mov	r9, r1
 8005ae2:	f7fa fd89 	bl	80005f8 <__aeabi_dmul>
 8005ae6:	a374      	add	r3, pc, #464	; (adr r3, 8005cb8 <atan+0x2b8>)
 8005ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aec:	4606      	mov	r6, r0
 8005aee:	460f      	mov	r7, r1
 8005af0:	f7fa fd82 	bl	80005f8 <__aeabi_dmul>
 8005af4:	a372      	add	r3, pc, #456	; (adr r3, 8005cc0 <atan+0x2c0>)
 8005af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afa:	f7fa fbc7 	bl	800028c <__adddf3>
 8005afe:	4632      	mov	r2, r6
 8005b00:	463b      	mov	r3, r7
 8005b02:	f7fa fd79 	bl	80005f8 <__aeabi_dmul>
 8005b06:	a370      	add	r3, pc, #448	; (adr r3, 8005cc8 <atan+0x2c8>)
 8005b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0c:	f7fa fbbe 	bl	800028c <__adddf3>
 8005b10:	4632      	mov	r2, r6
 8005b12:	463b      	mov	r3, r7
 8005b14:	f7fa fd70 	bl	80005f8 <__aeabi_dmul>
 8005b18:	a36d      	add	r3, pc, #436	; (adr r3, 8005cd0 <atan+0x2d0>)
 8005b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1e:	f7fa fbb5 	bl	800028c <__adddf3>
 8005b22:	4632      	mov	r2, r6
 8005b24:	463b      	mov	r3, r7
 8005b26:	f7fa fd67 	bl	80005f8 <__aeabi_dmul>
 8005b2a:	a36b      	add	r3, pc, #428	; (adr r3, 8005cd8 <atan+0x2d8>)
 8005b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b30:	f7fa fbac 	bl	800028c <__adddf3>
 8005b34:	4632      	mov	r2, r6
 8005b36:	463b      	mov	r3, r7
 8005b38:	f7fa fd5e 	bl	80005f8 <__aeabi_dmul>
 8005b3c:	a368      	add	r3, pc, #416	; (adr r3, 8005ce0 <atan+0x2e0>)
 8005b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b42:	f7fa fba3 	bl	800028c <__adddf3>
 8005b46:	4642      	mov	r2, r8
 8005b48:	464b      	mov	r3, r9
 8005b4a:	f7fa fd55 	bl	80005f8 <__aeabi_dmul>
 8005b4e:	a366      	add	r3, pc, #408	; (adr r3, 8005ce8 <atan+0x2e8>)
 8005b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b54:	4680      	mov	r8, r0
 8005b56:	4689      	mov	r9, r1
 8005b58:	4630      	mov	r0, r6
 8005b5a:	4639      	mov	r1, r7
 8005b5c:	f7fa fd4c 	bl	80005f8 <__aeabi_dmul>
 8005b60:	a363      	add	r3, pc, #396	; (adr r3, 8005cf0 <atan+0x2f0>)
 8005b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b66:	f7fa fb8f 	bl	8000288 <__aeabi_dsub>
 8005b6a:	4632      	mov	r2, r6
 8005b6c:	463b      	mov	r3, r7
 8005b6e:	f7fa fd43 	bl	80005f8 <__aeabi_dmul>
 8005b72:	a361      	add	r3, pc, #388	; (adr r3, 8005cf8 <atan+0x2f8>)
 8005b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b78:	f7fa fb86 	bl	8000288 <__aeabi_dsub>
 8005b7c:	4632      	mov	r2, r6
 8005b7e:	463b      	mov	r3, r7
 8005b80:	f7fa fd3a 	bl	80005f8 <__aeabi_dmul>
 8005b84:	a35e      	add	r3, pc, #376	; (adr r3, 8005d00 <atan+0x300>)
 8005b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8a:	f7fa fb7d 	bl	8000288 <__aeabi_dsub>
 8005b8e:	4632      	mov	r2, r6
 8005b90:	463b      	mov	r3, r7
 8005b92:	f7fa fd31 	bl	80005f8 <__aeabi_dmul>
 8005b96:	a35c      	add	r3, pc, #368	; (adr r3, 8005d08 <atan+0x308>)
 8005b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9c:	f7fa fb74 	bl	8000288 <__aeabi_dsub>
 8005ba0:	4632      	mov	r2, r6
 8005ba2:	463b      	mov	r3, r7
 8005ba4:	f7fa fd28 	bl	80005f8 <__aeabi_dmul>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	460b      	mov	r3, r1
 8005bac:	4640      	mov	r0, r8
 8005bae:	4649      	mov	r1, r9
 8005bb0:	f7fa fb6c 	bl	800028c <__adddf3>
 8005bb4:	4622      	mov	r2, r4
 8005bb6:	462b      	mov	r3, r5
 8005bb8:	f7fa fd1e 	bl	80005f8 <__aeabi_dmul>
 8005bbc:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	d14b      	bne.n	8005c5e <atan+0x25e>
 8005bc6:	4620      	mov	r0, r4
 8005bc8:	4629      	mov	r1, r5
 8005bca:	f7fa fb5d 	bl	8000288 <__aeabi_dsub>
 8005bce:	e72c      	b.n	8005a2a <atan+0x2a>
 8005bd0:	ee10 0a10 	vmov	r0, s0
 8005bd4:	4b53      	ldr	r3, [pc, #332]	; (8005d24 <atan+0x324>)
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	4629      	mov	r1, r5
 8005bda:	f7fa fb55 	bl	8000288 <__aeabi_dsub>
 8005bde:	4b51      	ldr	r3, [pc, #324]	; (8005d24 <atan+0x324>)
 8005be0:	4606      	mov	r6, r0
 8005be2:	460f      	mov	r7, r1
 8005be4:	2200      	movs	r2, #0
 8005be6:	4620      	mov	r0, r4
 8005be8:	4629      	mov	r1, r5
 8005bea:	f7fa fb4f 	bl	800028c <__adddf3>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	4630      	mov	r0, r6
 8005bf4:	4639      	mov	r1, r7
 8005bf6:	f7fa fe29 	bl	800084c <__aeabi_ddiv>
 8005bfa:	f04f 0a01 	mov.w	sl, #1
 8005bfe:	4604      	mov	r4, r0
 8005c00:	460d      	mov	r5, r1
 8005c02:	e764      	b.n	8005ace <atan+0xce>
 8005c04:	4b49      	ldr	r3, [pc, #292]	; (8005d2c <atan+0x32c>)
 8005c06:	429e      	cmp	r6, r3
 8005c08:	da1d      	bge.n	8005c46 <atan+0x246>
 8005c0a:	ee10 0a10 	vmov	r0, s0
 8005c0e:	4b48      	ldr	r3, [pc, #288]	; (8005d30 <atan+0x330>)
 8005c10:	2200      	movs	r2, #0
 8005c12:	4629      	mov	r1, r5
 8005c14:	f7fa fb38 	bl	8000288 <__aeabi_dsub>
 8005c18:	4b45      	ldr	r3, [pc, #276]	; (8005d30 <atan+0x330>)
 8005c1a:	4606      	mov	r6, r0
 8005c1c:	460f      	mov	r7, r1
 8005c1e:	2200      	movs	r2, #0
 8005c20:	4620      	mov	r0, r4
 8005c22:	4629      	mov	r1, r5
 8005c24:	f7fa fce8 	bl	80005f8 <__aeabi_dmul>
 8005c28:	4b3e      	ldr	r3, [pc, #248]	; (8005d24 <atan+0x324>)
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f7fa fb2e 	bl	800028c <__adddf3>
 8005c30:	4602      	mov	r2, r0
 8005c32:	460b      	mov	r3, r1
 8005c34:	4630      	mov	r0, r6
 8005c36:	4639      	mov	r1, r7
 8005c38:	f7fa fe08 	bl	800084c <__aeabi_ddiv>
 8005c3c:	f04f 0a02 	mov.w	sl, #2
 8005c40:	4604      	mov	r4, r0
 8005c42:	460d      	mov	r5, r1
 8005c44:	e743      	b.n	8005ace <atan+0xce>
 8005c46:	462b      	mov	r3, r5
 8005c48:	ee10 2a10 	vmov	r2, s0
 8005c4c:	4939      	ldr	r1, [pc, #228]	; (8005d34 <atan+0x334>)
 8005c4e:	2000      	movs	r0, #0
 8005c50:	f7fa fdfc 	bl	800084c <__aeabi_ddiv>
 8005c54:	f04f 0a03 	mov.w	sl, #3
 8005c58:	4604      	mov	r4, r0
 8005c5a:	460d      	mov	r5, r1
 8005c5c:	e737      	b.n	8005ace <atan+0xce>
 8005c5e:	4b36      	ldr	r3, [pc, #216]	; (8005d38 <atan+0x338>)
 8005c60:	4e36      	ldr	r6, [pc, #216]	; (8005d3c <atan+0x33c>)
 8005c62:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8005c66:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8005c6a:	e9da 2300 	ldrd	r2, r3, [sl]
 8005c6e:	f7fa fb0b 	bl	8000288 <__aeabi_dsub>
 8005c72:	4622      	mov	r2, r4
 8005c74:	462b      	mov	r3, r5
 8005c76:	f7fa fb07 	bl	8000288 <__aeabi_dsub>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	460b      	mov	r3, r1
 8005c7e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8005c82:	f7fa fb01 	bl	8000288 <__aeabi_dsub>
 8005c86:	f1bb 0f00 	cmp.w	fp, #0
 8005c8a:	4604      	mov	r4, r0
 8005c8c:	460d      	mov	r5, r1
 8005c8e:	f6bf aed6 	bge.w	8005a3e <atan+0x3e>
 8005c92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c96:	461d      	mov	r5, r3
 8005c98:	e6d1      	b.n	8005a3e <atan+0x3e>
 8005c9a:	a51d      	add	r5, pc, #116	; (adr r5, 8005d10 <atan+0x310>)
 8005c9c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005ca0:	e6cd      	b.n	8005a3e <atan+0x3e>
 8005ca2:	bf00      	nop
 8005ca4:	f3af 8000 	nop.w
 8005ca8:	54442d18 	.word	0x54442d18
 8005cac:	bff921fb 	.word	0xbff921fb
 8005cb0:	8800759c 	.word	0x8800759c
 8005cb4:	7e37e43c 	.word	0x7e37e43c
 8005cb8:	e322da11 	.word	0xe322da11
 8005cbc:	3f90ad3a 	.word	0x3f90ad3a
 8005cc0:	24760deb 	.word	0x24760deb
 8005cc4:	3fa97b4b 	.word	0x3fa97b4b
 8005cc8:	a0d03d51 	.word	0xa0d03d51
 8005ccc:	3fb10d66 	.word	0x3fb10d66
 8005cd0:	c54c206e 	.word	0xc54c206e
 8005cd4:	3fb745cd 	.word	0x3fb745cd
 8005cd8:	920083ff 	.word	0x920083ff
 8005cdc:	3fc24924 	.word	0x3fc24924
 8005ce0:	5555550d 	.word	0x5555550d
 8005ce4:	3fd55555 	.word	0x3fd55555
 8005ce8:	2c6a6c2f 	.word	0x2c6a6c2f
 8005cec:	bfa2b444 	.word	0xbfa2b444
 8005cf0:	52defd9a 	.word	0x52defd9a
 8005cf4:	3fadde2d 	.word	0x3fadde2d
 8005cf8:	af749a6d 	.word	0xaf749a6d
 8005cfc:	3fb3b0f2 	.word	0x3fb3b0f2
 8005d00:	fe231671 	.word	0xfe231671
 8005d04:	3fbc71c6 	.word	0x3fbc71c6
 8005d08:	9998ebc4 	.word	0x9998ebc4
 8005d0c:	3fc99999 	.word	0x3fc99999
 8005d10:	54442d18 	.word	0x54442d18
 8005d14:	3ff921fb 	.word	0x3ff921fb
 8005d18:	440fffff 	.word	0x440fffff
 8005d1c:	7ff00000 	.word	0x7ff00000
 8005d20:	3fdbffff 	.word	0x3fdbffff
 8005d24:	3ff00000 	.word	0x3ff00000
 8005d28:	3ff2ffff 	.word	0x3ff2ffff
 8005d2c:	40038000 	.word	0x40038000
 8005d30:	3ff80000 	.word	0x3ff80000
 8005d34:	bff00000 	.word	0xbff00000
 8005d38:	08005e38 	.word	0x08005e38
 8005d3c:	08005e18 	.word	0x08005e18

08005d40 <fabs>:
 8005d40:	ec51 0b10 	vmov	r0, r1, d0
 8005d44:	ee10 2a10 	vmov	r2, s0
 8005d48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005d4c:	ec43 2b10 	vmov	d0, r2, r3
 8005d50:	4770      	bx	lr
	...

08005d54 <_init>:
 8005d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d56:	bf00      	nop
 8005d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d5a:	bc08      	pop	{r3}
 8005d5c:	469e      	mov	lr, r3
 8005d5e:	4770      	bx	lr

08005d60 <_fini>:
 8005d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d62:	bf00      	nop
 8005d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d66:	bc08      	pop	{r3}
 8005d68:	469e      	mov	lr, r3
 8005d6a:	4770      	bx	lr
